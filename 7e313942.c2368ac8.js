(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{133:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return u})),n.d(t,"MDXProvider",(function(){return d})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return p}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),p=function(e){return function(t){var n=m(t.components);return a.a.createElement(e,o({},t,{components:n}))}},m=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=m(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},y=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=m(n),p=r,d=u["".concat(o,".").concat(p)]||u[p]||f[p]||i;return n?a.a.createElement(d,s(s({ref:t},l),{},{components:n})):a.a.createElement(d,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},143:function(e,t,n){"use strict";var r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.GraphQLResult=function(e){return a.default.createElement(a.default.Fragment,null,a.default.createElement("strong",null,"Result: "),a.default.createElement("pre",{className:"graphql-result"},JSON.stringify(e.result,null,2)))};var a=r(n(0))},425:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={data:{movies:[{title:"Spirited Away",year:"2001"},{title:"Shrek",year:"2001"}]}}},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return y})),n.d(t,"metadata",(function(){return h})),n.d(t,"rightToc",(function(){return g})),n.d(t,"default",(function(){return v}));var r=n(2),a=n(7),i=(n(0),n(133)),o=n(143),l=n(425),s=n.n(l),c={rightToc:[]};function u(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.default)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),'import { createWrapper, WrapperFor } from "graphql-mocks/resolver";\n\nfunction filterResult(result, args) {\n  // only filter on results that are arrays of objects, ie: [User!]!\n  if (\n    !Array.isArray(result) ||\n    (Array.isArray(result) && result.some((item) => typeof item !== "object"))\n  ) {\n    return result;\n  }\n\n  const filtered = result.filter((resultItem) => {\n    // ensure that the value for an argument matches the value\n    // on the object for the matching key\n    return Object.entries(args).every(([key, value]) => {\n      if (key in resultItem) {\n        return resultItem[key] === value;\n      }\n\n      return true;\n    });\n  });\n\n  return filtered;\n}\n\nexport const automaticFilterWrapper = createWrapper(\n  "automatic-field-filtering",\n  WrapperFor.FIELD,\n  async function (originalResolver, wrapperOptions) {\n    return async (parent, args, context, info) => {\n      const result = await originalResolver(parent, args, context, info);\n      return filterResult(result, args);\n    };\n  }\n);\n')))}u.isMDXComponent=!0;var p={rightToc:[]};function m(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.default)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),'export const movies = [\n  {\n    title: "Spirited Away",\n    year: "2001",\n  },\n\n  {\n    title: "Shrek",\n    year: "2001",\n  },\n\n  {\n    title: "La La Land",\n    year: "2016",\n  },\n];\n')))}m.isMDXComponent=!0;var d={rightToc:[]};function f(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.default)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),'import { GraphQLHandler } from "graphql-mocks";\nimport { embed } from "graphql-mocks/resolver-map";\nimport { automaticFilterWrapper } from "./automatic-filtering-filter.source";\nimport { resolverMap } from "./resolver-map";\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [\n    embed({\n      wrappers: [automaticFilterWrapper],\n    }),\n  ],\n\n  dependencies: {\n    graphqlSchema: `\n      schema {\n        query: Query\n      }\n\n      type Query {\n        movies(title: String, year: String): [Movie!]!\n      }\n\n      type Movie {\n        title: String!\n        year: String!\n      }\n    `,\n  },\n});\n\nconst query = handler.query(\n  `\n  query FilteredMovies($year: String) {\n    movies(year: $year) {\n      title\n      year\n    }\n  }\n`,\n  {\n    year: "2001",\n  }\n);\nquery.then((result) => console.log(result));\n')))}f.isMDXComponent=!0;var y={title:"Automatic Resolver Filtering with Wrappers"},h={unversionedId:"guides/automatic-filtering",id:"guides/automatic-filtering",isDocsHomePage:!1,title:"Automatic Resolver Filtering with Wrappers",description:"A common pattern is to filter information on Field Resolvers based on arguments from a query. In the case this pattern can be applied to multiple Field Resolvers it's useful to standardize this filtering with Resolver Wrappers. This helps separate filtering from the data resolution and allows for re-use. The nature of the filtering depends on the conventions of your GraphQL API.",source:"@site/docs/guides/automatic-filtering.mdx",slug:"/guides/automatic-filtering",permalink:"/docs/guides/automatic-filtering",version:"current",sidebar:"docs",previous:{title:"Managing Resolver Context",permalink:"/docs/guides/managing-context"},next:{title:"Relay Pagination",permalink:"/docs/guides/relay-pagination"}},g=[{value:"Example",id:"example",children:[]}],b={rightToc:g};function v(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.default)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"A common pattern is to filter information on Field Resolvers based on arguments from a query. In the case this pattern can be applied to multiple Field Resolvers it's useful to standardize this filtering with ",Object(i.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/resolver/introducing-wrappers"}),"Resolver Wrappers"),". This helps separate filtering from the data resolution and allows for re-use. The nature of the filtering depends on the conventions of your GraphQL API."),Object(i.mdx)("h2",{id:"example"},"Example"),Object(i.mdx)("p",null,"This Resolver Wrapper is an example of automatically filtering a list based on the arguments passed in. If a given key is provided it will filter any list down based on the value of the argument."),Object(i.mdx)(u,{mdxType:"AutomaticFilterSource"}),Object(i.mdx)("p",null,"For this example the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Query.movies")," resolver has the following data:"),Object(i.mdx)(m,{mdxType:"AutomaticFilterData"}),Object(i.mdx)("p",null,"Then setting up the handler to apply the ",Object(i.mdx)("inlineCode",{parentName:"p"},"automaticFilter")," Wrapper against the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Query.movies"),"\nfield resolver. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," argument can be customized to specify a specific selection of fields that should receive the automatic filter wrapper. Also, because there can be multiple Resolver Wrappers passed into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"wrappers")," array, you could crete and combine multiple automatic filtering Field Wrappers to flexibly compose filtering across your fields."),Object(i.mdx)("p",null,"The final query in the example, ",Object(i.mdx)("inlineCode",{parentName:"p"},"FilteredMovies"),", will automatically filter based on the query args ",Object(i.mdx)("inlineCode",{parentName:"p"},'{ "year": "2001" }')," since ",Object(i.mdx)("inlineCode",{parentName:"p"},"year")," is an argument that also exists on the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Movie")," type being filtered."),Object(i.mdx)(f,{mdxType:"AutomaticFilterExample"}),Object(i.mdx)(o.GraphQLResult,{result:s.a,mdxType:"GraphQLResult"}),Object(i.mdx)("p",null,'In the result the movie "La La Land" was filtered out since it was released in 2016 and the query specified movies with the year ',Object(i.mdx)("inlineCode",{parentName:"p"},"'2001'"),"."))}v.isMDXComponent=!0}}]);