(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{134:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return d})),n.d(t,"MDXProvider",(function(){return m})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return u})),n.d(t,"withMDXComponents",(function(){return p}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),p=function(e){return function(t){var n=u(t.components);return a.a.createElement(e,c({},t,{components:n}))}},u=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},x={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,m=d["".concat(c,".").concat(p)]||d[p]||x[p]||o;return n?a.a.createElement(m,l(l({ref:t},i),{},{components:n})):a.a.createElement(m,l({ref:t},i))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},35:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(7),o=(n(0),n(134)),c={id:"managing-context",title:"Managing Resolver Context"},i={unversionedId:"guides/managing-context",id:"guides/managing-context",isDocsHomePage:!1,title:"Managing Resolver Context",description:"Every GraphQL Resolver has a context argument. The graphql-mocks framework manages this context object and provides various entry points to include additional properties on the context object.",source:"@site/docs/guides/managing-context.md",slug:"/guides/managing-context",permalink:"/docs/guides/managing-context",version:"current",sidebar:"docs",previous:{title:"Using Paper with graphql-mocks",permalink:"/docs/guides/paper"},next:{title:"Automatic Resolver Filtering with Wrappers",permalink:"/docs/guides/automatic-filtering"}},l=[{value:"Initial Context",id:"initial-context",children:[]},{value:"Query Context",id:"query-context",children:[]},{value:"Resolver Wrapper Context",id:"resolver-wrapper-context",children:[]},{value:"Framework Managed Context",id:"framework-managed-context",children:[{value:"Dependencies",id:"dependencies",children:[]},{value:"Network Requests and Responses",id:"network-requests-and-responses",children:[]}]}],s={rightToc:l};function d(e){var t=e.components,n=Object(a.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(r.default)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,"Every GraphQL Resolver has a ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/resolver/using-resolvers#context-parameter-third"}),"context argument"),". The ",Object(o.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")," framework manages this context object and provides various entry points to include additional properties on the context object."),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("a",Object(r.default)({parentName:"li"},{href:"#initial-context"}),"Initital Context")),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("a",Object(r.default)({parentName:"li"},{href:"#query-context"}),"Query Context")),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("a",Object(r.default)({parentName:"li"},{href:"#resolver-wrapper-context"}),"Resolver Wrapper Context")),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("a",Object(r.default)({parentName:"li"},{href:"#framework-managed-context"}),"Framework Managed Context"))),Object(o.mdx)("p",null,"All of these contexts are flattened into a single context object available within a Resolver:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"function resolver(parent, args, context, info) {\n  // the context object is available as the third argument in a resolver\n}\n")),Object(o.mdx)("h2",{id:"initial-context"},"Initial Context"),Object(o.mdx)("p",null,"The optional initial context object is used as the base context, and is passed into the constructor of ",Object(o.mdx)("inlineCode",{parentName:"p"},"GraphQLHandler"),":"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"const handler = new GraphQLHandler({\n  initialContext: {\n    /*\n      provides the base for all context objects\n    */\n  }\n});\n")),Object(o.mdx)("h2",{id:"query-context"},"Query Context"),Object(o.mdx)("p",null,"An additional context object can be included on a per-query basis on the third argument of ",Object(o.mdx)("inlineCode",{parentName:"p"},"query")," method of the ",Object(o.mdx)("inlineCode",{parentName:"p"},"GraphQLHandler")," instance."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"const additionalContext = {};\nawait handler.query(query, variables, additonalContext);\n")),Object(o.mdx)("h2",{id:"resolver-wrapper-context"},"Resolver Wrapper Context"),Object(o.mdx)("p",null,'A Resolver Wrapper can return a new "outer" resolver that wraps the initial resolver. The "outer" resolver is a resolver function and therefore has access to the same context argument where it can be modified.'),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"import { createWrapper, WrapperFor } from 'graphql-mocks/resolver';\n\nconst wrapper = createWrapper('my-wrapper', WrapperFor.FIELD, function resolverWrapper(originalResolver, wrapperOptions) {\n  return async function outerResolver(parent, args, context, info) {\n\n    // access to the `context` object here can be modified\n    // and conditionally changed what is passed to the\n    // `originalResolver`\n\n    return await originalResolver(parent, args, context, info);\n  };\n});\n")),Object(o.mdx)("p",null,"Learn more with ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/resolver/introducing-wrappers"}),"Introducing Resolver Wrappers")," and ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/resolver/creating-wrappers"}),"Creating Custom Wrappers"),"."),Object(o.mdx)("h2",{id:"framework-managed-context"},"Framework Managed Context"),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")," framework manages the context available in Resolvers to include additional helpful references to dependencies and current network requests and responses."),Object(o.mdx)("h3",{id:"dependencies"},"Dependencies"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/handler/introducing-handler#dependencies"}),"Dependencies")," added to a ",Object(o.mdx)("inlineCode",{parentName:"p"},"GraphQLHandler")," can be accessed within a Resolver Wrapper via the ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"pathname:///api/graphql-mocks/modules/resolver.html#extractDependencies"}),Object(o.mdx)("inlineCode",{parentName:"a"},"extractDependencies")," function"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"function resolver(parent, args, context, info) {\n  const { paper, anotherDependency } = extractDependencies(context, ['paper', 'anotherDependency']);\n}\n")),Object(o.mdx)("h3",{id:"network-requests-and-responses"},"Network Requests and Responses"),Object(o.mdx)("p",null,"Most ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/network/introducing-network-handlers"}),"Network Handlers")," will include the request and/or response, and other useful context within the resolver ",Object(o.mdx)("inlineCode",{parentName:"p"},"context")," argument. These can be destrutured from the context object and are documented for each network handler."),Object(o.mdx)("p",null,"For example the ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/network/msw#resolver-context"}),"Mock Service Worker (",Object(o.mdx)("inlineCode",{parentName:"a"},"msw"),") Network Handler")," includes the ",Object(o.mdx)("inlineCode",{parentName:"p"},"msw")," property with access to the request and response."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"function resolver(parent, args, context, info) {\n  const { msw } = context;\n  // request and response from the `msw` request handler\n  const { req, res } = msw;\n}\n")))}d.isMDXComponent=!0}}]);