(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{125:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return o})),t.d(n,"MDXProvider",(function(){return p})),t.d(n,"mdx",(function(){return b})),t.d(n,"useMDXComponents",(function(){return s})),t.d(n,"withMDXComponents",(function(){return m}));var i=t(0),l=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function h(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=l.a.createContext({}),m=function(e){return function(n){var t=s(n.components);return l.a.createElement(e,r({},n,{components:t}))}},s=function(e){var n=l.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):h(h({},n),e)),t},p=function(e){var n=s(e.components);return l.a.createElement(o.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},u=l.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),o=s(t),m=i,p=o["".concat(r,".").concat(m)]||o[m]||g[m]||a;return t?l.a.createElement(p,h(h({ref:n},c),{},{components:t})):l.a.createElement(p,h({ref:n},c))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=u;var c={};for(var h in n)hasOwnProperty.call(n,h)&&(c[h]=n[h]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var d=2;d<a;d++)r[d]=t[d];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},38:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return h})),t.d(n,"default",(function(){return o}));var i=t(2),l=t(7),a=(t(0),t(125)),r={title:"Available Highlighters"},c={unversionedId:"highlight/available-highlighters",id:"highlight/available-highlighters",isDocsHomePage:!1,title:"Available Highlighters",description:"They are used in conjunction with the Highlight system and you can also create your own custom ones. If you've created one that could be useful for the community open up a PR or issue and it can be added either to the graphql-mocks package or linked externally.",source:"@site/docs/highlight/available-highlighters.md",slug:"/highlight/available-highlighters",permalink:"/docs/highlight/available-highlighters",version:"current",sidebar:"docs",previous:{title:"Introducing Highlight",permalink:"/docs/highlight/introducing-highlight"},next:{title:"Create Custom Highlighters",permalink:"/docs/highlight/creating-highlighters"}},h=[{value:"<code>field</code>",id:"field",children:[{value:"Highlight with Field References",id:"highlight-with-field-references",children:[]},{value:"Wildcard Highlighting",id:"wildcard-highlighting",children:[]},{value:"Highlight All Fields",id:"highlight-all-fields",children:[]}]},{value:"<code>type</code>",id:"type",children:[{value:"Highlight a Named GraphQL Type",id:"highlight-a-named-graphql-type",children:[]},{value:"Highlight All Named Types",id:"highlight-all-named-types",children:[]}]},{value:"<code>combine</code>",id:"combine",children:[]},{value:"<code>fromResolverMap</code>",id:"fromresolvermap",children:[]},{value:"<code>interfaces</code>",id:"interfaces",children:[{value:"Highlight Specific Interfaces",id:"highlight-specific-interfaces",children:[]},{value:"Highlight All Interfaces",id:"highlight-all-interfaces",children:[]}]},{value:"<code>union</code>",id:"union",children:[{value:"Highlight Specific Unions",id:"highlight-specific-unions",children:[]},{value:"Highlight All Unions",id:"highlight-all-unions",children:[]}]},{value:"<code>reference</code>",id:"reference",children:[]},{value:"<code>resolvesTo</code>",id:"resolvesto",children:[]}],d={rightToc:h};function o(e){var n=e.components,t=Object(l.default)(e,["components"]);return Object(a.mdx)("wrapper",Object(i.default)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,"They are used in conjunction with the ",Object(a.mdx)("a",Object(i.default)({parentName:"p"},{href:"/docs/highlight/introducing-highlight"}),"Highlight system")," and you can also ",Object(a.mdx)("a",Object(i.default)({parentName:"p"},{href:"/docs/highlight/creating-highlighters"}),"create your own custom ones"),". If you've created one that could be useful for the community open up a PR or issue and it can be added either to the ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")," package or linked externally."),Object(a.mdx)("h2",{id:"field"},Object(a.mdx)("inlineCode",{parentName:"h2"},"field")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { field } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"This highlighter allows highlighting GraphQL fields from a GraphQL Schema."),Object(a.mdx)("h3",{id:"highlight-with-field-references"},"Highlight with Field References"),Object(a.mdx)("p",null,"Fields can be highlighted by passing in one or more Field Reference tuple(s) of typename and field name."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(\n  field(['Query', 'users'], ['Mutation', 'addUser'])\n);\n")),Object(a.mdx)("h3",{id:"wildcard-highlighting"},"Wildcard Highlighting"),Object(a.mdx)("p",null,"Either all types or all fields can be highlighted using the ",Object(a.mdx)("inlineCode",{parentName:"p"},"HIGHLIGHT_ALL")," constant for either position in the tuple:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { HIGHLIGHT_ALL } from 'graphql-mocks/highlight';\n\nhi(graphqlSchema).include(\n  field(\n    // highlight the \"users\" field on all types\n    [HIGHLIGHT_ALL, 'users']\n\n    // highlight all fields on the Query type\n    ['Query', HIGHLIGHT_ALL]\n  )\n);\n")),Object(a.mdx)("h3",{id:"highlight-all-fields"},"Highlight All Fields"),Object(a.mdx)("p",null,"Calling ",Object(a.mdx)("inlineCode",{parentName:"p"},"field")," with no arguments will highlight all fields on all types."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(field());\n")),Object(a.mdx)("h2",{id:"type"},Object(a.mdx)("inlineCode",{parentName:"h2"},"type")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { type } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"One or more GraphQL Named Types can be highlighted on the schema by specifying the typename(s). Named GraphQL Types include more than just ",Object(a.mdx)("inlineCode",{parentName:"p"},"GraphQLObjectType")," specified by the ",Object(a.mdx)("inlineCode",{parentName:"p"},"type")," keyword, it also includes named types specified by ",Object(a.mdx)("inlineCode",{parentName:"p"},"interface"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"union"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"enum")," declarations."),Object(a.mdx)("p",null,"Note: This does not include highlighting the fields of a type, that is covered by the ",Object(a.mdx)("inlineCode",{parentName:"p"},"field")," highlighter."),Object(a.mdx)("h3",{id:"highlight-a-named-graphql-type"},"Highlight a Named GraphQL Type"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(\n  type('Query', 'Mutation', 'User')\n);\n")),Object(a.mdx)("h3",{id:"highlight-all-named-types"},"Highlight All Named Types"),Object(a.mdx)("p",null,"Highlight all named types can be done by either calling the highlighter with no arguments, or by calling it with the ",Object(a.mdx)("inlineCode",{parentName:"p"},"HIGHLIGHT_ALL")," constant."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { HIGHLIGHT_ALL } from 'graphql-mocks/highlight';\n\nhi(graphqlSchema).include(\n  // calling with no arguments\n  type(),\n\n  // using the HIGHLIGHT_ALL constant\n  type(HIGHLIGHT_ALL)\n);\n")),Object(a.mdx)("h2",{id:"combine"},Object(a.mdx)("inlineCode",{parentName:"h2"},"combine")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { combine } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"When using ",Object(a.mdx)("inlineCode",{parentName:"p"},"filter")," on a ",Object(a.mdx)("inlineCode",{parentName:"p"},"Highlight")," instance it is sometimes useful to be able to combine the sets of multiple highlighters into a single set, and this is what the ",Object(a.mdx)("inlineCode",{parentName:"p"},"combine")," highlighter does."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { union, interfaces } from 'graphql-mocks';\n\nhi(graphqlSchema).filter(\n  combine(union(), interfaces())\n);\n")),Object(a.mdx)("p",null,"In this example a combine highlighted set of all unions and interfaces are highlighted."),Object(a.mdx)("h2",{id:"fromresolvermap"},Object(a.mdx)("inlineCode",{parentName:"h2"},"fromResolverMap")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { fromResolverMap } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"Given a Resolver Map, which may have an incomplete set of resolvers for the schema, this highlighter will provide highlights for the types and fields that are covered by the resolver map."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"const resolverMap = {\n  Query: {\n    person: queryPersonResolver,\n  },\n\n  Person: {\n    name: personNameResolver,\n  },\n};\n\nhi(graphqlSchema).include(\n  combine(fromResolverMap(resolverMap));\n);\n")),Object(a.mdx)("p",null,"Assuming that ",Object(a.mdx)("inlineCode",{parentName:"p"},"Query.person")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"Person.name")," were valid entries on the GraphQL Schema, the references highlighted would be:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"[\n  'Query',\n  ['Query', 'person'],\n  'Person',\n  ['Person', 'name'],\n]\n")),Object(a.mdx)("h2",{id:"interfaces"},Object(a.mdx)("inlineCode",{parentName:"h2"},"interfaces")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { interfaces } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"This highlighter highlights interfaces on the GraphQL Schema."),Object(a.mdx)("h3",{id:"highlight-specific-interfaces"},"Highlight Specific Interfaces"),Object(a.mdx)("p",null,"Specific interfaces can be highlighted by specifying their name."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(\n  interfaces('Purchasable', 'Commentable')\n);\n")),Object(a.mdx)("h3",{id:"highlight-all-interfaces"},"Highlight All Interfaces"),Object(a.mdx)("p",null,"This can be done by either calling the highlighter with no arguments, or by providing the ",Object(a.mdx)("inlineCode",{parentName:"p"},"HIGHLIGHT_ALL")," constant."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { HIGHLIGHT_ALL } from 'graphql-mocks/highlight';\n\nhi(graphqlSchema).include(\n  // by specifying no arguments, all interfaces are highlighted\n  interfaces(),\n\n  // alternatively, the HIGHLIGHT_ALL will explicitly\n  // highlight all interfaces also\n  interfaces(HIGHLIGHT_ALL)\n);\n")),Object(a.mdx)("h2",{id:"union"},Object(a.mdx)("inlineCode",{parentName:"h2"},"union")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { union } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("h3",{id:"highlight-specific-unions"},"Highlight Specific Unions"),Object(a.mdx)("p",null,"Specific unions can be highlighted by specifying their name."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(\n  union('SearchResult', 'Product')\n);\n")),Object(a.mdx)("h3",{id:"highlight-all-unions"},"Highlight All Unions"),Object(a.mdx)("p",null,"This can be done by either calling the highlighter with no arguments, or by providing the ",Object(a.mdx)("inlineCode",{parentName:"p"},"HIGHLIGHT_ALL")," constant."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { HIGHLIGHT_ALL } from 'graphql-mocks/highlight';\n\nhi(graphqlSchema).include(\n  // by specifying no arguments, all unions are highlighted\n  union(),\n\n  // alternatively, the HIGHLIGHT_ALL will explicitly\n  // highlight all union also\n  union(HIGHLIGHT_ALL)\n);\n")),Object(a.mdx)("h2",{id:"reference"},Object(a.mdx)("inlineCode",{parentName:"h2"},"reference")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { reference } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"While the underlying result of highlights are References, this allows raw References to be highlighted also with the ",Object(a.mdx)("inlineCode",{parentName:"p"},"reference")," highlighter. One or more Field References or Type References, or a combination, can be provided."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(\n  reference('Query', ['Mutation', 'addUser'])\n);\n")),Object(a.mdx)("h2",{id:"resolvesto"},Object(a.mdx)("inlineCode",{parentName:"h2"},"resolvesTo")),Object(a.mdx)("p",null,"Package: ",Object(a.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"import { resolvesTo } from 'graphql-mocks/highlight';\n")),Object(a.mdx)("p",null,"Sometimes it's handy to highlight based on what a field returns. This highlighter makes this easy by specifying the return in the GraphQL Schema Definition Language and highlighting the Field Resolvers that match."),Object(a.mdx)("p",null,"With the given GraphQL Schema:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-graphql"}),"schema {\n  query: Query\n}\n\ntype Query {\n  loggedInUser: User!\n  allUsers: [User!]!\n}\n\ntype User {\n  firstName: String!\n  lastName: String\n}\n")),Object(a.mdx)("p",null,"And using ",Object(a.mdx)("inlineCode",{parentName:"p"},"resolvesTo"),":"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"hi(graphqlSchema).include(\n  resolvesTo('String!', 'User!')\n);\n")),Object(a.mdx)("p",null,"The highlighted references would be:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(i.default)({parentName:"pre"},{className:"language-js"}),"[\n  ['User', 'firstName'], // the field returns a \"String!\"\n  ['Query', 'loggedInUser'] // the field returns a \"User!\"\n]\n")),Object(a.mdx)("p",null,"Note: The matching is strict, in this example, a non-null ",Object(a.mdx)("inlineCode",{parentName:"p"},"User!")," will not match a nullable ",Object(a.mdx)("inlineCode",{parentName:"p"},"User"),", both would have to be explicitly specified ",Object(a.mdx)("inlineCode",{parentName:"p"},"resolvesTo('User', 'User!')")))}o.isMDXComponent=!0}}]);