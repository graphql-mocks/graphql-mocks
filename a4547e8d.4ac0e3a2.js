(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{126:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return c})),t.d(n,"MDXProvider",(function(){return m})),t.d(n,"mdx",(function(){return b})),t.d(n,"useMDXComponents",(function(){return u})),t.d(n,"withMDXComponents",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),d=function(e){return function(n){var t=u(n.components);return a.a.createElement(e,s({},n,{components:t}))}},u=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},x={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},h=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=r,m=c["".concat(s,".").concat(d)]||c[d]||x[d]||o;return t?a.a.createElement(m,i(i({ref:n},p),{},{components:t})):a.a.createElement(m,i({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=h;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var l=2;l<o;l++)s[l]=t[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},59:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return p})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return c}));var r=t(2),a=t(7),o=(t(0),t(126)),s={id:"express",title:"Express"},p={unversionedId:"network/express",id:"network/express",isDocsHomePage:!1,title:"Express",description:"Express is a popular node.js web server library. Mocks loaded into a  GraphQLHandler can be integrated with express, via @graphql-mocks/network-express, to provide a live running server. This is useful when needing a live endpoint to test against or hosting mocks to share with others.",source:"@site/docs/network/express.md",slug:"/network/express",permalink:"/docs/network/express",version:"current",sidebar:"docs",previous:{title:"Introducing Network Handlers",permalink:"/docs/network/introducing-network-handlers"},next:{title:"Mock Service Worker",permalink:"/docs/network/msw"}},i=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Resolver Context",id:"resolver-context",children:[]}]},{value:"API Documentation",id:"api-documentation",children:[]}],l={rightToc:i};function c(e){var n=e.components,t=Object(a.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(r.default)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"https://expressjs.com/"}),"Express")," is a popular node.js web server library. Mocks loaded into a  ",Object(o.mdx)("inlineCode",{parentName:"p"},"GraphQLHandler")," can be integrated with express, via ",Object(o.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/network-express"),", to provide a live running server. This is useful when needing a live endpoint to test against or hosting mocks to share with others."),Object(o.mdx)("h2",{id:"installation"},"Installation"),Object(o.mdx)("p",null,"Install the ",Object(o.mdx)("inlineCode",{parentName:"p"},"express")," and  ",Object(o.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/network-express")," npm packages."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-bash"}),"# npm\nnpm install --save-dev express @graphql-mocks/network-express\n\n# yarn\nyarn add --dev express @graphql-mocks/network-express\n")),Object(o.mdx)("h2",{id:"usage"},"Usage"),Object(o.mdx)("p",null,"Use ",Object(o.mdx)("inlineCode",{parentName:"p"},"expressMiddleware")," from ",Object(o.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/network-express")," as an ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"https://expressjs.com/en/guide/using-middleware.html#middleware.application"}),"application-level middleware")," or ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"https://expressjs.com/en/guide/using-middleware.html#middleware.router"}),"router middleware"),"."),Object(o.mdx)("p",null,"This example sets up a file ",Object(o.mdx)("inlineCode",{parentName:"p"},"server.js")," using an express server with the ",Object(o.mdx)("inlineCode",{parentName:"p"},"expressMiddleware")," as an application-middleware, listening on port 8080."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"// server.js\n\nconst { GraphQLHandler } = require('graphql-mocks');\nconst { expressMiddleware } = require('@graphql-mocks/network-express');\nconst express = require('express');\n\nconst graphqlHandler = new GraphQLHandler({\n  dependencies: { graphqlSchema }\n};\n\nconst app = express();\napp.post('/graphql', expressMiddleware(graphqlHandler));\n\nconst port = 8080;\napp.listen(port);\n")),Object(o.mdx)("p",null,"Start the express app."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-shell"}),"node server\n")),Object(o.mdx)("p",null,"The server will now be responding to graphql ",Object(o.mdx)("inlineCode",{parentName:"p"},"POST")," requests at ",Object(o.mdx)("inlineCode",{parentName:"p"},"http://localhost:8080/graphql"),"."),Object(o.mdx)("p",null,"For example, making a request using fetch (in the browser or via ",Object(o.mdx)("inlineCode",{parentName:"p"},"node-fetch"),")"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"fetch('http://localhost:8080/graphql, {\n  method: 'POST',\n  body: JSON.stringify({\n    // required\n    query: `\n      query {\n        # graphql query\n      }\n    `,\n\n    // optional\n    variables: {},\n\n    // optional\n    operationName: 'OperationName'\n  })\n}).then(async (response) => {\n  // get the final json payload\n  const result = await response.json();\n  return result;\n});\n")),Object(o.mdx)("p",null,"See the ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"https://graphql.org/learn/serving-over-http/#post-request"}),"GraphQL docs")," for details on these body parameters, and making http requests."),Object(o.mdx)("h3",{id:"resolver-context"},"Resolver Context"),Object(o.mdx)("p",null,"The express request and response objects are available on the resolver ",Object(o.mdx)("inlineCode",{parentName:"p"},"context")," argument, under the ",Object(o.mdx)("inlineCode",{parentName:"p"},"express")," property."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{className:"language-js"}),"function resolver(parent, args, context, info) {\n  const { req, res } = context.express;\n}\n")),Object(o.mdx)("h2",{id:"api-documentation"},"API Documentation"),Object(o.mdx)("p",null," See the ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/api/network-express/"}),"API Documentation")," for types and more details."))}c.isMDXComponent=!0}}]);