(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{129:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return c})),n.d(t,"MDXProvider",(function(){return h})),n.d(t,"mdx",(function(){return b})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return s}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),s=function(e){return function(t){var n=m(t.components);return r.a.createElement(e,l({},t,{components:n}))}},m=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},h=function(e){var t=m(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),c=m(n),s=a,h=c["".concat(l,".").concat(s)]||c[s]||u[s]||i;return n?r.a.createElement(h,d(d({ref:t},o),{},{components:n})):r.a.createElement(h,d({ref:t},o))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},43:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return c}));var a=n(2),r=n(7),i=(n(0),n(129)),l={id:"creating-middlewares",title:"Creating Custom Middlewares"},o={unversionedId:"resolver-map/creating-middlewares",id:"resolver-map/creating-middlewares",isDocsHomePage:!1,title:"Creating Custom Middlewares",description:"Anatomy of a Resolver Map Middleware",source:"@site/docs/resolver-map/creating-middlewares.md",slug:"/resolver-map/creating-middlewares",permalink:"/docs/resolver-map/creating-middlewares",version:"current",sidebar:"docs",previous:{title:"Available Middlewares",permalink:"/docs/resolver-map/available-middlewares"},next:{title:"Introducing Highlight",permalink:"/docs/highlight/introducing-highlight"}},d=[{value:"Anatomy of a Resolver Map Middleware",id:"anatomy-of-a-resolver-map-middleware",children:[]},{value:"Adding options to a Middleware",id:"adding-options-to-a-middleware",children:[{value:"<code>highlight</code> option",id:"highlight-option",children:[]}]},{value:"Handling External Dependencies",id:"handling-external-dependencies",children:[{value:"Shared Dependencies",id:"shared-dependencies",children:[]},{value:"Isolated Dependencies",id:"isolated-dependencies",children:[]}]},{value:"Complete Example",id:"complete-example",children:[]},{value:"Useful Utilities",id:"useful-utilities",children:[{value:"<code>setResolver</code>",id:"setresolver",children:[]},{value:"<code>getResolver</code>",id:"getresolver",children:[]},{value:"<code>applyWrappers</code>",id:"applywrappers",children:[]}]}],p={rightToc:d};function c(e){var t=e.components,n=Object(r.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.default)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("h2",{id:"anatomy-of-a-resolver-map-middleware"},"Anatomy of a Resolver Map Middleware"),Object(i.mdx)("p",null,"Resovler Map Middlewares represent the lazy application of changes to a Resolver Map. A ",Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"pathname:///api/graphql-mocks/modules/types.html#ResolverMapMiddleware"}),"Resolver Map Middleware")," receives a Resolver Map, along with some contextual options, and returns a Resolver Map. The Resolver Map returned does not need to be the same one that was passed in but it will represent the Resolver Map going forward."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"async (resolverMap, packOptions) => {\n  // make any modifications and return a resolver map\n  return resolverMap;\n}\n")),Object(i.mdx)("p",null,"with ",Object(i.mdx)("inlineCode",{parentName:"p"},"packOptions")," representing:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-javascript"}),"{\n  state: Object\n  dependencies: Object\n}\n")),Object(i.mdx)("p",null,"Note: Only these properties should be relied on. Do not add additional properties, there is no guarantee they will be preserved."),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"state")," \u2014 Useful for any storing any references that should be persisted for accessing from the outside, via the ",Object(i.mdx)("a",Object(a.default)({parentName:"li"},{href:"pathname:///api/graphql-mocks/classes/GraphQLHandler.html#state"}),Object(i.mdx)("inlineCode",{parentName:"a"},"state")," property")," on a ",Object(i.mdx)("inlineCode",{parentName:"li"},"GraphQLHandler")," instance."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"dependencies")," \u2014 Contains any external dependencies initially passed in when creating the ",Object(i.mdx)("inlineCode",{parentName:"li"},"GraphQLHandler"),".")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"packOptions")," object is also available within Resolver Wrappers."),Object(i.mdx)("h2",{id:"adding-options-to-a-middleware"},"Adding options to a Middleware"),Object(i.mdx)("p",null,"The easiest way of adding options to a Resolver Map is to use a function factory that provides any additional options by its arguments which are in scope for the inner Resolver Map Middleware function."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const middlewareFunction = (options) => {\n  // return a resolver map middleware with options in scope\n  return (resolverMap, packOptions) => {\n    // ... do something with the `options` reference\n    return resolverMap;\n  }\n}\n")),Object(i.mdx)("p",null,"Then it can be used where needed, for example:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [middlewareFunction(options)],\n});\n")),Object(i.mdx)("h3",{id:"highlight-option"},Object(i.mdx)("inlineCode",{parentName:"h3"},"highlight")," option"),Object(i.mdx)("p",null,"For many Middlewares it is useful to provide a ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option when a Middleware can operate on user-defined portions of the GraphQL Schema. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option uses the Highlight system and conforms to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"CoercibleHighlight")," type."),Object(i.mdx)("p",null,"By using ",Object(i.mdx)("inlineCode",{parentName:"p"},"CoercibleHighlight")," it provides a flexible option by accepting:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"References, an array of ",Object(i.mdx)("a",Object(a.default)({parentName:"li"},{href:"/docs/highlight/introducing-highlight#references"}),"References")),Object(i.mdx)("li",{parentName:"ul"},"Highlight callback function ",Object(i.mdx)("inlineCode",{parentName:"li"},"(h) => { return h.include(['Query', 'user']) }"),", a callback where the highlight instance is setup and expects a returned ",Object(i.mdx)("inlineCode",{parentName:"li"},"Highlight")," instance."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"Highlight")," instance, provided directly by the consumers of the middleware")),Object(i.mdx)("p",null,"These three options can be converted into a ",Object(i.mdx)("inlineCode",{parentName:"p"},"Highlight")," instance with the ",Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"pathname:///api/graphql-mocks/modules/highlight.utils.html#coerceHighlight"}),Object(i.mdx)("inlineCode",{parentName:"a"},"coerceHighlight")," utility"),"."),Object(i.mdx)("p",null,'If the default behavior is to "highlight the entire schema" for a the ',Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option the ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlightAllCallback")," can be used as the default value which will highlight everything in the schema."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"import { coerceHighlight } from 'graphql-mocks/highlight/utils';\n\nconst middleware = ({ highlight }) => {\n  return (resolverMap, packOptions) => {\n    const graphqlSchema = packOptions.dependencies?.graphqlSchema;\n\n    // ensures that a Highlight instance is provided based from\n    // either references, a highlight callback, or a highlight instance\n    const coercedHighlight = coerceHighlight(highlight);\n  }\n};\n")),Object(i.mdx)("h2",{id:"handling-external-dependencies"},"Handling External Dependencies"),Object(i.mdx)("p",null,"A dependency in this case is something external to the Resolver Map Middleware that can/must be provided for the Resolver Map Middleware. An example might be a reference to a global object, or an instance of"),Object(i.mdx)("h3",{id:"shared-dependencies"},"Shared Dependencies"),Object(i.mdx)("p",null,"If a dependency is considered shared amongst multiple Resolver Map Middlewares or Resolver Wrappers use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"dependencies")," the external dependencies, ",Object(i.mdx)("inlineCode",{parentName:"p"},"packOptions.dependencies"),",  provided on the second argument of a Resolver Map Middleware."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const middleware = return (resolverMap, packOptions) => {\n  // pull `fooDependency` reference off packOptions.dependencies\n  const foo = packOptions.dependencies?.fooDependency\n\n  if (!foo) {\n    throw new Error('`foo` is a required dependency');\n  }\n}\n")),Object(i.mdx)("h3",{id:"isolated-dependencies"},"Isolated Dependencies"),Object(i.mdx)("p",null,"When a dependency is used only for a single instance of a middleware it can be provided as an ",Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/resolver-map/creating-middlewares#adding-options-to-a-middleware"}),"option in a factory function"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const middlewareFunction = ({ someDependency }) => {\n  return (resolverMap, packOptions) => {\n    // ... do something with the `someDependency` reference\n    return resolverMap;\n  }\n}\n")),Object(i.mdx)("h2",{id:"complete-example"},"Complete Example"),Object(i.mdx)("p",null,"To show a complete example where a highlight option, with a default ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlightAllCallback")," option, is used to iterate over the references and add a resolver for the reference."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"import { walk, coerceHighlight } from 'graphql-mocks/highlight/utils';\nimport { setResolver } from 'graphql-mocks/resolver-map';\nimport { highlightAllCallback } from 'graphql-mocks/resolver-map/utils';\n\nconst middleware(options) {\n  // will either be the given highlight option or fallback to highlighting all\n  const highlight = coerceHighlight(options?.highlight ?? highlightAllCallback);\n\n  return async (resolverMap, packOptions) => {\n    const graphqlSchema = packOptions.dependencies?.graphqlSchema;\n\n    // use references from highlight to iterate over all options\n    await walk(graphqlSchema, highlight.references, (reference) => {\n      setResolver(resolverMap, reference, () => 'resolver function!', { replace: true });\n    });\n\n    return resolverMap;\n  }\n}\n")),Object(i.mdx)("h2",{id:"useful-utilities"},"Useful Utilities"),Object(i.mdx)("p",null,"When operating on the landscape of a Resolver Map there are some useful utilities to consider using."),Object(i.mdx)("h3",{id:"setresolver"},Object(i.mdx)("inlineCode",{parentName:"h3"},"setResolver")),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"import { setResolver } from 'graphql-mocks/resolver-map';")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"pathname:///api/graphql-mocks/modules/resolverMap.html#setResolver"}),"API Documentation")),Object(i.mdx)("p",null,"Add a Resolver function to a Resolver Map at a given reference."),Object(i.mdx)("h3",{id:"getresolver"},Object(i.mdx)("inlineCode",{parentName:"h3"},"getResolver")),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"import { getResolver } from 'graphql-mocks/resolver-map';")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"pathname:///api/graphql-mocks/modules/resolverMap.html#getResolver"}),"API Documentation")),Object(i.mdx)("p",null,"Get a Resolver function from a Resolver Map for a given reference."),Object(i.mdx)("h3",{id:"applywrappers"},Object(i.mdx)("inlineCode",{parentName:"h3"},"applyWrappers")),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"import { applyWrappers } from 'graphql-mocks/resolver';")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"pathname:///api/graphql-mocks/modules/resolver.html#applyWrappers"}),"API Documentation")),Object(i.mdx)("p",null,"Generally, it's easiest to use ",Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/resolver-map/available-middlewares#embed"}),Object(i.mdx)("inlineCode",{parentName:"a"},"embed"))," and ",Object(i.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/resolver-map/available-middlewares#layer"}),Object(i.mdx)("inlineCode",{parentName:"a"},"layer"))," Resolver Map Middleware functions to add wrappers. In other cases it might be useful for a custom Resolver Map Middleware to have an array of wrappers passed in as an option and apply them to a Resolver function using ",Object(i.mdx)("inlineCode",{parentName:"p"},"applyWrappers"),"."))}c.isMDXComponent=!0}}]);