(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{129:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return d})),n.d(t,"MDXProvider",(function(){return l})),n.d(t,"mdx",(function(){return h})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return p}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){return function(t){var n=m(t.components);return r.a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=m(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=m(n),p=a,l=d["".concat(i,".").concat(p)]||d[p]||g[p]||o;return n?r.a.createElement(l,s(s({ref:t},c),{},{components:n})):r.a.createElement(l,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(7),o=(n(0),n(129)),i={id:"managing-ids",title:"Managing IDs"},c={unversionedId:"paper/guides/managing-ids",id:"paper/guides/managing-ids",isDocsHomePage:!1,title:"Managing IDs",description:"IDs that exist as scalars on a GraphQL Schema are considered part of the data of a Document. GraphQL Paper doesn't use them for tracking uniqueness although it does have ways of helping ensure that data for ID fields are kept unique and also help in generating ID values.",source:"@site/docs/paper/guides/managing-ids.md",slug:"/paper/guides/managing-ids",permalink:"/docs/paper/guides/managing-ids",version:"current",sidebar:"docs",previous:{title:"Using GraphQL Paper with GraphQL",permalink:"/docs/paper/guides/with-graphql"},next:{title:"Using Paper with graphql-mocks",permalink:"/docs/guides/paper"}},s=[{value:"Automatically Generating IDs",id:"automatically-generating-ids",children:[{value:"Using a Custom Hook",id:"using-a-custom-hook",children:[]},{value:"Using a Custom Operation",id:"using-a-custom-operation",children:[]}]},{value:"Validating Unique IDs",id:"validating-unique-ids",children:[]}],u={rightToc:s};function d(e){var t=e.components,n=Object(r.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(a.default)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,"IDs that exist as scalars on a GraphQL Schema are considered part of the data of a ",Object(o.mdx)("inlineCode",{parentName:"p"},"Document"),". GraphQL Paper doesn't use them for tracking uniqueness although it does have ways of helping ensure that data for ID fields are kept unique and also help in generating ID values."),Object(o.mdx)("h2",{id:"automatically-generating-ids"},"Automatically Generating IDs"),Object(o.mdx)("p",null,"It can be helpful to have an automatically generated ID that reflects the ID format used by the GraphQL API being mocked."),Object(o.mdx)("h3",{id:"using-a-custom-hook"},"Using a Custom Hook"),Object(o.mdx)("p",null,"This can be done by using an ",Object(o.mdx)("inlineCode",{parentName:"p"},"afterTransaction")," hook function to ensure that any IDs that are missing are added automatically. ",Object(o.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/paper/hooks"}),"Learn more about creating custom hooks"),"."),Object(o.mdx)("p",null,"Assuming the GraphQL Paper document has an id field:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-graphql"}),"type SomeType {\n  id: ID!\n}\n")),Object(o.mdx)("h4",{id:"using-auto-incrementing-ids"},"Using auto-incrementing IDs"),Object(o.mdx)("p",null,"For most testing and development cases this should run fast enough, and only after each transaction. In the case this is too slow a custom operation could be created (see below)."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"function autoIncrementIdHook({ getStore }) {\n  const store = getStore();\n  Object.entries(store).forEach(([type, documents]) => {\n    // find the current maximum id for the current type\n    let maxId = documents.reduce((previous, document) => {\n      return Math.max(previous, Number(document.id));\n    }, 0);\n\n    // loop over each document that's missing an ID and\n    // add an incremented id\n    documents.forEach((document) => {\n      if (typeof document !== 'string') {\n        document.id = String(++maxId);\n      }\n    });\n  });\n}\n\npaper.hooks.afterTransaction.push(autoIncrementIdHook);\n")),Object(o.mdx)("h4",{id:"using-uuids"},"Using UUIDs"),Object(o.mdx)("p",null,"Using a custom ",Object(o.mdx)("inlineCode",{parentName:"p"},"uuid")," function is simpler to generate a missing ID for any document missing one after a transaction is complete."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"function addUuidHook({ getStore }) {\n  const store = getStore();\n  Object.entries(store).forEach(([type, documents]) => {\n    documents.forEach((document) => {\n      if (typeof document !== 'string') {\n        // using a uuid function from an npm package\n        document.id = uuid();\n      }\n    });\n  });\n};\n\npaper.hooks.afterTransaction.push(addUuidHook);\n")),Object(o.mdx)("h3",{id:"using-a-custom-operation"},"Using a Custom Operation"),Object(o.mdx)("p",null,"Another solution is to create a custom operation that wraps the provided ",Object(o.mdx)("inlineCode",{parentName:"p"},"create")," operation and keeps tracks of IDs. ",Object(o.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/paper/operations#creating-custom-operations"}),"Learn more about creating custom operations"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"import { create } from 'graphql-paper/operations';\n\n// track ids { [typename: string] : number }\nconst ids = {};\n\nconst customCreate = (context, typename, documentPartial) => {\n  const document = create(context, typename, documentPartial);\n\n  // increment or initialize\n  ids[typename] = (ids[typename] ?? 0) + 1;\n\n  // set incremented id\n  document.id = String(ids[typename]);\n\n  return document;\n};\n\nconst paper = new Paper(graphqlSchema, { operations: { customCreate } });\n")),Object(o.mdx)("h2",{id:"validating-unique-ids"},"Validating Unique IDs"),Object(o.mdx)("p",null,"By default GraphQL Paper is checking for unique IDs on a per-type basis with the ",Object(o.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/paper/validations#uniqueidfieldvalidator"}),Object(o.mdx)("inlineCode",{parentName:"a"},"uniqueIdFieldValidator")),". If the ID constraint is more complicated than per type then it's recommended to create a custom field validator. ",Object(o.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/paper/validations#creating-custom-field-validators"}),"Learn more about creating custom field validators"),"."))}d.isMDXComponent=!0}}]);