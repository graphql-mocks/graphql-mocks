(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{134:function(e,n,a){"use strict";a.r(n),a.d(n,"MDXContext",(function(){return c})),a.d(n,"MDXProvider",(function(){return f})),a.d(n,"mdx",(function(){return h})),a.d(n,"useMDXComponents",(function(){return p})),a.d(n,"withMDXComponents",(function(){return m}));var t=a(0),l=a.n(t);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function d(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=l.a.createContext({}),m=function(e){return function(n){var a=p(n.components);return l.a.createElement(e,r({},n,{components:a}))}},p=function(e){var n=l.a.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):d(d({},n),e)),a},f=function(e){var n=p(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},b=l.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,r=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),c=p(a),m=t,f=c["".concat(r,".").concat(m)]||c[m]||u[m]||i;return a?l.a.createElement(f,d(d({ref:n},o),{},{components:a})):l.a.createElement(f,d({ref:n},o))}));function h(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,r=new Array(i);r[0]=b;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:t,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},42:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return r})),a.d(n,"metadata",(function(){return o})),a.d(n,"rightToc",(function(){return d})),a.d(n,"default",(function(){return c}));var t=a(2),l=a(7),i=(a(0),a(134)),r={id:"fake-data",title:"Automatic Mocking with Fake Data using Falso"},o={unversionedId:"guides/fake-data",id:"guides/fake-data",isDocsHomePage:!1,title:"Automatic Mocking with Fake Data using Falso",description:"Falso is a popular javascript library that provides mocking functions for a variety of types of data across different domains. Using the Falso middleware with graphql-mocks makes it easy to get a fully mocked GraphQL API quickly. This is useful when some data should be mocked concretely, but the other fields can be generated.",source:"@site/docs/guides/fake-data.md",slug:"/guides/fake-data",permalink:"/docs/guides/fake-data",version:"current",sidebar:"docs",previous:{title:"Relay Pagination",permalink:"/docs/guides/relay-pagination"},next:{title:"Mirage JS",permalink:"/docs/guides/mirage-js"}},d=[{value:"API Documentation",id:"api-documentation",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Middleware options",id:"middleware-options",children:[{value:"Use a specific Falso function per field",id:"use-a-specific-falso-function-per-field",children:[]},{value:"Specifying possible values per field",id:"specifying-possible-values-per-field",children:[]},{value:"Specify chance of null values for nullable fields",id:"specify-chance-of-null-values-for-nullable-fields",children:[]},{value:"Specifying the range of items in a list",id:"specifying-the-range-of-items-in-a-list",children:[]},{value:"Replace existing resolver functions",id:"replace-existing-resolver-functions",children:[]},{value:"Highlight specific resolvers to include",id:"highlight-specific-resolvers-to-include",children:[]}]},{value:"Migrating from Faker.js to the Falso Middleware",id:"migrating-from-fakerjs-to-the-falso-middleware",children:[]}],s={rightToc:d};function c(e){var n=e.components,a=Object(l.default)(e,["components"]);return Object(i.mdx)("wrapper",Object(t.default)({},s,a,{components:n,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(t.default)({parentName:"p"},{href:"https://github.com/ngneat/falso"}),"Falso")," is a popular javascript library that provides mocking functions for a variety of types of data across different domains. Using the Falso middleware with graphql-mocks makes it easy to get a fully mocked GraphQL API quickly. This is useful when some data should be mocked concretely, but the other fields can be generated."),Object(i.mdx)("p",null,"This middleware was adapted from the Faker.js middleware (",Object(i.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/faker"),") which has since been deprecated. Since Faker.js is no longer maintained and Falso is a modern esmodule-first alternative Falso is being used instead. If previously using the Faker.js middleware see ",Object(i.mdx)("a",Object(t.default)({parentName:"p"},{href:"/docs/guides/fake-data#migrating-from-fakerjs-to-the-falso-middleware"}),"Migrating from the Faker Middleware")," section below."),Object(i.mdx)("p",null,"The middleware includes support for:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"choosing random GraphQL enum values"),Object(i.mdx)("li",{parentName:"ul"},"finding an appropriate Falso function for a field (ie: a ",Object(i.mdx)("inlineCode",{parentName:"li"},"firstName")," field would use the appropriate Falso function (",Object(i.mdx)("inlineCode",{parentName:"li"},"randFirstName"),"))"),Object(i.mdx)("li",{parentName:"ul"},"randomly including ",Object(i.mdx)("inlineCode",{parentName:"li"},"null")," values for nullable fields"),Object(i.mdx)("li",{parentName:"ul"},"specifying the Falso fn to be used for a field"),Object(i.mdx)("li",{parentName:"ul"},"specifying ranges of results used for lists"),Object(i.mdx)("li",{parentName:"ul"},"applying handling to specific resolvers using ",Object(i.mdx)("inlineCode",{parentName:"li"},"highlight"))),Object(i.mdx)("h3",{id:"api-documentation"},"API Documentation"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(t.default)({parentName:"li"},{href:"pathname:///api/falso/"}),"@graphql-mocks/falso"))),Object(i.mdx)("h2",{id:"installation"},"Installation"),Object(i.mdx)("p",null,"Install ",Object(i.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/falso")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"@ngneat/falso")," (and the main ",Object(i.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")," package if not already installed)."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-bash"}),"# npm\nnpm install --save-dev @ngneat/falso @graphql-mocks/falso graphql-mocks\n\n# yarn\nyarn add --dev @ngneat/falso @graphql-mocks/falso graphql-mocks\n")),Object(i.mdx)("h2",{id:"usage"},"Usage"),Object(i.mdx)("p",null,"Call ",Object(i.mdx)("inlineCode",{parentName:"p"},"falsoMiddleware")," and pass the result to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"middlewares")," option on the graphql-mocks ",Object(i.mdx)("inlineCode",{parentName:"p"},"GraphQLHandler")," and the entire resolver map will be mocked and is ready for querying. To apply resolvers only to specific parts of the GraphQL Schema use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option (",Object(i.mdx)("a",Object(t.default)({parentName:"p"},{href:"/docs/guides/fake-data#highlight-specific-resolvers-to-include"}),"details below"),")."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"import { GraphQLHandler } from 'graphql-mocks';\nimport { falsoMiddleware } from '@graphql-mocks/falso';\n\nconst handler = new GraphQLHandler({\n  middlewares: [falsoMiddleware()],\n  dependencies: {\n      graphqlSchema,\n  },\n});\n")),Object(i.mdx)("h2",{id:"middleware-options"},"Middleware options"),Object(i.mdx)("p",null,"For finer control of Falso the middleware can be configured with an options objects, see the following sections for more information on each option."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  replace: true,\n  highlight: (h) => h.include(['Person', 'name']);\n\n  fields: {\n    type: {\n      field: {\n        falsoFn: 'address.city',\n        possibleValues: [],\n      }\n    }\n  }\n})\n")),Object(i.mdx)("h3",{id:"use-a-specific-falso-function-per-field"},"Use a specific Falso function per field"),Object(i.mdx)("p",null,"Available functions are listed in the ",Object(i.mdx)("a",Object(t.default)({parentName:"p"},{href:"https://ngneat.github.io/falso/docs/getting-started"}),"Falso documentation"),"."),Object(i.mdx)("p",null,"If the ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option is also specified, make sure the highlight includes the specified type and field names so that the Falso function is included."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-graphql"}),"type Person {\n  favoriteCity: String!\n}\n")),Object(i.mdx)("p",null,"To specify the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Person.favoriteCity")," to use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"randCity")," falso function:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        falsoFn: 'randCity'\n      }\n    }\n  }\n})\n")),Object(i.mdx)("h3",{id:"specifying-possible-values-per-field"},"Specifying possible values per field"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-graphql"}),"type Person {\n  name: String!\n}\n")),Object(i.mdx)("p",null,"Specify the possible values for ",Object(i.mdx)("inlineCode",{parentName:"p"},"Person.name")," and one will be selected at random. If the ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option is also specified, make sure the highlight includes the specified type and field names that the ",Object(i.mdx)("inlineCode",{parentName:"p"},"possibleValues")," are specified for."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  fields: {\n    Person: {\n      name: {\n        possibleValues: ['Lisa', 'Marge', 'Maggie', 'Bart', 'Homer']\n      }\n    }\n  }\n})\n")),Object(i.mdx)("h3",{id:"specify-chance-of-null-values-for-nullable-fields"},"Specify chance of null values for nullable fields"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Default: ",Object(i.mdx)("inlineCode",{parentName:"li"},"0.1")," (10%)")),Object(i.mdx)("p",null,"The chance a nullable field is null, or that a list contains null, can be controlled by the ",Object(i.mdx)("inlineCode",{parentName:"p"},"nullPercentage")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"nullListPercentage")," options respectively. These can be specified globally for all fields and for a specific field."),Object(i.mdx)("p",null,"Globally, for all fields:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  nullPercentage: 0.5,\n  nullListPercentage: 0.7\n})\n")),Object(i.mdx)("p",null,"For a specific field, in this case the null probability for ",Object(i.mdx)("inlineCode",{parentName:"p"},"Person.name"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  fields: {\n    Person: {\n      name: {\n        nullPercentage: 0.5,\n        nullListPercentage: 0.7\n      }\n    }\n  }\n})\n")),Object(i.mdx)("h3",{id:"specifying-the-range-of-items-in-a-list"},"Specifying the range of items in a list"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Default: min: 0, max: 10")),Object(i.mdx)("p",null,"A list can be configured to have a min/max range."),Object(i.mdx)("p",null,"This can be specified globally:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  listCount: { min: 2, max: 20 }\n})\n")),Object(i.mdx)("p",null,"or for a specific field, in this case for the list of pets on ",Object(i.mdx)("inlineCode",{parentName:"p"},"Person.pets"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-graphql"}),"type Person {\n  pets: [Pet!]!\n}\n")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  fields: {\n    Person: {\n      pets: {\n        listCount: { min: 2, max: 20 }\n      }\n    }\n  }\n})\n")),Object(i.mdx)("h3",{id:"replace-existing-resolver-functions"},"Replace existing resolver functions"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Default: ",Object(i.mdx)("inlineCode",{parentName:"li"},"false"))),Object(i.mdx)("p",null,"If there is a need to replace existing resolver functions in the resolver map with falso functions then pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," for the ",Object(i.mdx)("inlineCode",{parentName:"p"},"replace")," option."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"falsoMiddleware({\n  replace: true\n})\n")),Object(i.mdx)("h3",{id:"highlight-specific-resolvers-to-include"},"Highlight specific resolvers to include"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Default: Resolver functions for the entire schema are included (and only replaces existing resolver based on the ",Object(i.mdx)("inlineCode",{parentName:"li"},"replace")," option which defaults to ",Object(i.mdx)("inlineCode",{parentName:"li"},"false"),").")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"highlight")," option controls which parts of Resolver Map are modified by the falso middleware. This is a common pattern for graphql-mocks middlewares, see the ",Object(i.mdx)("a",Object(t.default)({parentName:"p"},{href:"/docs/highlight/introducing-highlight#highlight-middleware-option"}),Object(i.mdx)("inlineCode",{parentName:"a"},"highlight")," option documentation")," for more information."),Object(i.mdx)("h2",{id:"migrating-from-fakerjs-to-the-falso-middleware"},"Migrating from Faker.js to the Falso Middleware"),Object(i.mdx)("p",null,"Faker.js is no longer maintained and Falso is a modern alternative. If faker and ",Object(i.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/faker")," were previously being used then migrating to ",Object(i.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/falso")," should be relatively quick."),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},"Remove ",Object(i.mdx)("inlineCode",{parentName:"li"},"faker")," and ",Object(i.mdx)("inlineCode",{parentName:"li"},"@graphql-mocks/faker"))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-shell"}),"#npm\nnpm remove faker @graphql-mocks/faker\n\n# yarn\nyarn remove faker @graphql-mocks/faker\n")),Object(i.mdx)("ol",{start:2},Object(i.mdx)("li",{parentName:"ol"},"Install Falso and ",Object(i.mdx)("inlineCode",{parentName:"li"},"@graphql-mocks/falso"))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-shell"}),"#npm\nnpm install --save-dev @ngneat/falso @graphql-mocks/falso\n\n# yarn\nyarn add --dev @ngneat/falso @graphql-mocks/falso\n")),Object(i.mdx)("ol",{start:3},Object(i.mdx)("li",{parentName:"ol"},"Update require/imports")),Object(i.mdx)("p",null,"ES Modules:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"// from\nimport { fakerMiddleware } from '@graphql-mocks/faker';\n\n// to\nimport { falsoMiddleware } from '@graphql-mocks/falso';\n")),Object(i.mdx)("p",null,"CommonJS Modules:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"// from\nconst { fakerMiddleware } = require('@graphql-mocks/faker');\n\n// to\nconst { falsoMiddleware } = require('@graphql-mocks/falso');\n")),Object(i.mdx)("ol",{start:4},Object(i.mdx)("li",{parentName:"ol"},"Update Middleware Options")),Object(i.mdx)("p",null,"Update ",Object(i.mdx)("inlineCode",{parentName:"p"},"fakerFn")," options to ",Object(i.mdx)("inlineCode",{parentName:"p"},"falsoFn")," and the corresponding function to the Falso equivalent"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(t.default)({parentName:"pre"},{className:"language-js"}),"// from\nfakerMiddleware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        fakerFn: 'address.city'\n      }\n    }\n  }\n}\n\n// to\nfalsoMiddleware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        // `fakerFn` -> `falsoFn`\n        // `address.city` from Faker -> `randCity` from Falso\n        falsoFn: 'randCity'\n      }\n    }\n  }\n}\n")))}c.isMDXComponent=!0}}]);