(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=s(n),m=a,d=b["".concat(i,".").concat(m)]||b[m]||u[m]||o;return n?r.a.createElement(d,c(c({ref:t},l),{},{components:n})):r.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},112:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(0),r=n.n(a);function o(e){return r.a.createElement(r.a.Fragment,null,r.a.createElement("strong",null,"Result: "),r.a.createElement("pre",{className:"graphql-result"},JSON.stringify(e.result,null,2)))}},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),o=(n(0),n(102)),i={rightToc:[]};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { Paper } from "graphql-paper";\n\nconst graphqlSchema = `\n  schema {\n    query: Query\n  }\n\n  type Query {\n    films: [Film!]!\n  }\n\n  type Film {\n    title: String!\n    year: Int!\n    actors: [Actor!]!\n  }\n\n  type Actor {\n    name: String!\n  }\n`;\n\nconst paper = new Paper(graphqlSchema);\n\nasync function run() {\n  const westSideStory = await paper.mutate(({ create }) => {\n    // Create a Film with several actors\n    const film = create("Film", {\n      title: "West Side Story",\n      year: 1961,\n      actors: [\n        { name: "Rita Moreno" },\n        { name: "Natalie Wood" },\n        { name: "George Chakiris" },\n        { name: "Richard Beymer" },\n      ],\n    });\n\n    // return film to be available outside the `mutate`\n    return film;\n  });\n\n  // pull results off the returned result\n  const { title, actors } = westSideStory;\n\n  // FIRST console.log\n  console.log(title);\n\n  // SECOND console.log\n  console.log(actors);\n\n  // can lookup results on the `Paper` instance, too\n  const richard = paper.data.Actor.find(\n    ({ name }) => name === "Richard Beymer"\n  );\n\n  // THIRD console.log\n  console.log(richard);\n}\n\n// kick off async function\nrun();\n')))}c.isMDXComponent=!0;var p={title:"West Side Story",actors:[{name:"Rita Moreno"},{name:"Natalie Wood"},{name:"George Chakiris"},{name:"Richard Beymer"}],richard:{name:"Richard Beymer"}},l=n(112),s={id:"introducing-paper",title:"Introducing GraphQL Paper"},b={unversionedId:"paper/introducing-paper",id:"paper/introducing-paper",isDocsHomePage:!1,title:"Introducing GraphQL Paper",description:"GraphQL Paper is a flexible in-memory store based on a provided GraphQL Schema.",source:"@site/docs/paper/introducing-paper.md",slug:"/paper/introducing-paper",permalink:"/docs/paper/introducing-paper",version:"current",sidebar:"docs",previous:{title:"Create Custom Highlighters",permalink:"/docs/highlight/creating-highlighters"},next:{title:"Installation",permalink:"/docs/paper/installation"}},u=[{value:"\u2728 Features",id:"-features",children:[]},{value:"API Reference",id:"api-reference",children:[]},{value:"Integration with <code>graphql-mocks</code>",id:"integration-with-graphql-mocks",children:[]},{value:"Documents and the Store",id:"documents-and-the-store",children:[]},{value:"A Quick Example",id:"a-quick-example",children:[]}],m={rightToc:u};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"GraphQL Paper is a flexible in-memory store based on a provided GraphQL Schema."),Object(o.b)("p",null,"In testing and development it is handy to have a store that reflects the current state of the world, handles connections between data, and updates via mutations. While GraphQL Paper integrates well with the rest of ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-mocks"),", it can also be used on its own."),Object(o.b)("h2",{id:"-features"},"\u2728 Features"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Built and based on GraphQL"),Object(o.b)("li",{parentName:"ul"},"Works in the Browser and Node JS"),Object(o.b)("li",{parentName:"ul"},"Works without ",Object(o.b)("inlineCode",{parentName:"li"},"graphql-mocks")," with support for the official default GraphQL resolvers"),Object(o.b)("li",{parentName:"ul"},"Written in TypeScript"),Object(o.b)("li",{parentName:"ul"},"Support and integration with ",Object(o.b)("inlineCode",{parentName:"li"},"graphql-mocks")),Object(o.b)("li",{parentName:"ul"},"Support for relationships and connections between types"),Object(o.b)("li",{parentName:"ul"},"Immutable"),Object(o.b)("li",{parentName:"ul"},"Accessible via native js APIs"),Object(o.b)("li",{parentName:"ul"},"Hooks (",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/paper/hooks"}),"docs"),")"),Object(o.b)("li",{parentName:"ul"},"Events (",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/paper/events"}),"docs"),")"),Object(o.b)("li",{parentName:"ul"},"Transaction Operations (",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/paper/operations"}),"docs"),")"),Object(o.b)("li",{parentName:"ul"},"Validations (",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/paper/validations"}),"docs"),")"),Object(o.b)("li",{parentName:"ul"},"API Query Imports")),Object(o.b)("p",null,"Coming Soon:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Time-travel debugging, store snapshots, and the ability to restore to existing store snapshots"),Object(o.b)("li",{parentName:"ul"},"Specialized ",Object(o.b)("inlineCode",{parentName:"li"},"factory")," operation with support for various states and scenarios, with functional factories currently working now (",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/paper/guides/factories"}),"docs"),")")),Object(o.b)("h2",{id:"api-reference"},"API Reference"),Object(o.b)("p",null,"There is the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/api/paper/"}),"API reference")," available for the ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-paper")," package."),Object(o.b)("h2",{id:"integration-with-graphql-mocks"},"Integration with ",Object(o.b)("inlineCode",{parentName:"h2"},"graphql-mocks")),Object(o.b)("p",null,"Check out the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/paper"}),"guide")," for using ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-mocks")," with GraphQL Paper."),Object(o.b)("h2",{id:"documents-and-the-store"},"Documents and the Store"),Object(o.b)("p",null,"With GraphQL Paper a ",Object(o.b)("inlineCode",{parentName:"p"},"Document")," is a POJO (plain-old javascript object) that represents a concrete GraphQL type, it is ",Object(o.b)("em",{parentName:"p"},"not")," an instance."),Object(o.b)("p",null,"For example an ",Object(o.b)("inlineCode",{parentName:"p"},"Actor")," GraphQL type:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Actor {\n  title: String!\n}\n")),Object(o.b)("p",null,"Could have a corresponding ",Object(o.b)("inlineCode",{parentName:"p"},"Document"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  title: 'Jurassic Park'\n}\n")),Object(o.b)("p",null,"Documents are stored in an array on the ",Object(o.b)("inlineCode",{parentName:"p"},"DocumentStore")," keyed by the GraphQL type. Based on the previous example a basic store containing our document could look like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  Actor: [{ title: 'Jurassic Park' }]\n}\n")),Object(o.b)("p",null,"This is a simplistic, but realistic example, of how data is stored. Learn how to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/paper/querying-data"}),"query")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/paper/mutating-data"}),"mutate")," the store (see below for a quick example of both). Check out the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/paper/technical-notes"}),"technical notes")," for a closer look at how everything works."),Object(o.b)("h2",{id:"a-quick-example"},"A Quick Example"),Object(o.b)("p",null,"Here's a small glimpse at what is possible with GraphQL Paper:"),Object(o.b)(c,{mdxType:"QuickExample"}),Object(o.b)("p",null,"First ",Object(o.b)("inlineCode",{parentName:"p"},"console.log")," for ",Object(o.b)("inlineCode",{parentName:"p"},"title")),Object(o.b)(l.a,{result:p.title,mdxType:"GraphQLResult"}),Object(o.b)("p",null,"Second ",Object(o.b)("inlineCode",{parentName:"p"},"console.log")," for ",Object(o.b)("inlineCode",{parentName:"p"},"actors")),Object(o.b)(l.a,{result:p.actors,mdxType:"GraphQLResult"}),Object(o.b)("p",null,"Third ",Object(o.b)("inlineCode",{parentName:"p"},"console.log")," for ",Object(o.b)("inlineCode",{parentName:"p"},"richard")),Object(o.b)(l.a,{result:p.richard,mdxType:"GraphQLResult"}))}d.isMDXComponent=!0}}]);