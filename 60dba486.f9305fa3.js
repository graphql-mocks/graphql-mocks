(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{104:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),s=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=s(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(t),d=r,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||o;return t?a.a.createElement(m,i(i({ref:n},p),{},{components:t})):a.a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=t[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(2),a=t(6),o=(t(0),t(104)),c={id:"nock",title:"Nock"},i={unversionedId:"network/nock",id:"network/nock",isDocsHomePage:!1,title:"Nock",description:"Nock is used for testing and mocking http requests in Node. Integrating graphql-mocks with Nock is easy with @graphql-mocks/nock.",source:"@site/docs/network/nock.md",slug:"/network/nock",permalink:"/docs/network/nock",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/network/introduction"},next:{title:"Using Paper with graphql-mocks",permalink:"/docs/guides/paper"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Resolver Context",id:"resolver-context",children:[]}]},{value:"API Documentation",id:"api-documentation",children:[]}],p={rightToc:l};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/nock/nock"}),"Nock")," is used for testing and mocking http requests in Node. Integrating ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-mocks")," with Nock is easy with ",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-mocks/nock"),"."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Install the ",Object(o.b)("inlineCode",{parentName:"p"},"nock")," and  ",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-mocks/network-nock")," npm packages."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"# npm\nnpm install --save-dev nock @graphql-mocks/network-nock\n\n# yarn\nyarn add --dev nock @graphql-mocks/network-nock\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"In any Nock ",Object(o.b)("inlineCode",{parentName:"p"},".reply()"),", use the ",Object(o.b)("inlineCode",{parentName:"p"},"nockHandler")," by calling it with a ",Object(o.b)("inlineCode",{parentName:"p"},"GraphQLHandler")," instance."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { GraphQLHandler } from 'graphql-mocks';\nimport { nockHandler } from '@graphql-mocks/network-nock';\nimport nock from 'nock';\n\nconst graphqlHandler = new GraphQLHandler({\n  dependencies: { graphqlSchema }\n};\n\nnock('http://graphql-api.com')\n  .post('/graphql')\n  .reply(nockHandler(graphqlHandler));\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"nockHandler")," function accepts an ",Object(o.b)("inlineCode",{parentName:"p"},"options")," object with ",Object(o.b)("inlineCode",{parentName:"p"},"checkGraphQLResult")," and ",Object(o.b)("inlineCode",{parentName:"p"},"checkRequest")," callbacks:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"nockHandler(graphqlHandler, {\n  checkRequest(request, requestBody) => void,\n  checkGraphQLResult: (result) => void\n})\n")),Object(o.b)("p",null,"These callbacks are useful for doing checks or additional assertions during testing"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"checkRequest")," callback is passed the incoming ",Object(o.b)("inlineCode",{parentName:"li"},"request")," and the ",Object(o.b)("inlineCode",{parentName:"li"},"requestBody")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"checkGraphQLResult")," callback is passed the result from the GraphQLHandler")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"nockHandler")," will pass along the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://graphql.org/learn/serving-over-http/#post-request"}),"Operation Name")," it receives from the request."),Object(o.b)("h3",{id:"resolver-context"},"Resolver Context"),Object(o.b)("p",null,"The Nock request is made available within the ",Object(o.b)("inlineCode",{parentName:"p"},"context")," arg for each GraphQL resolver:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function resolver(parent, args, context, info) {\n  // reference to the Nock request\n  const { request } = context;  \n}\n")),Object(o.b)("h2",{id:"api-documentation"},"API Documentation"),Object(o.b)("p",null,"See the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/api/network-nock/"}),"API Documentation")," for types and more details."))}s.isMDXComponent=!0}}]);