(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),s=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=s(n),u=r,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(2),a=n(6),o=(n(0),n(102)),i={id:"events",title:"Events"},c={unversionedId:"paper/events",id:"paper/events",isDocsHomePage:!1,title:"Events",description:"After a Mutate Transaction any relevant events will be dispatched followed by any events that have been queued. This is useful for responding to specific changes either from GraphQL Paper or custom events that might have been queued in a custom operation or by the Mutate Transaction itself using the queueEvent operation.",source:"@site/docs/paper/events.md",slug:"/paper/events",permalink:"/docs/paper/events",version:"current",sidebar:"docs",previous:{title:"Operations",permalink:"/docs/paper/operations"},next:{title:"Hooks",permalink:"/docs/paper/hooks"}},p=[{value:"Listening to Events",id:"listening-to-events",children:[{value:"Polyfilling <code>EventTarget</code> for Node.js",id:"polyfilling-eventtarget-for-nodejs",children:[]}]},{value:"Library Events",id:"library-events",children:[{value:"<code>create</code>",id:"create",children:[]},{value:"<code>remove</code>",id:"remove",children:[]},{value:"<code>modify</code>",id:"modify",children:[]}]},{value:"Dispatching Custom Events",id:"dispatching-custom-events",children:[]}],l={rightToc:p};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"After a ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," any relevant events will be dispatched followed by any events that have been queued. This is useful for responding to specific changes either from GraphQL Paper or custom events that might have been queued in a custom operation or by the ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," itself using the ",Object(o.b)("inlineCode",{parentName:"p"},"queueEvent")," operation."),Object(o.b)("h2",{id:"listening-to-events"},"Listening to Events"),Object(o.b)("p",null,"Events are available via the ",Object(o.b)("inlineCode",{parentName:"p"},"events")," property on the ",Object(o.b)("inlineCode",{parentName:"p"},"Paper")," instance which follow the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget"}),Object(o.b)("inlineCode",{parentName:"a"},"EventTarget")," pattern"),"."),Object(o.b)("p",null,"To listen for an event use ",Object(o.b)("inlineCode",{parentName:"p"},"events.addEventListener")," on a ",Object(o.b)("inlineCode",{parentName:"p"},"Paper")," instance, for example to listen for the ",Object(o.b)("inlineCode",{parentName:"p"},"create")," event."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"paper.events.addEventListener('create', (event) => {\n // do something with the `create` event\n});\n")),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"}),Object(o.b)("inlineCode",{parentName:"a"},"removeEventListener"))," is also available to stop listening for an event for a particular listener."),Object(o.b)("h3",{id:"polyfilling-eventtarget-for-nodejs"},"Polyfilling ",Object(o.b)("inlineCode",{parentName:"h3"},"EventTarget")," for Node.js"),Object(o.b)("p",null,"If using a Node.js version 14 and higher ",Object(o.b)("inlineCode",{parentName:"p"},"EventTarget")," should be supported, otherwise install the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.npmjs.com/package/event-target-polyfill"}),Object(o.b)("inlineCode",{parentName:"a"},"event-target-polyfill"))," package."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"# npm\nnpm install --save-dev event-target-polyfill\n\n# yarn\nyarn add --dev event-target-polyfill\n")),Object(o.b)("p",null,"Then include it early on in a top-level file before using GraphQL Paper"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// using common js\nrequire('event-target-polyfill');\n\n// using ES Module imports\nimport 'event-target-polyfill';\n")),Object(o.b)("h2",{id:"library-events"},"Library Events"),Object(o.b)("p",null,"The following events are provided by default from GraphQL Paper when a document is created, removed, or modified."),Object(o.b)("h3",{id:"create"},Object(o.b)("inlineCode",{parentName:"h3"},"create")),Object(o.b)("p",null,"When a document is created from a transaction a ",Object(o.b)("inlineCode",{parentName:"p"},"create")," event is dispatched with the following properties:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"{\n  // the current `DocumentStore`\n  store,\n\n  // the created `Document`\n  document\n}\n")),Object(o.b)("h3",{id:"remove"},Object(o.b)("inlineCode",{parentName:"h3"},"remove")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"{\n  // the current `DocumentStore`\n  store,\n\n  // the removed `Document`\n  document\n}\n")),Object(o.b)("h3",{id:"modify"},Object(o.b)("inlineCode",{parentName:"h3"},"modify")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"{\n  // the current `DocumentStore`\n  store,\n\n  // the modified `Document`\n  document,\n\n  // object with changes per property on the document\n  changes\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"changes")," property lists the changes per key, for example if ",Object(o.b)("inlineCode",{parentName:"p"},"changedPropertyOnDocument")," changed on the document the ",Object(o.b)("inlineCode",{parentName:"p"},"changes")," property would look:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"{\n  changedPropertyOnDocument: {\n    propertyName: 'changedPropertyOnDocument',\n    value: 'current value of changedPropertyOnDocument',\n    previousValue: 'previous value of changedPropertyOnDocument',\n  }\n}\n")),Object(o.b)("h2",{id:"dispatching-custom-events"},"Dispatching Custom Events"),Object(o.b)("p",null,"Any instance of ",Object(o.b)("inlineCode",{parentName:"p"},"Event")," that is added either via ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/paper/mutating-data#queueevent"}),Object(o.b)("inlineCode",{parentName:"a"},"queueEvent")," operation")," or in a custom operation and pushed to the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/paper/operations#operational-context"}),Object(o.b)("inlineCode",{parentName:"a"},"eventQueue")," array")," will be dispatched after the transaction is complete ",Object(o.b)("em",{parentName:"p"},"and")," after the library events have been dispatched first."))}s.isMDXComponent=!0}}]);