(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{135:function(e,n,a){"use strict";a.r(n),a.d(n,"MDXContext",(function(){return s})),a.d(n,"MDXProvider",(function(){return f})),a.d(n,"mdx",(function(){return u})),a.d(n,"useMDXComponents",(function(){return h})),a.d(n,"withMDXComponents",(function(){return d}));var t=a(0),c=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function m(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,c=function(e,n){if(null==e)return{};var a,t,c={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(c[a]=e[a]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var s=c.a.createContext({}),d=function(e){return function(n){var a=h(n.components);return c.a.createElement(e,l({},n,{components:a}))}},h=function(e){var n=c.a.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):m(m({},n),e)),a},f=function(e){var n=h(e.components);return c.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},g=c.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,r=i(e,["components","mdxType","originalType","parentName"]),s=h(a),d=t,f=s["".concat(l,".").concat(d)]||s[d]||p[d]||o;return a?c.a.createElement(f,m(m({ref:n},r),{},{components:a})):c.a.createElement(f,m({ref:n},r))}));function u(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,l=new Array(o);l[0]=g;var r={};for(var m in n)hasOwnProperty.call(n,m)&&(r[m]=n[m]);r.originalType=e,r.mdxType="string"==typeof e?e:t,l[1]=r;for(var i=2;i<o;i++)l[i]=a[i];return c.a.createElement.apply(null,l)}return c.a.createElement.apply(null,a)}g.displayName="MDXCreateElement"},30:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return l})),a.d(n,"metadata",(function(){return r})),a.d(n,"rightToc",(function(){return m})),a.d(n,"default",(function(){return s}));var t=a(2),c=a(7),o=(a(0),a(135)),l={},r={unversionedId:"cli/_readme",id:"cli/_readme",isDocsHomePage:!1,title:"_readme",description:"Commands",source:"@site/docs/cli/_readme.md",slug:"/cli/_readme",permalink:"/docs/cli/_readme",version:"current"},m=[{value:"<code>gqlmocks config generate</code>",id:"gqlmocks-config-generate",children:[]},{value:"<code>gqlmocks config info</code>",id:"gqlmocks-config-info",children:[]},{value:"<code>gqlmocks config validate</code>",id:"gqlmocks-config-validate",children:[]},{value:"<code>gqlmocks handler generate</code>",id:"gqlmocks-handler-generate",children:[]},{value:"<code>gqlmocks handler info</code>",id:"gqlmocks-handler-info",children:[]},{value:"<code>gqlmocks help [COMMAND]</code>",id:"gqlmocks-help-command",children:[]},{value:"<code>gqlmocks schema fetch</code>",id:"gqlmocks-schema-fetch",children:[]},{value:"<code>gqlmocks schema info</code>",id:"gqlmocks-schema-info",children:[]},{value:"<code>gqlmocks schema validate</code>",id:"gqlmocks-schema-validate",children:[]},{value:"<code>gqlmocks serve</code>",id:"gqlmocks-serve",children:[]},{value:"<code>gqlmocks version</code>",id:"gqlmocks-version",children:[]}],i={rightToc:m};function s(e){var n=e.components,a=Object(c.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(t.default)({},i,a,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"commands"},"Commands"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-config-generate"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks config generate"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-config-info"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks config info"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-config-validate"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks config validate"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-handler-generate"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks handler generate"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-handler-info"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks handler info"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-help-command"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks help [COMMAND]"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-schema-fetch"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks schema fetch"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-schema-info"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks schema info"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-schema-validate"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks schema validate"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-serve"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks serve"))),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("a",Object(t.default)({parentName:"li"},{href:"#gqlmocks-version"}),Object(o.mdx)("inlineCode",{parentName:"a"},"gqlmocks version")))),Object(o.mdx)("h2",{id:"gqlmocks-config-generate"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks config generate")),Object(o.mdx)("p",null,"generate or update a gqlmocks config file"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks config generate [--save-config <value>] [--format ts|js|json] [--schema.path <value>] [--schema.format\n    SDL|SDL_STRING] [--handler.path <value>] [--force]\n\nFLAGS\n  --force                   overwrite config if one exists\n  --format=<option>         specify the output format of the gqlmocks config\n                            <options: ts|js|json>\n  --handler.path=<value>\n  --save-config=<value>     path to write generated config to\n  --schema.format=<option>  <options: SDL|SDL_STRING>\n  --schema.path=<value>     path to GraphQL schema\n\nDESCRIPTION\n  generate or update a gqlmocks config file\n\nEXAMPLES\n  $ gqlmocks config generate\n\n  $ gqlmocks config generate --force\n\n  $ gqlmocks config generate --save-config "./path/to/gqlmocks.config.js"\n\n  $ gqlmocks config generate --schema.path "./graphql-mocks/schema.graphql" --schema.format "SDL_STRING"\n\n  $ gqlmocks config generate --handler.path "./graphql-mocks/handler.js"\n')),Object(o.mdx)("h2",{id:"gqlmocks-config-info"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks config info")),Object(o.mdx)("p",null,"display info about a gqlmocks config file"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks config info [-c <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n\nDESCRIPTION\n  display info about a gqlmocks config file\n\nEXAMPLES\n  $ gqlmocks config info\n\n  $ gqlmocks config info --config "../gqlmocks.config.js"\n')),Object(o.mdx)("h2",{id:"gqlmocks-config-validate"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks config validate")),Object(o.mdx)("p",null,"validate a gqlmocks config file"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks config validate [-c <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n\nDESCRIPTION\n  validate a gqlmocks config file\n\nEXAMPLES\n  $ gqlmocks config validate\n\n  $ gqlmocks config validate --config "path/to/gqlmocks.config.js"\n')),Object(o.mdx)("h2",{id:"gqlmocks-handler-generate"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks handler generate")),Object(o.mdx)("p",null,"generate a graphql handler"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks handler generate [-c <value>] [--save-handler <value>] [--force] [--format ts|js]\n\nFLAGS\n  -c, --config=<value>    path to config file\n  --force                 overwrite config if one already exists\n  --format=<option>       specify the file format of the created handler file\n                          <options: ts|js>\n  --save-handler=<value>  path to write generated config to\n\nDESCRIPTION\n  generate a graphql handler\n\nEXAMPLES\n  $ gqlconfig handler generate\n\n  $ gqlconfig handler generate --force\n\n  $ gqlconfig handler generate --save-handler "path/to/gqlmocks.config.js"\n\n  $ gqlconfig handler generate --format "ts"\n')),Object(o.mdx)("h2",{id:"gqlmocks-handler-info"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks handler info")),Object(o.mdx)("p",null,"display info about a graphql handler"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),"USAGE\n  $ gqlmocks handler info [-c <value>] [-h <value>]\n\nFLAGS\n  -c, --config=<value>   path to config file\n  -h, --handler=<value>  path to file with graphql handler\n\nDESCRIPTION\n  display info about a graphql handler\n\nEXAMPLES\n  $ gqlmocks handler info\n\n  $ gqlmocks handler info --handler path/to/handler.js\n")),Object(o.mdx)("h2",{id:"gqlmocks-help-command"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks help [COMMAND]")),Object(o.mdx)("p",null,"Display help for gqlmocks."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),"USAGE\n  $ gqlmocks help [COMMAND] [-n]\n\nARGUMENTS\n  COMMAND  Command to show help for.\n\nFLAGS\n  -n, --nested-commands  Include all nested commands in the output.\n\nDESCRIPTION\n  Display help for gqlmocks.\n")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"See code: ",Object(o.mdx)("a",Object(t.default)({parentName:"em"},{href:"https://github.com/oclif/plugin-help/blob/v5.1.11/src/commands/help.ts"}),"@oclif/plugin-help"))),Object(o.mdx)("h2",{id:"gqlmocks-schema-fetch"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks schema fetch")),Object(o.mdx)("p",null,"fetch and save a graphql schema locally"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks schema fetch [--header <value> ] [-c <value>] [--save-schema <value>] [--force] [--format\n    SDL|SDL_STRING] [--source <value>]\n\nFLAGS\n  -c, --config=<value>   path to config file\n  --force                overwrite a schema file if one already exists\n  --format=<option>      [default: SDL] format to save the schema as\n                         <options: SDL|SDL_STRING>\n  --header=<value>...    specify header(s) used in the request for remote schema specified by --schema flag\n  --save-schema=<value>  path of file to save schema to\n  --source=<value>       url of graphql api server or url of remote .graphql file\n\nDESCRIPTION\n  fetch and save a graphql schema locally\n\nEXAMPLES\n  $ gqlmocks schema fetch\n\n  $ gqlmocks schema fetch --force\n\n  $ gqlmocks schema fetch --source "http://remote.com/schema.graphql"\n\n  $ gqlmocks schema fetch --source "http://remote-gql-api.com"\n\n  $ gqlmocks schema fetch --source "http://remote-gql-api.com" --header "Authorization=Bearer abc123" --header "Header=Text"\n\n  $ gqlmocks schema fetch --format "SDL_STRING"\n')),Object(o.mdx)("h2",{id:"gqlmocks-schema-info"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks schema info")),Object(o.mdx)("p",null,"display info about a graphql schema"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks schema info [-s <value>] [-c <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n  -s, --schema=<value>  local path to graphql schema (relative or absolute), remote url (graphql schema file or graphql\n                        api endpoint)\n\nDESCRIPTION\n  display info about a graphql schema\n\nEXAMPLES\n  $ gqlmocks schema info\n\n  $ gqlmocks schema info --schema "path/to/schema.graphql"\n')),Object(o.mdx)("h2",{id:"gqlmocks-schema-validate"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks schema validate")),Object(o.mdx)("p",null,"validate a graphql schema file"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks schema validate [-c <value>] [-s <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n  -s, --schema=<value>  local path to graphql schema (relative or absolute), remote url (graphql schema file or graphql\n                        api endpoint)\n\nDESCRIPTION\n  validate a graphql schema file\n\nEXAMPLES\n  $ gqlmocks schema validate\n\n  $ gqlmocks schema validate --schema "path/to/schema.graphql"\n')),Object(o.mdx)("h2",{id:"gqlmocks-serve"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks serve")),Object(o.mdx)("p",null,"run a local graphql server"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),'USAGE\n  $ gqlmocks serve [-c <value>] [-h <value>] [--header <value> -s <value>] [-f] [-p <value>]\n\nFLAGS\n  -c, --config=<value>   path to config file\n  -f, --faker            use faker middlware for resolvers\n  -h, --handler=<value>  path to file with graphql handler\n  -p, --port=<value>     [default: 4444] Port to serve on\n  -s, --schema=<value>   local path to graphql schema (relative or absolute), remote url (graphql schema file or graphql\n                         api endpoint)\n  --header=<value>...    specify header(s) used in the request for remote schema specified by --schema flag\n\nDESCRIPTION\n  run a local graphql server\n\nEXAMPLES\n  $ gqlmocks serve --schema ../schema.graphql\n\n  $ gqlmocks serve --schema ../schema.graphql --handler ../handler.ts\n\n  $ gqlmocks serve --schema http://s3-bucket/schema.graphql --faker\n\n  $ gqlmocks serve --schema http://graphql-api/ --faker\n\n  $ gqlmocks serve --schema http://graphql-api/ --header "Authorization=Bearer token" --faker\n')),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"See code: ",Object(o.mdx)("a",Object(t.default)({parentName:"em"},{href:"https://github.com/graphql-mocks/graphql-mocks/blob/main/packages/cli/src/commands/serve.ts"}),"src/commands/serve.ts"))),Object(o.mdx)("h2",{id:"gqlmocks-version"},Object(o.mdx)("inlineCode",{parentName:"h2"},"gqlmocks version")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(t.default)({parentName:"pre"},{}),"USAGE\n  $ gqlmocks version\n")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"See code: ",Object(o.mdx)("a",Object(t.default)({parentName:"em"},{href:"https://github.com/oclif/plugin-version/blob/v1.0.4/src/commands/version.ts"}),"@oclif/plugin-version"))))}s.isMDXComponent=!0}}]);