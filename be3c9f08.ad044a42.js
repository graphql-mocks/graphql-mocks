(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{129:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return s})),n.d(t,"mdx",(function(){return O})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return u}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){return function(t){var n=p(t.components);return r.a.createElement(e,o({},t,{components:n}))}},p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},s=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},f=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),l=p(n),u=a,s=l["".concat(o,".").concat(u)]||l[u]||b[u]||c;return n?r.a.createElement(s,d(d({ref:t},i),{},{components:n})):r.a.createElement(s,d({ref:t},i))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=f;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var m=2;m<c;m++)o[m]=n[m];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(7),c=(n(0),n(129)),o={id:"querying-data",title:"Querying Data"},i={unversionedId:"paper/querying-data",id:"paper/querying-data",isDocsHomePage:!1,title:"Querying Data",description:"There are a few different ways to retrieve data from a Paper instance.",source:"@site/docs/paper/querying-data.md",slug:"/paper/querying-data",permalink:"/docs/paper/querying-data",version:"current",sidebar:"docs",previous:{title:"Installation",permalink:"/docs/paper/installation"},next:{title:"Mutating Data",permalink:"/docs/paper/mutating-data"}},d=[{value:"Querying Documents via the <code>data</code> Property",id:"querying-documents-via-the-data-property",children:[]},{value:"Exchange Documents for a Newer Copy",id:"exchange-documents-for-a-newer-copy",children:[]},{value:"Returning Documents from Mutation Transactions",id:"returning-documents-from-mutation-transactions",children:[]},{value:"Traversing Connections Between Documents",id:"traversing-connections-between-documents",children:[]}],m={rightToc:d};function l(e){var t=e.components,n=Object(r.default)(e,["components"]);return Object(c.mdx)("wrapper",Object(a.default)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)("p",null,"There are a few different ways to retrieve data from a ",Object(c.mdx)("inlineCode",{parentName:"p"},"Paper")," instance."),Object(c.mdx)("ul",null,Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(a.default)({parentName:"li"},{href:"#querying-documents-via-the-data-property"}),"Access the current ",Object(c.mdx)("inlineCode",{parentName:"a"},"DocumentStore")," via the ",Object(c.mdx)("inlineCode",{parentName:"a"},"data")," property")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(a.default)({parentName:"li"},{href:"#exchange-documents-for-a-newer-copy"}),"Exchange a previous document for a newer copy")),Object(c.mdx)("li",{parentName:"ul"},Object(c.mdx)("a",Object(a.default)({parentName:"li"},{href:"#exchange-documents-for-a-newer-copy"}),"Return documents from within a ",Object(c.mdx)("inlineCode",{parentName:"a"},"mutate")," transaction"))),Object(c.mdx)("p",null,Object(c.mdx)("strong",{parentName:"p"},"Note:"),"\nIt is important to remember that a document retrieved from the store is considered stale-on-arrival and cannot be modified. It does not represent an instance but instead a stale copy, or snapshot, of the document at the time of retrieval. For an updated version of the document it needs to be exchanged for an updated copy (",Object(c.mdx)("a",Object(a.default)({parentName:"p"},{href:"#exchange-documents-for-a-newer-copy"}),"see below"),")"),Object(c.mdx)("h2",{id:"querying-documents-via-the-data-property"},"Querying Documents via the ",Object(c.mdx)("inlineCode",{parentName:"h2"},"data")," Property"),Object(c.mdx)("p",null,"A frozen read-only copy of the store is available via the ",Object(c.mdx)("inlineCode",{parentName:"p"},"data")," property on the ",Object(c.mdx)("inlineCode",{parentName:"p"},"Paper")," instance."),Object(c.mdx)("p",null,"The shape of a store is:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"{\n  [typeName]: Document[]\n}\n")),Object(c.mdx)("p",null,"A GraphQL Schema with these two types:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-graphql"}),"type Actor {\n  name: String!\n}\n\ntype Film {\n  title: String!\n}\n")),Object(c.mdx)("p",null,"Could have a store like:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"{\n  Film: [\n    { title: 'Jurassic Park' },\n    { title: 'Godzilla' }\n  ],\n  Actor: [\n    { name: 'Jeff Goldblum' },\n    { name: 'Elizabeth Olsen' }\n  ]\n}\n")),Object(c.mdx)("p",null,"Since the data is accessed by type as a regular array the usual array methods can be used for accessing the data, and Documents in the array can be treated as POJOs."),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"// returns the document { title: 'Jurassic Park' }\npaper.data.Film[0];\n")),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"// returns the document { title: 'Godzilla' }\npaper.data.Film.find(({title}) => title === 'Godzilla');\n")),Object(c.mdx)("h2",{id:"exchange-documents-for-a-newer-copy"},"Exchange Documents for a Newer Copy"),Object(c.mdx)("p",null,"Since documents are immutable snapshots they need to be exchanged for updated copies. This can be done by using the ",Object(c.mdx)("inlineCode",{parentName:"p"},"find")," method on a ",Object(c.mdx)("inlineCode",{parentName:"p"},"Paper")," instance which will take the existing document to be exchanged for the latest copy."),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"// with a reference to an existing document exists from previously being fetched\nfilm;\n\n// return the latest copy of that document\nconst latestFilm = paper.find(film);\n")),Object(c.mdx)("h2",{id:"returning-documents-from-mutation-transactions"},"Returning Documents from Mutation Transactions"),Object(c.mdx)("p",null,"It's often useful to be able to have immediate access to a ",Object(c.mdx)("inlineCode",{parentName:"p"},"Document")," that has just been created/updated in a mutation transaction. This can be done by returning the Document, an array of Documents or an object of documents."),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const macAndMe = await paper.mutate(({ create }) => {\n  const film = create('Film', { title: 'Mac and Me' });\n  return film;\n});\n")),Object(c.mdx)("p",null,"The ",Object(c.mdx)("inlineCode",{parentName:"p"},"film")," variable representing the newly created document is returned and available outside via the ",Object(c.mdx)("inlineCode",{parentName:"p"},"macAndMe"),"."),Object(c.mdx)("p",null,"Similar with returning an object that can be destructured:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const { macAndme, spaceJam } = await paper.mutate(({ create }) => {\n  const macAndMe = create('Film', { title: 'Mac and Me' });\n  const spaceJam = create('Film', { title: 'Space Jam' });\n\n  return { macAndMe, spaceJam };\n});\n")),Object(c.mdx)("p",null,"Or from an Array:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const [macAndme, spaceJam] = await paper.mutate(({ create }) => {\n  const filmOne = create('Film', { title: 'Mac and Me' });\n  const filmTwo = create('Film', { title: 'Space Jam' });\n\n  return [filmOne, filmTwo];\n});\n")),Object(c.mdx)("h2",{id:"traversing-connections-between-documents"},"Traversing Connections Between Documents"),Object(c.mdx)("p",null,"GraphQL Paper has support for connections between types as defined by the GraphQL Schema. If it's a list of types or a singular type it can be handled by GraphQL Paper. Accessing connections on a document do not have any special API and are accessible like any other field, as a property on the document."),Object(c.mdx)("p",null,"With a schema where a ",Object(c.mdx)("inlineCode",{parentName:"p"},"Film")," can have multiple actors:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-graphql"}),"type Actor {\n  name: String!\n}\n\ntype Film {\n  title: String!\n  actors: [Actor!]!\n}\n")),Object(c.mdx)("p",null,"A film's actors could be accessed directly:"),Object(c.mdx)("pre",null,Object(c.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"const film = paper.data.Film[0];\n\n// returns any actors connected to the Film document\nfilm.actors;\n")),Object(c.mdx)("p",null,"Connections between documents are created during a mutation and are covered in ",Object(c.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/paper/mutating-data"}),Object(c.mdx)("em",{parentName:"a"},"Mutating Data")),"."))}l.isMDXComponent=!0}}]);