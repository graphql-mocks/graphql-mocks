(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{133:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return s})),t.d(n,"MDXProvider",(function(){return u})),t.d(n,"mdx",(function(){return b})),t.d(n,"useMDXComponents",(function(){return m})),t.d(n,"withMDXComponents",(function(){return p}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){return function(n){var t=m(n.components);return i.a.createElement(e,l({},n,{components:t}))}},m=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=m(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},h=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),s=m(t),p=a,u=s["".concat(l,".").concat(p)]||s[p]||f[p]||r;return t?i.a.createElement(u,c(c({ref:n},o),{},{components:t})):i.a.createElement(u,c({ref:n},o))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=h;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=t[d];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},70:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(2),i=t(7),r=(t(0),t(133)),l={id:"faker",title:"Mocking with Faker.js"},o={unversionedId:"guides/faker",id:"guides/faker",isDocsHomePage:!1,title:"Mocking with Faker.js",description:"Faker is a popular javascript library that provides mocking functions for a variety of types of data across different domains. Using the faker middleware with graphql-mocks makes it easy to get a fully mocked GraphQL API quickly. This is useful when some data should be mocked concretely, but the other fields can be generated.",source:"@site/docs/guides/faker.md",slug:"/guides/faker",permalink:"/docs/guides/faker",version:"current",sidebar:"docs",previous:{title:"Relay Pagination",permalink:"/docs/guides/relay-pagination"},next:{title:"Mirage JS",permalink:"/docs/guides/mirage-js"}},c=[{value:"API Documentation",id:"api-documentation",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Middleware options",id:"middleware-options",children:[{value:"Use a specific faker function per field",id:"use-a-specific-faker-function-per-field",children:[]},{value:"Specifying possible values per field",id:"specifying-possible-values-per-field",children:[]},{value:"Specify chance of null values for nullable fields",id:"specify-chance-of-null-values-for-nullable-fields",children:[]},{value:"Specifying the range of items in a list",id:"specifying-the-range-of-items-in-a-list",children:[]},{value:"Replace existing resolver functions",id:"replace-existing-resolver-functions",children:[]},{value:"Highlight specific resolvers to include",id:"highlight-specific-resolvers-to-include",children:[]}]}],d={rightToc:c};function s(e){var n=e.components,t=Object(i.default)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.default)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Faker is a popular javascript library that provides mocking functions for a variety of types of data across different domains. Using the faker middleware with graphql-mocks makes it easy to get a fully mocked GraphQL API quickly. This is useful when some data should be mocked concretely, but the other fields can be generated."),Object(r.mdx)("p",null,"The middleware includes support for:"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"choosing random GraphQL enum values"),Object(r.mdx)("li",{parentName:"ul"},"finding an appropriate faker function for a field (ie: a ",Object(r.mdx)("inlineCode",{parentName:"li"},"firstName")," field would use the appropriate faker function)"),Object(r.mdx)("li",{parentName:"ul"},"randomly including ",Object(r.mdx)("inlineCode",{parentName:"li"},"null")," values for nullable fields"),Object(r.mdx)("li",{parentName:"ul"},"specifying the faker fn to be used for a field"),Object(r.mdx)("li",{parentName:"ul"},"specifying ranges of results used for lists"),Object(r.mdx)("li",{parentName:"ul"},"applying handling to specific resolvers using ",Object(r.mdx)("inlineCode",{parentName:"li"},"highlight"))),Object(r.mdx)("h3",{id:"api-documentation"},"API Documentation"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",Object(a.default)({parentName:"li"},{href:"pathname:///api/faker/"}),"@graphql-mocks/faker"))),Object(r.mdx)("h2",{id:"installation"},"Installation"),Object(r.mdx)("p",null,"Install ",Object(r.mdx)("inlineCode",{parentName:"p"},"@graphql-mocks/faker")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"faker")," (and the main ",Object(r.mdx)("inlineCode",{parentName:"p"},"graphql-mocks")," package if not already installed)."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-bash"}),"# npm\nnpm install --save-dev faker @graphql-mocks/faker graphql-mocks\n\n# yarn\nyarn add --dev miragejs faker @graphql-mocks/faker graphql-mocks\n")),Object(r.mdx)("h2",{id:"usage"},"Usage"),Object(r.mdx)("p",null,"Call ",Object(r.mdx)("inlineCode",{parentName:"p"},"fakerMiddleware")," and pass the result to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"middlewares")," option on the graphql-mocks ",Object(r.mdx)("inlineCode",{parentName:"p"},"GraphQLHandler")," and the entire resolver map will be mocked and is ready for querying. To apply resolvers only to specific parts of the GraphQL Schema use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"highlight")," option (",Object(r.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/guides/faker#highlight-specific-resolvers-to-include"}),"details below"),")."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"import { GraphQLHandler } from 'graphql-mocks';\nimport { fakerMiddleware } from '@graphql-mocks/faker';\n\nconst handler = new GraphQLHandler({\n  middlewares: [fakerMiddleware()],\n  dependencies: {\n      graphqlSchema,\n  },\n});\n")),Object(r.mdx)("h2",{id:"middleware-options"},"Middleware options"),Object(r.mdx)("p",null,"For finer control of faker the middlware can be configured with an options objects, see the following sections for more information on each option."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddleware({\n  replace: true,\n  highlight: (h) => h.include(['Person', 'name']);\n\n  fields: {\n    type: {\n      field: {\n        fakerFn: 'address.city',\n        possibleValues: [],\n      }\n    }\n  }\n})\n")),Object(r.mdx)("h3",{id:"use-a-specific-faker-function-per-field"},"Use a specific faker function per field"),Object(r.mdx)("p",null,"Faker functions are denoted by the API category and the API function separated by a ",Object(r.mdx)("inlineCode",{parentName:"p"},"."),". See the ",Object(r.mdx)("a",Object(a.default)({parentName:"p"},{href:"https://github.com/marak/Faker.js/#api-methods"}),"faker documentation")," for a list of options."),Object(r.mdx)("p",null,"If the ",Object(r.mdx)("inlineCode",{parentName:"p"},"highlight")," option is also specified, make sure the highlight includes the specified type and field names so that the faker function is included."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-graphql"}),"type Person {\n  favoriteCity: String!\n}\n")),Object(r.mdx)("p",null,"To specify the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Person.favoriteCity")," to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"address.city")," faker function:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        fakerFn: 'address.city'\n      }\n    }\n  }\n})\n")),Object(r.mdx)("h3",{id:"specifying-possible-values-per-field"},"Specifying possible values per field"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-graphql"}),"type Person {\n  name: String!\n}\n")),Object(r.mdx)("p",null,"Specify the possible values for ",Object(r.mdx)("inlineCode",{parentName:"p"},"Person.name")," and one will be selected at random. If the ",Object(r.mdx)("inlineCode",{parentName:"p"},"highlight")," option is also specified, make sure the highlight includes the specified type and field names that the ",Object(r.mdx)("inlineCode",{parentName:"p"},"possibleValues")," are specified for."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  fields: {\n    Person: {\n      name: {\n        possibleValues: ['Lisa', 'Marge', 'Maggie', 'Bart', 'Homer']\n      }\n    }\n  }\n})\n")),Object(r.mdx)("h3",{id:"specify-chance-of-null-values-for-nullable-fields"},"Specify chance of null values for nullable fields"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Default: ",Object(r.mdx)("inlineCode",{parentName:"li"},"0.1")," (10%)")),Object(r.mdx)("p",null,"The chance a nullable field is null, or that a list contains null, can be controlled by the ",Object(r.mdx)("inlineCode",{parentName:"p"},"nullPercentage")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"nullListPercentage")," options respectively. These can be specified globally for all fields and for a specific field."),Object(r.mdx)("p",null,"Globally, for all fields:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  nullPercentage: 0.5,\n  nullListPercentage: 0.7\n})\n")),Object(r.mdx)("p",null,"For a specific field, in this case the null probability for ",Object(r.mdx)("inlineCode",{parentName:"p"},"Person.name"),":"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  fields: {\n    Person: {\n      name: {\n        nullPercentage: 0.5,\n        nullListPercentage: 0.7\n      }\n    }\n  }\n})\n")),Object(r.mdx)("h3",{id:"specifying-the-range-of-items-in-a-list"},"Specifying the range of items in a list"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Default: min: 0, max: 10")),Object(r.mdx)("p",null,"A list can be configured to have a min/max range."),Object(r.mdx)("p",null,"This can be specified globally:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  listCount: { min: 2, max: 20 }\n})\n")),Object(r.mdx)("p",null,"or for a specific field, in this case for the list of pets on ",Object(r.mdx)("inlineCode",{parentName:"p"},"Person.pets"),":"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-graphql"}),"type Person {\n  pets: [Pet!]!\n}\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  fields: {\n    Person: {\n      pets: {\n        listCount: { min: 2, max: 20 }\n      }\n    }\n  }\n})\n")),Object(r.mdx)("h3",{id:"replace-existing-resolver-functions"},"Replace existing resolver functions"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Default: ",Object(r.mdx)("inlineCode",{parentName:"li"},"false"))),Object(r.mdx)("p",null,"If there is a need to replace existing resolver functions in the resolver map with faker functions then pass ",Object(r.mdx)("inlineCode",{parentName:"p"},"true")," for the ",Object(r.mdx)("inlineCode",{parentName:"p"},"replace")," option."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.default)({parentName:"pre"},{className:"language-js"}),"fakerMiddlware({\n  replace: true\n})\n")),Object(r.mdx)("h3",{id:"highlight-specific-resolvers-to-include"},"Highlight specific resolvers to include"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Default: Resolver functions for the entire schema are included (and only replaces existing resolver based on the ",Object(r.mdx)("inlineCode",{parentName:"li"},"replace")," option which defaults to ",Object(r.mdx)("inlineCode",{parentName:"li"},"false"),").")),Object(r.mdx)("p",null,"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"highlight")," option controls which parts of Resolver Map are modified by the faker middleware. This is a common pattern for graphql-mocks middlewares, see the ",Object(r.mdx)("a",Object(a.default)({parentName:"p"},{href:"/docs/highlight/introducing-highlight#highlight-middleware-option"}),Object(r.mdx)("inlineCode",{parentName:"a"},"highlight")," option documentation")," for more information."))}s.isMDXComponent=!0}}]);