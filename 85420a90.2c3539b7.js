(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{102:function(e,a,r){"use strict";r.d(a,"a",(function(){return d})),r.d(a,"b",(function(){return m}));var t=r(0),n=r.n(t);function i(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){i(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=n.a.createContext({}),p=function(e){var a=n.a.useContext(c),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},d=function(e){var a=p(e.components);return n.a.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.a.createElement(n.a.Fragment,{},a)}},b=n.a.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),b=t,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return r?n.a.createElement(m,l(l({ref:a},c),{},{components:r})):n.a.createElement(m,l({ref:a},c))}));function m(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=b;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},74:function(e,a,r){"use strict";r.r(a),r.d(a,"frontMatter",(function(){return o})),r.d(a,"metadata",(function(){return l})),r.d(a,"rightToc",(function(){return s})),r.d(a,"default",(function(){return p}));var t=r(2),n=r(6),i=(r(0),r(102)),o={id:"available-middlewares",title:"Available Middlewares"},l={unversionedId:"resolver-map/available-middlewares",id:"resolver-map/available-middlewares",isDocsHomePage:!1,title:"Available Middlewares",description:"There are already exists useful Resolver Map Middlewares, or functions that create them, to help get started for the GraphQL various mocking scenarios.",source:"@site/docs/resolver-map/available-middlewares.md",slug:"/resolver-map/available-middlewares",permalink:"/docs/resolver-map/available-middlewares",version:"current",sidebar:"docs",previous:{title:"Managing Resolvers with Middlewares",permalink:"/docs/resolver-map/managing-resolvers"},next:{title:"Creating Custom Middlewares",permalink:"/docs/resolver-map/creating-middlewares"}},s=[{value:"<code>embed</code>",id:"embed",children:[]},{value:"<code>layer</code>",id:"layer",children:[]},{value:"Mirage JS",id:"mirage-js",children:[]}],c={rightToc:s};function p(e){var a=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},c,r,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"There are already exists useful Resolver Map Middlewares, or functions that create them, to help get started for the GraphQL various mocking scenarios."),Object(i.b)("p",null,"Have a useful Resolver Map Middleware to share with the community? Feel free to open a PR to add it here. Learn how to ",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/resolver-map/creating-middlewares"}),"create your own custom ones"),", too."),Object(i.b)("h2",{id:"embed"},Object(i.b)("inlineCode",{parentName:"h2"},"embed")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Package: ",Object(i.b)("inlineCode",{parentName:"li"},"graphql-mocks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(t.a)({parentName:"li"},{href:"/docs/resolver-map/managing-resolvers#using-embed"}),"Documentation"))),Object(i.b)("p",null,"Manage the Resolver Map by using ",Object(i.b)("inlineCode",{parentName:"p"},"embed")," to create Resolver Map Middlewares that can lazily add Resolvers and/or Resolver Wrappers."),Object(i.b)("h2",{id:"layer"},Object(i.b)("inlineCode",{parentName:"h2"},"layer")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Package: ",Object(i.b)("inlineCode",{parentName:"li"},"graphql-mocks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(t.a)({parentName:"li"},{href:"/docs/resolver-map/managing-resolvers#using-layer"}),"Documentation"))),Object(i.b)("p",null,"Lazily add layering of Resolver Map Partials with ",Object(i.b)("inlineCode",{parentName:"p"},"layer")," and the Resolver Map Middleware it creates. It also supports using Resolver Wrappers in its application of partials."),Object(i.b)("h2",{id:"mirage-js"},"Mirage JS"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Package: ",Object(i.b)("inlineCode",{parentName:"li"},"@graphql-mocks/mirage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(t.a)({parentName:"li"},{href:"/docs/guides/mirage-js"}),"Documenation"))),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note:")," If starting new it's easier to use GraphQL Paper which works natively with GraphQL, including connections/relationships. GraphQL Paper solves the same use cases as Mirage but in a GraphQL-first way using the GraphQL Schema with more extensibility and features like events, custom validations, hooks. If migrating from an existing a Mirage setup then using the Mirage JS middleware is likely a good fit."),Object(i.b)("p",null,Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"https://miragejs.com/"}),"Mirage JS")," is a tool for mocking out REST APIs and includes a stateful ORM and DB layer. The ",Object(i.b)("inlineCode",{parentName:"p"},"@graphql-mocks/mirage")," provides a middleware that leverages the ORM and DB from Mirage JS to provide stateful GraphQL queries so that data can be persisted, mutated and reflect real-world scenarios. See the ",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/guides/mirage-js"}),"documentation")," for all details and plenty of examples."))}p.isMDXComponent=!0}}]);