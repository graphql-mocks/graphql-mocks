(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(104)),i={id:"technical-notes",title:"Technical Notes"},c={unversionedId:"paper/technical-notes",id:"paper/technical-notes",isDocsHomePage:!1,title:"Technical Notes",description:"Storage & Immutability",source:"@site/docs/paper/technical-notes.md",slug:"/paper/technical-notes",permalink:"/docs/paper/technical-notes",version:"current",sidebar:"docs",previous:{title:"Validations",permalink:"/docs/paper/validations"},next:{title:"Generating Data with Factories",permalink:"/docs/paper/guides/factories"}},s=[{value:"Storage &amp; Immutability",id:"storage--immutability",children:[]},{value:"Documents",id:"documents",children:[{value:"Document Key",id:"document-key",children:[]},{value:"Connections",id:"connections",children:[]},{value:"GraphQL Type Name",id:"graphql-type-name",children:[]}]},{value:"Transaction Lifecycle",id:"transaction-lifecycle",children:[]},{value:"Connection Lookup, Expansion and Collapsing",id:"connection-lookup-expansion-and-collapsing",children:[]},{value:"<code>nullDocument</code>",id:"nulldocument",children:[]},{value:"Performance",id:"performance",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"storage--immutability"},"Storage & Immutability"),Object(o.b)("p",null,"GraphQL Paper uses ",Object(o.b)("inlineCode",{parentName:"p"},"immer")," under the hood to be able to handle changes and optimize sharing references for unchanged portions in an object tree. ",Object(o.b)("inlineCode",{parentName:"p"},"Document"),"s and ",Object(o.b)("inlineCode",{parentName:"p"},"DocumentStore"),"s are considered stale-on-arrival which means they should not be directly edited. There are safeguards in place that try and prevent editing a document or store outside of a ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction"),". This immutability also allows versioning the ",Object(o.b)("inlineCode",{parentName:"p"},"DocumentStore")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Document"),"s. Comparing different versions of documents is also possible based on their Document Keys."),Object(o.b)("h2",{id:"documents"},"Documents"),Object(o.b)("p",null,"Documents have a few hidden symboled properties that assist with tracking some internal state:"),Object(o.b)("h3",{id:"document-key"},"Document Key"),Object(o.b)("p",null,"Document Keys are uniquely generated string at the time a document is created. It is an internal identifier or reference used by the library to be able to track and reference a document across versions. This leaves any ",Object(o.b)("inlineCode",{parentName:"p"},"ID"),' fields on a GraphQL type as data in "user land" although GraphQL Paper does provide a validator to check that ',Object(o.b)("inlineCode",{parentName:"p"},"ID"),"s on fields are unique within a type."),Object(o.b)("h3",{id:"connections"},"Connections"),Object(o.b)("p",null,"Connections for a document are stored as an array of document keys (strings) representing the documents they are connected to."),Object(o.b)("h3",{id:"graphql-type-name"},"GraphQL Type Name"),Object(o.b)("p",null,'Documents are "typed" by a GraphQL type. The type is registered when a document is created and should never change.'),Object(o.b)("h2",{id:"transaction-lifecycle"},"Transaction Lifecycle"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Call ",Object(o.b)("inlineCode",{parentName:"li"},"mutate")," with a ",Object(o.b)("em",{parentName:"li"},"Mutate Transaction")," callback"),Object(o.b)("li",{parentName:"ol"},"Any previous transactions are waited to finish, in order, before the provided the transaction can run"),Object(o.b)("li",{parentName:"ol"},"Expand connections so that properties references the appropriate connected documents"),Object(o.b)("li",{parentName:"ol"},"Run ",Object(o.b)("inlineCode",{parentName:"li"},"beforeTransaction")," hooks"),Object(o.b)("li",{parentName:"ol"},"Call the transaction callback using ",Object(o.b)("inlineCode",{parentName:"li"},"immer")),Object(o.b)("li",{parentName:"ol"},"Run ",Object(o.b)("inlineCode",{parentName:"li"},"afterTransaction")," hooks"),Object(o.b)("li",{parentName:"ol"},"Capture any returned documents as represented by their keys"),Object(o.b)("li",{parentName:"ol"},"Collapse connections so that references are stashed by their document key"),Object(o.b)("li",{parentName:"ol"},"Run validations on new version created by ",Object(o.b)("inlineCode",{parentName:"li"},"immer")),Object(o.b)("li",{parentName:"ol"},"Determine which events can be created by comparing new and old versions of the store"),Object(o.b)("li",{parentName:"ol"},"Dispatch store events and custom events"),Object(o.b)("li",{parentName:"ol"},"Set new version as the current"),Object(o.b)("li",{parentName:"ol"},"Push the new version on to the history"),Object(o.b)("li",{parentName:"ol"},"Return transaction captured keys as frozen Documents for the ",Object(o.b)("inlineCode",{parentName:"li"},"mutate")," call")),Object(o.b)("h2",{id:"connection-lookup-expansion-and-collapsing"},"Connection Lookup, Expansion and Collapsing"),Object(o.b)("p",null,"When accessing Documents outside of a ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," the documents are wrapped in a proxy to assist with lookups of connections and to prevent document properties from being mutated outside a ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction"),". The proxy also has a reference to the copy of the store when the document is retrieved ensuring that any connections looked up will also be ",Object(o.b)("em",{parentName:"p"},"frozen")," at the same point in time."),Object(o.b)("p",null,"Before a transaction can occur each document has its connections expanded from document properties by the array of document keys to references to the other documents. If the field supports a GraphQL List type then the documents are represented as an array of Documents."),Object(o.b)("p",null,"After a transaction any document properties that have references are collapsed into an internal array for connections, being stored as document keys."),Object(o.b)("h2",{id:"nulldocument"},Object(o.b)("inlineCode",{parentName:"h2"},"nullDocument")),Object(o.b)("p",null,"Since GraphQL has a concept of nullable lists, that is lists that contain null, and connections are represented by documents there is a special reserved ",Object(o.b)("inlineCode",{parentName:"p"},"nullDocument")," used in storing lists that contain null. This is a special case and not something that normally crops up during average usage and is kept relatively hidden in the library but would be important to consider when writing a custom validator that needs to check connections. During expansion of connections ",Object(o.b)("inlineCode",{parentName:"p"},"nullDocuments")," in lists are represented by ",Object(o.b)("inlineCode",{parentName:"p"},"null")," values and when collapsed the proxy ensures that any lists containing ",Object(o.b)("inlineCode",{parentName:"p"},"nullDocuments")," are represented by ",Object(o.b)("inlineCode",{parentName:"p"},"null")," also."),Object(o.b)("h2",{id:"performance"},"Performance"),Object(o.b)("p",null,'Because GraphQL Paper handles everything "in memory" as javascript data structures it should be relatively quick for most use cases. If there is a case where it is slow please open an issue on github. There are some low-hanging fruit but also a desire to avoid early over optimizations.'))}p.isMDXComponent=!0}}]);