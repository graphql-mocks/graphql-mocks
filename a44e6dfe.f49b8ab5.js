(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),l=b(n),m=a,O=l["".concat(i,".").concat(m)]||l[m]||u[m]||o;return n?r.a.createElement(O,c(c({ref:t},s),{},{components:n})):r.a.createElement(O,c({ref:t},s))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(104)),i={id:"operations",title:"Operations"},c={unversionedId:"paper/operations",id:"paper/operations",isDocsHomePage:!1,title:"Operations",description:"Operations are functions available within an Mutate Transaction callback with access to internal context including the current mutable version of the DocumentStore being operated on.",source:"@site/docs/paper/operations.md",slug:"/paper/operations",permalink:"/docs/paper/operations",version:"current",sidebar:"docs",previous:{title:"Mutating Data",permalink:"/docs/paper/mutating-data"},next:{title:"Events",permalink:"/docs/paper/events"}},p=[{value:"Base Operations",id:"base-operations",children:[]},{value:"Operational Context",id:"operational-context",children:[]},{value:"Creating Custom Operations",id:"creating-custom-operations",children:[]}],s={rightToc:p};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Operations are functions available within an ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," callback with access to internal context including the current ",Object(o.b)("strong",{parentName:"p"},"mutable")," version of the ",Object(o.b)("inlineCode",{parentName:"p"},"DocumentStore")," being operated on."),Object(o.b)("h2",{id:"base-operations"},"Base Operations"),Object(o.b)("p",null,"The ones that are provided by GraphQL Paper out-of-the-box are ",Object(o.b)("inlineCode",{parentName:"p"},"create"),", ",Object(o.b)("inlineCode",{parentName:"p"},"find"),", ",Object(o.b)("inlineCode",{parentName:"p"},"remove"),", ",Object(o.b)("inlineCode",{parentName:"p"},"clone"),", ",Object(o.b)("inlineCode",{parentName:"p"},"getStore"),", ",Object(o.b)("inlineCode",{parentName:"p"},"queueEvent"),". These are covered in ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/paper/mutating-data#transaction-operations"}),Object(o.b)("em",{parentName:"a"},"Mutating Data")),"."),Object(o.b)("h2",{id:"operational-context"},"Operational Context"),Object(o.b)("p",null,"What makes Operations different than regular functions is that the first argument is bound (via ",Object(o.b)("inlineCode",{parentName:"p"},".bind"),") at the beginning of every transaction, for each operation, with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"pathname:///api/paper/modules/types.html#OperationContext"}),Object(o.b)("inlineCode",{parentName:"a"},"Operation Context")),"."),Object(o.b)("p",null,"The shape of the Operation Context is:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{\n  store: DocumentStore\n  schema: GraphQLSchema\n  eventQueue: Event[]\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"store")," is the current ",Object(o.b)("strong",{parentName:"li"},"mutable")," version of the store available during the transaction"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"schema")," is an instance of ",Object(o.b)("inlineCode",{parentName:"li"},"GraphQLSchema")," based on the schema passed into ",Object(o.b)("inlineCode",{parentName:"li"},"Paper")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"eventQueue")," is an array of events that will be emitted at the end of the transaction")),Object(o.b)("h2",{id:"creating-custom-operations"},"Creating Custom Operations"),Object(o.b)("p",null,"Additional ",Object(o.b)("em",{parentName:"p"},"Operations")," can be added to be used within the ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," callback.\nThe first argument is reserved and ",Object(o.b)("em",{parentName:"p"},"must")," be the ",Object(o.b)("inlineCode",{parentName:"p"},"context")," object even if it's not used for the custom operation. What is provided by the ",Object(o.b)("inlineCode",{parentName:"p"},"OperationContext")," argument is ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#operational-context"}),"described above"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export const customOperation = (context, argOne, argTwo) => {\n  /* custom logic for your custom operation */\n};\n")),Object(o.b)("p",null,"If using typescript, import the ",Object(o.b)("inlineCode",{parentName:"p"},"OperationContext")," for the first argument of the function. Setting up your Operation this way should allow the types and autocomplete to work within the the ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," callback."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// customOperation.ts\nimport { OperationContext }  from 'graphql-paper/types';\n\nexport const customOperation = (context: OperationContext, argOne: string, argTwo: number) => {\n  /* custom logic for your custom operation */\n  return /* return anything useful as a result of the operation */;\n};\n")),Object(o.b)("p",null,"Operations can be added to the ",Object(o.b)("inlineCode",{parentName:"p"},"Paper")," constructor's second argument configuration object, on the ",Object(o.b)("inlineCode",{parentName:"p"},"operations")," key."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { customOperation } from './customOperation';\nimport { graphqlSchema } from './schema';\n\nconst operations = { custom: customOperation };\nconst paper = new Paper(graphqlSchema, { operations });\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { customOperation } from './customOperation';\nimport { graphqlSchema } from './schema';\n\nconst operations = { custom: customOperation };\nconst paper = new Paper(graphqlSchema, { operations });\n")),Object(o.b)("p",null,"The key provided in the ",Object(o.b)("inlineCode",{parentName:"p"},"OperationMap")," hash is what is made available by destructuring within the ",Object(o.b)("em",{parentName:"p"},"Mutate Transaction")," callback."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"paper.mutate(({ custom }) => {\n  const result = custom('argOne magic!', 42);\n});\n")))}b.isMDXComponent=!0}}]);