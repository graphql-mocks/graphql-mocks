(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{133:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return s})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return g})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),d=function(e){return function(t){var n=p(t.components);return a.a.createElement(e,c({},t,{components:n}))}},p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),s=p(n),d=r,u=s["".concat(c,".").concat(d)]||s[d]||h[d]||o;return n?a.a.createElement(u,l(l({ref:t},i),{},{components:n})):a.a.createElement(u,l({ref:t},i))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var m=2;m<o;m++)c[m]=n[m];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},419:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/cli-graphiql-a12763b5229e852fd78fe77e6085ef93.png"},45:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(2),a=n(7),o=(n(0),n(133)),c={id:"quick-mocking",title:"Quick Mocking with Serve"},i={unversionedId:"cli/quick-mocking",id:"cli/quick-mocking",isDocsHomePage:!1,title:"Quick Mocking with Serve",description:"Using the gqlmocks serve command is the fastest way to get mocking only a GraphQL Schema.",source:"@site/docs/cli/quick-mocking.md",slug:"/cli/quick-mocking",permalink:"/docs/cli/quick-mocking",version:"current",sidebar:"docs",previous:{title:"CLI Commands",permalink:"/docs/cli/commands"},next:{title:"gqlmocks Config File",permalink:"/docs/cli/gqlmocks-config"}},l=[{value:"Local Server",id:"local-server",children:[]},{value:"Local IDE",id:"local-ide",children:[]},{value:"Fast Mocking with Remote Schema and Faker",id:"fast-mocking-with-remote-schema-and-faker",children:[]},{value:"Using <code>serve</code> with a Local Handler or Config",id:"using-serve-with-a-local-handler-or-config",children:[]}],m={rightToc:l};function s(e){var t=e.components,c=Object(a.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(r.default)({},m,c,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,"Using the ",Object(o.mdx)("inlineCode",{parentName:"p"},"gqlmocks serve")," command is the fastest way to get mocking only a GraphQL Schema."),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"serve")," command provides:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Running server at ",Object(o.mdx)("inlineCode",{parentName:"li"},"localhost")),Object(o.mdx)("li",{parentName:"ul"},"A graphiql ide for browsing the schema "),Object(o.mdx)("li",{parentName:"ul"},"Automatic remote schema fetching with the ",Object(o.mdx)("inlineCode",{parentName:"li"},"--schema")," flag"),Object(o.mdx)("li",{parentName:"ul"},"Bundled faker middleware for automatic mocking")),Object(o.mdx)("p",null,"See the ",Object(o.mdx)("a",Object(r.default)({parentName:"p"},{href:"/docs/cli/commands"}),"gqlmocks command documentation")," for more information and available flags."),Object(o.mdx)("h2",{id:"local-server"},"Local Server"),Object(o.mdx)("p",null,"Having a mock GraphQL Server available at ",Object(o.mdx)("inlineCode",{parentName:"p"},"localhost")," is valuable for testing against other GraphQL tools and integrating with other locally running services."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{}),"npx gqlmocks serve --schema https://s3.aws/schema.graphql --faker\nFetching schema from https://s3.aws/schema.graphql... done\nStarting graphql api server on port 4444... done\n\n Local GraphQL API:  http://localhost:4444/graphql\n IDE client:         http://localhost:4444/client\n\nPress Ctrl+C to stop\n")),Object(o.mdx)("h2",{id:"local-ide"},"Local IDE"),Object(o.mdx)("p",null,"The provided the ",Object(o.mdx)("inlineCode",{parentName:"p"},"/client")," path available on the server provides a fully running GraphiQL IDE."),Object(o.mdx)("p",null,Object(o.mdx)("img",{alt:"Screenshot of GraphiQL IDE",src:n(419).default})),Object(o.mdx)("h2",{id:"fast-mocking-with-remote-schema-and-faker"},"Fast Mocking with Remote Schema and Faker"),Object(o.mdx)("p",null,"The fastest way to mocking a GraphQL API without any setup is to use the faker middleware and specifying a remote url to a GraphQL Schema file or remote GraphQL API. The faker middleware will handle "),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.default)({parentName:"pre"},{}),'# Fetching schema from a running GraphQL API server\nnpx gqlmocks serve --faker --schema "http://remote-api.com/graphql"\n\n# Fetching .graphql file from url\nnpx gqlmocks serve --faker --schema "http://s3.aws.com/schema.graphql"\n')),Object(o.mdx)("p",null,"Additional ",Object(o.mdx)("inlineCode",{parentName:"p"},"--header")," flags can be used to specify any headers required to fetch the remote schema."),Object(o.mdx)("h2",{id:"using-serve-with-a-local-handler-or-config"},"Using ",Object(o.mdx)("inlineCode",{parentName:"h2"},"serve")," with a Local Handler or Config"),Object(o.mdx)("p",null,"If a more refined mocking is setup locally the ",Object(o.mdx)("inlineCode",{parentName:"p"},"gqlmocks serve")," command will look for a local project config file to serve. Additionally a specific handler or config file can be served with the ",Object(o.mdx)("inlineCode",{parentName:"p"},"--handle")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"--config")," flags respectively."))}s.isMDXComponent=!0}}]);