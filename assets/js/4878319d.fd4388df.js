"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[9276],{48325:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var a=t(28427),r=t(84397),i=(t(2784),t(30876)),l=["components"],o={id:"creating-middlewares",title:"Creating Custom Middlewares"},p=void 0,s={unversionedId:"resolver-map/creating-middlewares",id:"resolver-map/creating-middlewares",title:"Creating Custom Middlewares",description:"Anatomy of a Resolver Map Middleware",source:"@site/docs/resolver-map/creating-middlewares.md",sourceDirName:"resolver-map",slug:"/resolver-map/creating-middlewares",permalink:"/docs/resolver-map/creating-middlewares",draft:!1,tags:[],version:"current",frontMatter:{id:"creating-middlewares",title:"Creating Custom Middlewares"},sidebar:"docs",previous:{title:"Available Middlewares",permalink:"/docs/resolver-map/available-middlewares"},next:{title:"Introducing Network Handlers",permalink:"/docs/network/introducing-network-handlers"}},d={},c=[{value:"Anatomy of a Resolver Map Middleware",id:"anatomy-of-a-resolver-map-middleware",level:2},{value:"Adding options to a Middleware",id:"adding-options-to-a-middleware",level:2},{value:"<code>highlight</code> option",id:"highlight-option",level:3},{value:"Handling External Dependencies",id:"handling-external-dependencies",level:2},{value:"Shared Dependencies",id:"shared-dependencies",level:3},{value:"Isolated Dependencies",id:"isolated-dependencies",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Useful Utilities",id:"useful-utilities",level:2},{value:"<code>setResolver</code>",id:"setresolver",level:3},{value:"<code>getResolver</code>",id:"getresolver",level:3},{value:"<code>applyWrappers</code>",id:"applywrappers",level:3}],h={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"anatomy-of-a-resolver-map-middleware"},"Anatomy of a Resolver Map Middleware"),(0,i.kt)("p",null,"Resovler Map Middlewares represent the lazy application of changes to a Resolver Map. A ",(0,i.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/types.html#ResolverMapMiddleware"},"Resolver Map Middleware")," receives a Resolver Map, along with some contextual options, and returns a Resolver Map. The Resolver Map returned does not need to be the same one that was passed in but it will represent the Resolver Map going forward."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"async (resolverMap, packOptions) => {\n  // make any modifications and return a resolver map\n  return resolverMap;\n}\n")),(0,i.kt)("p",null,"with ",(0,i.kt)("inlineCode",{parentName:"p"},"packOptions")," representing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  state: Object\n  dependencies: Object\n}\n")),(0,i.kt)("p",null,"Note: Only these properties should be relied on. Do not add additional properties, there is no guarantee they will be preserved."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"state")," \u2014 Useful for any storing any references that should be persisted for accessing from the outside, via the ",(0,i.kt)("a",{parentName:"li",href:"pathname:///api/graphql-mocks/classes/GraphQLHandler.html#state"},(0,i.kt)("inlineCode",{parentName:"a"},"state")," property")," on a ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLHandler")," instance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dependencies")," \u2014 Contains any external dependencies initially passed in when creating the ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphQLHandler"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"packOptions")," object is also available within Resolver Wrappers."),(0,i.kt)("h2",{id:"adding-options-to-a-middleware"},"Adding options to a Middleware"),(0,i.kt)("p",null,"The easiest way of adding options to a Resolver Map is to use a function factory that provides any additional options by its arguments which are in scope for the inner Resolver Map Middleware function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const middlewareFunction = (options) => {\n  // return a resolver map middleware with options in scope\n  return (resolverMap, packOptions) => {\n    // ... do something with the `options` reference\n    return resolverMap;\n  }\n}\n")),(0,i.kt)("p",null,"Then it can be used where needed, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [middlewareFunction(options)],\n});\n")),(0,i.kt)("h3",{id:"highlight-option"},(0,i.kt)("inlineCode",{parentName:"h3"},"highlight")," option"),(0,i.kt)("p",null,"For many Middlewares it is useful to provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option when a Middleware can operate on user-defined portions of the GraphQL Schema. The ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option uses the Highlight system and conforms to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CoercibleHighlight")," type."),(0,i.kt)("p",null,"By using ",(0,i.kt)("inlineCode",{parentName:"p"},"CoercibleHighlight")," it provides a flexible option by accepting:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"References, an array of ",(0,i.kt)("a",{parentName:"li",href:"/docs/highlight/introducing-highlight#references"},"References")),(0,i.kt)("li",{parentName:"ul"},"Highlight callback function ",(0,i.kt)("inlineCode",{parentName:"li"},"(h) => { return h.include(['Query', 'user']) }"),", a callback where the highlight instance is setup and expects a returned ",(0,i.kt)("inlineCode",{parentName:"li"},"Highlight")," instance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Highlight")," instance, provided directly by the consumers of the middleware")),(0,i.kt)("p",null,"These three options can be converted into a ",(0,i.kt)("inlineCode",{parentName:"p"},"Highlight")," instance with the ",(0,i.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/highlight.utils.html#coerceHighlight"},(0,i.kt)("inlineCode",{parentName:"a"},"coerceHighlight")," utility"),"."),(0,i.kt)("p",null,'If the default behavior is to "highlight the entire schema" for a the ',(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlightAllCallback")," can be used as the default value which will highlight everything in the schema."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { coerceHighlight } from 'graphql-mocks/highlight/utils';\n\nconst middleware = ({ highlight }) => {\n  return (resolverMap, packOptions) => {\n    const graphqlSchema = packOptions.dependencies?.graphqlSchema;\n\n    // ensures that a Highlight instance is provided based from\n    // either references, a highlight callback, or a highlight instance\n    const coercedHighlight = coerceHighlight(highlight);\n  }\n};\n")),(0,i.kt)("h2",{id:"handling-external-dependencies"},"Handling External Dependencies"),(0,i.kt)("p",null,"A dependency in this case is something external to the Resolver Map Middleware that can/must be provided for the Resolver Map Middleware. An example might be a reference to a global object, or an instance of"),(0,i.kt)("h3",{id:"shared-dependencies"},"Shared Dependencies"),(0,i.kt)("p",null,"If a dependency is considered shared amongst multiple Resolver Map Middlewares or Resolver Wrappers use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," the external dependencies, ",(0,i.kt)("inlineCode",{parentName:"p"},"packOptions.dependencies"),",  provided on the second argument of a Resolver Map Middleware."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = return (resolverMap, packOptions) => {\n  // pull `fooDependency` reference off packOptions.dependencies\n  const foo = packOptions.dependencies?.fooDependency\n\n  if (!foo) {\n    throw new Error('`foo` is a required dependency');\n  }\n}\n")),(0,i.kt)("h3",{id:"isolated-dependencies"},"Isolated Dependencies"),(0,i.kt)("p",null,"When a dependency is used only for a single instance of a middleware it can be provided as an ",(0,i.kt)("a",{parentName:"p",href:"/docs/resolver-map/creating-middlewares#adding-options-to-a-middleware"},"option in a factory function"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const middlewareFunction = ({ someDependency }) => {\n  return (resolverMap, packOptions) => {\n    // ... do something with the `someDependency` reference\n    return resolverMap;\n  }\n}\n")),(0,i.kt)("h2",{id:"complete-example"},"Complete Example"),(0,i.kt)("p",null,"To show a complete example where a highlight option, with a default ",(0,i.kt)("inlineCode",{parentName:"p"},"highlightAllCallback")," option, is used to iterate over the references and add a resolver for the reference."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { walk, coerceHighlight } from 'graphql-mocks/highlight/utils';\nimport { setResolver } from 'graphql-mocks/resolver-map';\nimport { highlightAllCallback } from 'graphql-mocks/resolver-map/utils';\n\nconst middleware(options) {\n  // will either be the given highlight option or fallback to highlighting all\n  const highlight = coerceHighlight(options?.highlight ?? highlightAllCallback);\n\n  return async (resolverMap, packOptions) => {\n    const graphqlSchema = packOptions.dependencies?.graphqlSchema;\n\n    // use references from highlight to iterate over all options\n    await walk(graphqlSchema, highlight.references, (reference) => {\n      setResolver(resolverMap, reference, () => 'resolver function!', { replace: true });\n    });\n\n    return resolverMap;\n  }\n}\n")),(0,i.kt)("h2",{id:"useful-utilities"},"Useful Utilities"),(0,i.kt)("p",null,"When operating on the landscape of a Resolver Map there are some useful utilities to consider using."),(0,i.kt)("h3",{id:"setresolver"},(0,i.kt)("inlineCode",{parentName:"h3"},"setResolver")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import { setResolver } from 'graphql-mocks/resolver-map';")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/resolverMap.html#setResolver"},"API Documentation")),(0,i.kt)("p",null,"Add a Resolver function to a Resolver Map at a given reference."),(0,i.kt)("h3",{id:"getresolver"},(0,i.kt)("inlineCode",{parentName:"h3"},"getResolver")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import { getResolver } from 'graphql-mocks/resolver-map';")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/resolverMap.html#getResolver"},"API Documentation")),(0,i.kt)("p",null,"Get a Resolver function from a Resolver Map for a given reference."),(0,i.kt)("h3",{id:"applywrappers"},(0,i.kt)("inlineCode",{parentName:"h3"},"applyWrappers")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import { applyWrappers } from 'graphql-mocks/resolver';")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/resolver.html#applyWrappers"},"API Documentation")),(0,i.kt)("p",null,"Generally, it's easiest to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/resolver-map/available-middlewares#embed"},(0,i.kt)("inlineCode",{parentName:"a"},"embed"))," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/resolver-map/available-middlewares#layer"},(0,i.kt)("inlineCode",{parentName:"a"},"layer"))," Resolver Map Middleware functions to add wrappers. In other cases it might be useful for a custom Resolver Map Middleware to have an array of wrappers passed in as an option and apply them to a Resolver function using ",(0,i.kt)("inlineCode",{parentName:"p"},"applyWrappers"),"."))}m.isMDXComponent=!0},30876:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=s(t),m=r,u=h["".concat(p,".").concat(m)]||h[m]||c[m]||i;return t?a.createElement(u,l(l({ref:n},d),{},{components:t})):a.createElement(u,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=h;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);