"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[7592],{9982:function(e,t,r){r.r(t),r.d(t,{assets:function(){return g},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var n=r(28427),i=r(84397),a=(r(2784),r(30876)),h=["components"],l={title:"Create Custom Highlighters"},o=void 0,s={unversionedId:"highlight/creating-highlighters",id:"highlight/creating-highlighters",title:"Create Custom Highlighters",description:"Highlighters return highlighted References, that is an array of either Type References or Field References, for a given schema. There are already a number of useful highlighters provided by graphql-mocks out-of-the-box.",source:"@site/docs/highlight/creating-highlighters.md",sourceDirName:"highlight",slug:"/highlight/creating-highlighters",permalink:"/docs/highlight/creating-highlighters",draft:!1,tags:[],version:"current",frontMatter:{title:"Create Custom Highlighters"},sidebar:"docs",previous:{title:"Available Highlighters",permalink:"/docs/highlight/available-highlighters"},next:{title:"Introducing GraphQL Paper",permalink:"/docs/paper/introducing-paper"}},g={},c=[{value:"Stateless Highlighters",id:"stateless-highlighters",level:2},{value:"Stateful Highlighters",id:"stateful-highlighters",level:2},{value:"Highlight All",id:"highlight-all",level:2}],p={toc:c};function u(e){var t=e.components,r=(0,i.Z)(e,h);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Highlighters return highlighted ",(0,a.kt)("a",{parentName:"p",href:"/docs/highlight/introducing-highlight#references"},"References"),", that is an array of either ",(0,a.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/highlight.types.html#TypeReference"},"Type References")," or ",(0,a.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/modules/highlight.types.html#FieldReference"},"Field References"),", for a given schema. There are already a number of useful highlighters provided by graphql-mocks out-of-the-box."),(0,a.kt)("p",null,"A highlighter must conform to the ",(0,a.kt)("a",{parentName:"p",href:"pathname:///api/graphql-mocks/interfaces/highlight.types.Highlighter.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Highlighter")," interface"),". This interface is simply a ",(0,a.kt)("inlineCode",{parentName:"p"},"mark")," function on an object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{\n  mark(schema: GraphQLSchema): Reference[]\n}\n")),(0,a.kt)("h2",{id:"stateless-highlighters"},"Stateless Highlighters"),(0,a.kt)("p",null,"The simplest highlighter to create is one that does not have any state, which can simply be a POJO that conforms to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Highlighter")," interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const customHighlighter = {\n  mark(schema) {\n    // return an array of highlighted References\n    return [];\n  }\n}\n")),(0,a.kt)("p",null,"If there are options to the highlighter consider using a function factory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"export const customHighlighter = (options) => {\n  // make use of `options` in scope\n  return {\n    mark(schema) {\n      // return an array of highlighted References\n      return [];\n    }\n  }\n}\n")),(0,a.kt)("h2",{id:"stateful-highlighters"},"Stateful Highlighters"),(0,a.kt)("p",null,"If a highlighter needs to hold on to state it's useful to create a class that implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"Highlighter")," interface, like many of the highlighters provided out-of-the-box, with additional state can be kept on class properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Highlighter } from 'graphql-mocks/highlight/types';\n\nclass CustomHighlighter implements Highlighter {\n  constructor(/* relevant options*/) {\n  }\n\n  // required `mark` method\n  mark(schema) {\n    // return an array of highlighted References\n    return [];\n  }\n}\n")),(0,a.kt)("p",null,"Generally, by design highlighters if there are options to a Highlighter for a constructor it's easier to provide a factory function to pass along and construct the instance. For example, continuing with the ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomHighlighter")," class above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"export const customHighlighter = (options) => new CustomHighlighter(options);\n")),(0,a.kt)("p",null,"While minimal it provides a more ergonomic API without have to ",(0,a.kt)("inlineCode",{parentName:"p"},"new")," each Highlighter for use."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"hi(graphqlSchema).include(\n  customHighlighter({ /* options */ })\n);\n")),(0,a.kt)("h2",{id:"highlight-all"},"Highlight All"),(0,a.kt)("p",null,'If a highlighter has the notion of "highlight all", by convention, it\'s useful to consider these these two cases:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"HIGHLIGHT_ALL")," constant as an option"),(0,a.kt)("li",{parentName:"ul"},"If possible, calling the highlighter without arguments, provides the highlight all case")))}u.isMDXComponent=!0},30876:function(e,t,r){r.d(t,{Zo:function(){return g},kt:function(){return u}});var n=r(2784);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):h(h({},t),e)),r},g=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=s(r),u=i,m=p["".concat(o,".").concat(u)]||p[u]||c[u]||a;return r?n.createElement(m,h(h({ref:t},g),{},{components:r})):n.createElement(m,h({ref:t},g))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,h=new Array(a);h[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,h[1]=l;for(var s=2;s<a;s++)h[s]=r[s];return n.createElement.apply(null,h)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"}}]);