"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[7685],{72522:function(e,n,a){a.r(n),a.d(n,{assets:function(){return g},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return m},metadata:function(){return h},toc:function(){return f}});var t=a(28427),o=a(84397),l=(a(2784),a(30876)),r=["components"],c={toc:[{value:"<code>gqlmocks config generate</code>",id:"gqlmocks-config-generate",level:2},{value:"<code>gqlmocks config info</code>",id:"gqlmocks-config-info",level:2},{value:"<code>gqlmocks config validate</code>",id:"gqlmocks-config-validate",level:2},{value:"<code>gqlmocks handler generate</code>",id:"gqlmocks-handler-generate",level:2},{value:"<code>gqlmocks handler info</code>",id:"gqlmocks-handler-info",level:2},{value:"<code>gqlmocks help [COMMAND]</code>",id:"gqlmocks-help-command",level:2},{value:"<code>gqlmocks schema fetch</code>",id:"gqlmocks-schema-fetch",level:2},{value:"<code>gqlmocks schema info</code>",id:"gqlmocks-schema-info",level:2},{value:"<code>gqlmocks schema validate</code>",id:"gqlmocks-schema-validate",level:2},{value:"<code>gqlmocks serve</code>",id:"gqlmocks-serve",level:2},{value:"<code>gqlmocks version</code>",id:"gqlmocks-version",level:2}]};function i(e){var n=e.components,a=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"commands"},"Commands"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-config-generate"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks config generate"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-config-info"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks config info"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-config-validate"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks config validate"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-handler-generate"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks handler generate"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-handler-info"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks handler info"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-help-command"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks help [COMMAND]"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-schema-fetch"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks schema fetch"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-schema-info"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks schema info"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-schema-validate"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks schema validate"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-serve"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks serve"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#gqlmocks-version"},(0,l.kt)("inlineCode",{parentName:"a"},"gqlmocks version")))),(0,l.kt)("h2",{id:"gqlmocks-config-generate"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks config generate")),(0,l.kt)("p",null,"generate or update a gqlmocks config file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks config generate [--save-config <value>] [--format ts|js|json] [--schema.path <value>] [--schema.format\n    SDL|SDL_STRING] [--handler.path <value>] [--force]\n\nFLAGS\n  --force                   overwrite config if one exists\n  --format=<option>         specify the output format of the gqlmocks config\n                            <options: ts|js|json>\n  --handler.path=<value>\n  --save-config=<value>     path to write generated config to\n  --schema.format=<option>  <options: SDL|SDL_STRING>\n  --schema.path=<value>     path to GraphQL schema\n\nDESCRIPTION\n  generate or update a gqlmocks config file\n\nEXAMPLES\n  $ gqlmocks config generate\n\n  $ gqlmocks config generate --force\n\n  $ gqlmocks config generate --save-config "./path/to/gqlmocks.config.js"\n\n  $ gqlmocks config generate --schema.path "./graphql-mocks/schema.graphql" --schema.format "SDL_STRING"\n\n  $ gqlmocks config generate --handler.path "./graphql-mocks/handler.js"\n')),(0,l.kt)("h2",{id:"gqlmocks-config-info"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks config info")),(0,l.kt)("p",null,"display info about a gqlmocks config file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks config info [-c <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n\nDESCRIPTION\n  display info about a gqlmocks config file\n\nEXAMPLES\n  $ gqlmocks config info\n\n  $ gqlmocks config info --config "../gqlmocks.config.js"\n')),(0,l.kt)("h2",{id:"gqlmocks-config-validate"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks config validate")),(0,l.kt)("p",null,"validate a gqlmocks config file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks config validate [-c <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n\nDESCRIPTION\n  validate a gqlmocks config file\n\nEXAMPLES\n  $ gqlmocks config validate\n\n  $ gqlmocks config validate --config "path/to/gqlmocks.config.js"\n')),(0,l.kt)("h2",{id:"gqlmocks-handler-generate"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks handler generate")),(0,l.kt)("p",null,"generate a graphql handler"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks handler generate [-c <value>] [--save-handler <value>] [--force] [--format ts|js]\n\nFLAGS\n  -c, --config=<value>    path to config file\n  --force                 overwrite config if one already exists\n  --format=<option>       specify the file format of the created handler file\n                          <options: ts|js>\n  --save-handler=<value>  path to write generated config to\n\nDESCRIPTION\n  generate a graphql handler\n\nEXAMPLES\n  $ gqlconfig handler generate\n\n  $ gqlconfig handler generate --force\n\n  $ gqlconfig handler generate --save-handler "path/to/gqlmocks.config.js"\n\n  $ gqlconfig handler generate --format "ts"\n')),(0,l.kt)("h2",{id:"gqlmocks-handler-info"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks handler info")),(0,l.kt)("p",null,"display info about a graphql handler"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"USAGE\n  $ gqlmocks handler info [-c <value>] [-h <value>]\n\nFLAGS\n  -c, --config=<value>   path to config file\n  -h, --handler=<value>  path to file with graphql handler\n\nDESCRIPTION\n  display info about a graphql handler\n\nEXAMPLES\n  $ gqlmocks handler info\n\n  $ gqlmocks handler info --handler path/to/handler.js\n")),(0,l.kt)("h2",{id:"gqlmocks-help-command"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks help [COMMAND]")),(0,l.kt)("p",null,"Display help for gqlmocks."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"USAGE\n  $ gqlmocks help [COMMAND] [-n]\n\nARGUMENTS\n  COMMAND  Command to show help for.\n\nFLAGS\n  -n, --nested-commands  Include all nested commands in the output.\n\nDESCRIPTION\n  Display help for gqlmocks.\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"See code: ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/oclif/plugin-help/blob/v5.1.11/src/commands/help.ts"},"@oclif/plugin-help"))),(0,l.kt)("h2",{id:"gqlmocks-schema-fetch"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks schema fetch")),(0,l.kt)("p",null,"fetch and save a graphql schema locally"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks schema fetch [--header <value> ] [-c <value>] [--save-schema <value>] [--force] [--format\n    SDL|SDL_STRING] [--source <value>]\n\nFLAGS\n  -c, --config=<value>   path to config file\n  --force                overwrite a schema file if one already exists\n  --format=<option>      [default: SDL] format to save the schema as\n                         <options: SDL|SDL_STRING>\n  --header=<value>...    specify header(s) used in the request for remote schema specified by --schema flag\n  --save-schema=<value>  path of file to save schema to\n  --source=<value>       url of graphql api server or url of remote .graphql file\n\nDESCRIPTION\n  fetch and save a graphql schema locally\n\nEXAMPLES\n  $ gqlmocks schema fetch\n\n  $ gqlmocks schema fetch --force\n\n  $ gqlmocks schema fetch --source "http://remote.com/schema.graphql"\n\n  $ gqlmocks schema fetch --source "http://remote-gql-api.com"\n\n  $ gqlmocks schema fetch --source "http://remote-gql-api.com" --header "Authorization=Bearer abc123" --header "Header=Text"\n\n  $ gqlmocks schema fetch --format "SDL_STRING"\n')),(0,l.kt)("h2",{id:"gqlmocks-schema-info"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks schema info")),(0,l.kt)("p",null,"display info about a graphql schema"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks schema info [-s <value>] [-c <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n  -s, --schema=<value>  local path to graphql schema (relative or absolute), remote url (graphql schema file or graphql\n                        api endpoint)\n\nDESCRIPTION\n  display info about a graphql schema\n\nEXAMPLES\n  $ gqlmocks schema info\n\n  $ gqlmocks schema info --schema "path/to/schema.graphql"\n')),(0,l.kt)("h2",{id:"gqlmocks-schema-validate"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks schema validate")),(0,l.kt)("p",null,"validate a graphql schema file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks schema validate [-c <value>] [-s <value>]\n\nFLAGS\n  -c, --config=<value>  path to config file\n  -s, --schema=<value>  local path to graphql schema (relative or absolute), remote url (graphql schema file or graphql\n                        api endpoint)\n\nDESCRIPTION\n  validate a graphql schema file\n\nEXAMPLES\n  $ gqlmocks schema validate\n\n  $ gqlmocks schema validate --schema "path/to/schema.graphql"\n')),(0,l.kt)("h2",{id:"gqlmocks-serve"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks serve")),(0,l.kt)("p",null,"run a local graphql server"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'USAGE\n  $ gqlmocks serve [-c <value>] [-h <value>] [--header <value> -s <value>] [-f] [-p <value>]\n\nFLAGS\n  -c, --config=<value>   path to config file\n  -f, --faker            use faker middlware for resolvers\n  -h, --handler=<value>  path to file with graphql handler\n  -p, --port=<value>     [default: 4444] Port to serve on\n  -s, --schema=<value>   local path to graphql schema (relative or absolute), remote url (graphql schema file or graphql\n                         api endpoint)\n  --header=<value>...    specify header(s) used in the request for remote schema specified by --schema flag\n\nDESCRIPTION\n  run a local graphql server\n\nEXAMPLES\n  $ gqlmocks serve --schema ../schema.graphql\n\n  $ gqlmocks serve --schema ../schema.graphql --handler ../handler.ts\n\n  $ gqlmocks serve --schema http://s3-bucket/schema.graphql --faker\n\n  $ gqlmocks serve --schema http://graphql-api/ --faker\n\n  $ gqlmocks serve --schema http://graphql-api/ --header "Authorization=Bearer token" --faker\n')),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"See code: ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/graphql-mocks/graphql-mocks/blob/main/packages/cli/src/commands/serve.ts"},"src/commands/serve.ts"))),(0,l.kt)("h2",{id:"gqlmocks-version"},(0,l.kt)("inlineCode",{parentName:"h2"},"gqlmocks version")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"USAGE\n  $ gqlmocks version\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"See code: ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/oclif/plugin-version/blob/v1.0.4/src/commands/version.ts"},"@oclif/plugin-version"))))}i.isMDXComponent=!0;var s=["components"],m={id:"commands",title:"CLI Commands"},p=void 0,h={unversionedId:"cli/commands",id:"cli/commands",title:"CLI Commands",description:"The CLI is packaged as a npm package. The easiest way to use it is via npx and prefixing the cli with npx:",source:"@site/docs/cli/commands.md",sourceDirName:"cli",slug:"/cli/commands",permalink:"/docs/cli/commands",draft:!1,tags:[],version:"current",frontMatter:{id:"commands",title:"CLI Commands"},sidebar:"docs",previous:{title:"Introducing the gqlmocks CLI",permalink:"/docs/cli/introducing-gqlmocks"},next:{title:"Quick Mocking with Serve",permalink:"/docs/cli/quick-mocking"}},g={},f=[],k={toc:f};function d(e){var n=e.components,a=(0,o.Z)(e,s);return(0,l.kt)("wrapper",(0,t.Z)({},k,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The CLI is packaged as a npm package. The easiest way to use it is via ",(0,l.kt)("inlineCode",{parentName:"p"},"npx")," and prefixing the cli with ",(0,l.kt)("inlineCode",{parentName:"p"},"npx"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"npx gqlmocks --help\n")),(0,l.kt)(i,{mdxType:"Md"}))}d.isMDXComponent=!0},30876:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return g}});var t=a(2784);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=t.createContext({}),s=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},m=function(e){var n=s(e.components);return t.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),h=s(a),g=o,f=h["".concat(i,".").concat(g)]||h[g]||p[g]||l;return a?t.createElement(f,r(r({ref:n},m),{},{components:a})):t.createElement(f,r({ref:n},m))}));function g(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=a.length,r=new Array(l);r[0]=h;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var s=2;s<l;s++)r[s]=a[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"}}]);