"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[3566],{33457:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var a=n(28427),r=n(84397),o=(n(2784),n(30876)),i=["components"],p={id:"operations",title:"Operations"},s=void 0,c={unversionedId:"paper/operations",id:"paper/operations",title:"Operations",description:"Operations are functions available within an Mutate Transaction callback with access to internal context including the current mutable version of the DocumentStore being operated on.",source:"@site/docs/paper/operations.md",sourceDirName:"paper",slug:"/paper/operations",permalink:"/docs/paper/operations",draft:!1,tags:[],version:"current",frontMatter:{id:"operations",title:"Operations"},sidebar:"docs",previous:{title:"Mutating Data",permalink:"/docs/paper/mutating-data"},next:{title:"Events",permalink:"/docs/paper/events"}},l={},u=[{value:"Base Operations",id:"base-operations",level:2},{value:"Operational Context",id:"operational-context",level:2},{value:"Creating Custom Operations",id:"creating-custom-operations",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Operations are functions available within an ",(0,o.kt)("em",{parentName:"p"},"Mutate Transaction")," callback with access to internal context including the current ",(0,o.kt)("strong",{parentName:"p"},"mutable")," version of the ",(0,o.kt)("inlineCode",{parentName:"p"},"DocumentStore")," being operated on."),(0,o.kt)("h2",{id:"base-operations"},"Base Operations"),(0,o.kt)("p",null,"The ones that are provided by GraphQL Paper out-of-the-box are ",(0,o.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"remove"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"clone"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"getStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"queueEvent"),". These are covered in ",(0,o.kt)("a",{parentName:"p",href:"/docs/paper/mutating-data#transaction-operations"},(0,o.kt)("em",{parentName:"a"},"Mutating Data")),"."),(0,o.kt)("h2",{id:"operational-context"},"Operational Context"),(0,o.kt)("p",null,"What makes Operations different than regular functions is that the first argument is bound (via ",(0,o.kt)("inlineCode",{parentName:"p"},".bind"),") at the beginning of every transaction, for each operation, with ",(0,o.kt)("a",{parentName:"p",href:"pathname:///api/paper/modules/types.html#OperationContext"},(0,o.kt)("inlineCode",{parentName:"a"},"Operation Context")),"."),(0,o.kt)("p",null,"The shape of the Operation Context is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  store: DocumentStore\n  schema: GraphQLSchema\n  eventQueue: Event[]\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"store")," is the current ",(0,o.kt)("strong",{parentName:"li"},"mutable")," version of the store available during the transaction"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"schema")," is an instance of ",(0,o.kt)("inlineCode",{parentName:"li"},"GraphQLSchema")," based on the schema passed into ",(0,o.kt)("inlineCode",{parentName:"li"},"Paper")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"eventQueue")," is an array of events that will be emitted at the end of the transaction")),(0,o.kt)("h2",{id:"creating-custom-operations"},"Creating Custom Operations"),(0,o.kt)("p",null,"Additional ",(0,o.kt)("em",{parentName:"p"},"Operations")," can be added to be used within the ",(0,o.kt)("em",{parentName:"p"},"Mutate Transaction")," callback.\nThe first argument is reserved and ",(0,o.kt)("em",{parentName:"p"},"must")," be the ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," object even if it's not used for the custom operation. What is provided by the ",(0,o.kt)("inlineCode",{parentName:"p"},"OperationContext")," argument is ",(0,o.kt)("a",{parentName:"p",href:"#operational-context"},"described above"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export const customOperation = (context, argOne, argTwo) => {\n  /* custom logic for your custom operation */\n};\n")),(0,o.kt)("p",null,"If using typescript, import the ",(0,o.kt)("inlineCode",{parentName:"p"},"OperationContext")," for the first argument of the function. Setting up your Operation this way should allow the types and autocomplete to work within the the ",(0,o.kt)("em",{parentName:"p"},"Mutate Transaction")," callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// customOperation.ts\nimport { OperationContext }  from 'graphql-paper/types';\n\nexport const customOperation = (context: OperationContext, argOne: string, argTwo: number) => {\n  /* custom logic for your custom operation */\n  return /* return anything useful as a result of the operation */;\n};\n")),(0,o.kt)("p",null,"Operations can be added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Paper")," constructor's second argument configuration object, on the ",(0,o.kt)("inlineCode",{parentName:"p"},"operations")," key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { customOperation } from './customOperation';\nimport { graphqlSchema } from './schema';\n\nconst operations = { custom: customOperation };\nconst paper = new Paper(graphqlSchema, { operations });\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { customOperation } from './customOperation';\nimport { graphqlSchema } from './schema';\n\nconst operations = { custom: customOperation };\nconst paper = new Paper(graphqlSchema, { operations });\n")),(0,o.kt)("p",null,"The key provided in the ",(0,o.kt)("inlineCode",{parentName:"p"},"OperationMap")," hash is what is made available by destructuring within the ",(0,o.kt)("em",{parentName:"p"},"Mutate Transaction")," callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"paper.mutate(({ custom }) => {\n  const result = custom('argOne magic!', 42);\n});\n")))}d.isMDXComponent=!0},30876:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);