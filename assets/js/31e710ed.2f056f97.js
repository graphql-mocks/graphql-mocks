"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[4102],{15403:function(e,n,a){a.r(n),a.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var t=a(28427),l=a(84397),i=(a(2784),a(30876)),r=["components"],o={id:"fake-data",title:"Automatic Mocking with Fake Data using Falso"},s=void 0,p={unversionedId:"guides/fake-data",id:"guides/fake-data",title:"Automatic Mocking with Fake Data using Falso",description:"Falso is a popular javascript library that provides mocking functions for a variety of types of data across different domains. Using the Falso middleware with graphql-mocks makes it easy to get a fully mocked GraphQL API quickly. This is useful when some data should be mocked concretely, but the other fields can be generated.",source:"@site/docs/guides/fake-data.md",sourceDirName:"guides",slug:"/guides/fake-data",permalink:"/docs/guides/fake-data",draft:!1,tags:[],version:"current",frontMatter:{id:"fake-data",title:"Automatic Mocking with Fake Data using Falso"},sidebar:"docs",previous:{title:"Relay Pagination",permalink:"/docs/guides/relay-pagination"},next:{title:"Mirage JS",permalink:"/docs/guides/mirage-js"}},d={},c=[{value:"API Documentation",id:"api-documentation",level:3},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Middleware options",id:"middleware-options",level:2},{value:"Use a specific Falso function per field",id:"use-a-specific-falso-function-per-field",level:3},{value:"Specifying possible values per field",id:"specifying-possible-values-per-field",level:3},{value:"Specify chance of null values for nullable fields",id:"specify-chance-of-null-values-for-nullable-fields",level:3},{value:"Specifying the range of items in a list",id:"specifying-the-range-of-items-in-a-list",level:3},{value:"Replace existing resolver functions",id:"replace-existing-resolver-functions",level:3},{value:"Highlight specific resolvers to include",id:"highlight-specific-resolvers-to-include",level:3},{value:"Migrating from Faker.js to the Falso Middleware",id:"migrating-from-fakerjs-to-the-falso-middleware",level:2}],f={toc:c};function u(e){var n=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},f,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/ngneat/falso"},"Falso")," is a popular javascript library that provides mocking functions for a variety of types of data across different domains. Using the Falso middleware with graphql-mocks makes it easy to get a fully mocked GraphQL API quickly. This is useful when some data should be mocked concretely, but the other fields can be generated."),(0,i.kt)("p",null,"This middleware was adapted from the Faker.js middleware (",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/faker"),") which has since been deprecated. Since Faker.js is no longer maintained and Falso is a modern esmodule-first alternative Falso is being used instead. If previously using the Faker.js middleware see ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/fake-data#migrating-from-fakerjs-to-the-falso-middleware"},"Migrating from the Faker Middleware")," section below."),(0,i.kt)("p",null,"The middleware includes support for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"choosing random GraphQL enum values"),(0,i.kt)("li",{parentName:"ul"},"finding an appropriate Falso function for a field (ie: a ",(0,i.kt)("inlineCode",{parentName:"li"},"firstName")," field would use the appropriate Falso function (",(0,i.kt)("inlineCode",{parentName:"li"},"randFirstName"),"))"),(0,i.kt)("li",{parentName:"ul"},"randomly including ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," values for nullable fields"),(0,i.kt)("li",{parentName:"ul"},"specifying the Falso fn to be used for a field"),(0,i.kt)("li",{parentName:"ul"},"specifying ranges of results used for lists"),(0,i.kt)("li",{parentName:"ul"},"applying handling to specific resolvers using ",(0,i.kt)("inlineCode",{parentName:"li"},"highlight"))),(0,i.kt)("h3",{id:"api-documentation"},"API Documentation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///api/falso/"},"@graphql-mocks/falso"))),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/falso")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@ngneat/falso")," (and the main ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," package if not already installed)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install --save-dev @ngneat/falso @graphql-mocks/falso graphql-mocks\n\n# yarn\nyarn add --dev @ngneat/falso @graphql-mocks/falso graphql-mocks\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"falsoMiddleware")," and pass the result to the ",(0,i.kt)("inlineCode",{parentName:"p"},"middlewares")," option on the graphql-mocks ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLHandler")," and the entire resolver map will be mocked and is ready for querying. To apply resolvers only to specific parts of the GraphQL Schema use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option (",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/fake-data#highlight-specific-resolvers-to-include"},"details below"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { GraphQLHandler } from 'graphql-mocks';\nimport { falsoMiddleware } from '@graphql-mocks/falso';\n\nconst handler = new GraphQLHandler({\n  middlewares: [falsoMiddleware()],\n  dependencies: {\n      graphqlSchema,\n  },\n});\n")),(0,i.kt)("h2",{id:"middleware-options"},"Middleware options"),(0,i.kt)("p",null,"For finer control of Falso the middleware can be configured with an options objects, see the following sections for more information on each option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  replace: true,\n  highlight: (h) => h.include(['Person', 'name']);\n\n  fields: {\n    type: {\n      field: {\n        falsoFn: 'address.city',\n        possibleValues: [],\n      }\n    }\n  }\n})\n")),(0,i.kt)("h3",{id:"use-a-specific-falso-function-per-field"},"Use a specific Falso function per field"),(0,i.kt)("p",null,"Available functions are listed in the ",(0,i.kt)("a",{parentName:"p",href:"https://ngneat.github.io/falso/docs/getting-started"},"Falso documentation"),"."),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option is also specified, make sure the highlight includes the specified type and field names so that the Falso function is included."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  favoriteCity: String!\n}\n")),(0,i.kt)("p",null,"To specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"Person.favoriteCity")," to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"randCity")," falso function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        falsoFn: 'randCity'\n      }\n    }\n  }\n})\n")),(0,i.kt)("h3",{id:"specifying-possible-values-per-field"},"Specifying possible values per field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  name: String!\n}\n")),(0,i.kt)("p",null,"Specify the possible values for ",(0,i.kt)("inlineCode",{parentName:"p"},"Person.name")," and one will be selected at random. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option is also specified, make sure the highlight includes the specified type and field names that the ",(0,i.kt)("inlineCode",{parentName:"p"},"possibleValues")," are specified for."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  fields: {\n    Person: {\n      name: {\n        possibleValues: ['Lisa', 'Marge', 'Maggie', 'Bart', 'Homer']\n      }\n    }\n  }\n})\n")),(0,i.kt)("h3",{id:"specify-chance-of-null-values-for-nullable-fields"},"Specify chance of null values for nullable fields"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"0.1")," (10%)")),(0,i.kt)("p",null,"The chance a nullable field is null, or that a list contains null, can be controlled by the ",(0,i.kt)("inlineCode",{parentName:"p"},"nullPercentage")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"nullListPercentage")," options respectively. These can be specified globally for all fields and for a specific field."),(0,i.kt)("p",null,"Globally, for all fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  nullPercentage: 0.5,\n  nullListPercentage: 0.7\n})\n")),(0,i.kt)("p",null,"For a specific field, in this case the null probability for ",(0,i.kt)("inlineCode",{parentName:"p"},"Person.name"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  fields: {\n    Person: {\n      name: {\n        nullPercentage: 0.5,\n        nullListPercentage: 0.7\n      }\n    }\n  }\n})\n")),(0,i.kt)("h3",{id:"specifying-the-range-of-items-in-a-list"},"Specifying the range of items in a list"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default: min: 0, max: 10")),(0,i.kt)("p",null,"A list can be configured to have a min/max range."),(0,i.kt)("p",null,"This can be specified globally:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  listCount: { min: 2, max: 20 }\n})\n")),(0,i.kt)("p",null,"or for a specific field, in this case for the list of pets on ",(0,i.kt)("inlineCode",{parentName:"p"},"Person.pets"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  pets: [Pet!]!\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  fields: {\n    Person: {\n      pets: {\n        listCount: { min: 2, max: 20 }\n      }\n    }\n  }\n})\n")),(0,i.kt)("h3",{id:"replace-existing-resolver-functions"},"Replace existing resolver functions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"))),(0,i.kt)("p",null,"If there is a need to replace existing resolver functions in the resolver map with falso functions then pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"replace")," option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"falsoMiddleware({\n  replace: true\n})\n")),(0,i.kt)("h3",{id:"highlight-specific-resolvers-to-include"},"Highlight specific resolvers to include"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default: Resolver functions for the entire schema are included (and only replaces existing resolver based on the ",(0,i.kt)("inlineCode",{parentName:"li"},"replace")," option which defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),").")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option controls which parts of Resolver Map are modified by the falso middleware. This is a common pattern for graphql-mocks middlewares, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/highlight/introducing-highlight#highlight-middleware-option"},(0,i.kt)("inlineCode",{parentName:"a"},"highlight")," option documentation")," for more information."),(0,i.kt)("h2",{id:"migrating-from-fakerjs-to-the-falso-middleware"},"Migrating from Faker.js to the Falso Middleware"),(0,i.kt)("p",null,"Faker.js is no longer maintained and Falso is a modern alternative. If faker and ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/faker")," were previously being used then migrating to ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/falso")," should be relatively quick."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Remove ",(0,i.kt)("inlineCode",{parentName:"li"},"faker")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"@graphql-mocks/faker"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#npm\nnpm remove faker @graphql-mocks/faker\n\n# yarn\nyarn remove faker @graphql-mocks/faker\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Install Falso and ",(0,i.kt)("inlineCode",{parentName:"li"},"@graphql-mocks/falso"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#npm\nnpm install --save-dev @ngneat/falso @graphql-mocks/falso\n\n# yarn\nyarn add --dev @ngneat/falso @graphql-mocks/falso\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Update require/imports")),(0,i.kt)("p",null,"ES Modules:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// from\nimport { fakerMiddleware } from '@graphql-mocks/faker';\n\n// to\nimport { falsoMiddleware } from '@graphql-mocks/falso';\n")),(0,i.kt)("p",null,"CommonJS Modules:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// from\nconst { fakerMiddleware } = require('@graphql-mocks/faker');\n\n// to\nconst { falsoMiddleware } = require('@graphql-mocks/falso');\n")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Update Middleware Options")),(0,i.kt)("p",null,"Update ",(0,i.kt)("inlineCode",{parentName:"p"},"fakerFn")," options to ",(0,i.kt)("inlineCode",{parentName:"p"},"falsoFn")," and the corresponding function to the Falso equivalent"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// from\nfakerMiddleware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        fakerFn: 'address.city'\n      }\n    }\n  }\n}\n\n// to\nfalsoMiddleware({\n  fields: {\n    Person: {\n      favoriteCity: {\n        // `fakerFn` -> `falsoFn`\n        // `address.city` from Faker -> `randCity` from Falso\n        falsoFn: 'randCity'\n      }\n    }\n  }\n}\n")))}u.isMDXComponent=!0},30876:function(e,n,a){a.d(n,{Zo:function(){return d},kt:function(){return u}});var t=a(2784);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),f=p(a),u=l,m=f["".concat(s,".").concat(u)]||f[u]||c[u]||i;return a?t.createElement(m,r(r({ref:n},d),{},{components:a})):t.createElement(m,r({ref:n},d))}));function u(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}f.displayName="MDXCreateElement"}}]);