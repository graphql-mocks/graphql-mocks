"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[7054],{91045:function(e,n,t){t.r(n),t.d(n,{default:function(){return E}});var r=t(17180),l=t(67927),a=t(2784),o=t(41901),c=t(72779),s=t.n(c),i=t(17909),m=t(92896),h=t(85837),u=t(94198),d={buttons:"buttons_pzbO",features:"features_keug",featureImage:"featureImage_yA8i","yellow-outline":"yellow-outline_dGKJ","banner-code":"banner-code_VNg7","no-servers-warning":"no-servers-warning_o5gq"},g=t(5761),p="undefined"==typeof window?function(){}:Promise.all([t.e(7225),t.e(5280)]).then(t.bind(t,45280));var E=function(){var e=(0,h.Z)().siteConfig,n=void 0===e?{}:e;return a.createElement(i.Z,{title:"Home",description:n.tagline},a.createElement("div",{className:"container"},a.createElement("header",{className:"hero-container"},a.createElement("div",{className:"hero__content"},a.createElement("h1",{className:"hero__title"},a.createElement("code",null,n.title)),a.createElement("div",{className:"hero__content-tagline"},a.createElement("strong",null,"Build web applications today against the GraphQL APIs of tomorrow."),a.createElement("br",null),"Setup once. Run in node, the browser, and ",a.createElement("code",null,"localhost")," with tools that scale mocks with the complexity of your GraphQL API."),a.createElement("div",null,a.createElement(m.Z,{className:s()("button button--secondary button--lg",d.getStarted),to:(0,u.Z)("docs/getting-started/introduction")},"Get Started"))),a.createElement("div",{className:"hero__slices"},a.createElement("section",{className:"hero__slice"},a.createElement("img",{src:"img/highlight.svg",className:s()("hero__logo")}),a.createElement("h2",null,"Highlight"),a.createElement("p",null,"Use"," ",a.createElement("a",{href:"/docs/highlight/introducing-highlight"},a.createElement("code",null,"Highlight"))," ","to flexibly select parts of the schema to mock and modify")),a.createElement("section",{className:"hero__slice"},a.createElement("img",{src:"img/logo.svg",className:s()("hero__logo")}),a.createElement("h2",null,"Mock"),a.createElement("p",null,"Flexibly define resolver behavior with ",a.createElement("a",{href:"/docs/resolver/introducing-wrappers"},"wrappers")," and"," ",a.createElement("a",{href:"/docs/resolver-map/introducing-middlewares"},"middlewares")," to cover even the most complex mocking scenarios")),a.createElement("section",{className:"hero__slice"},a.createElement("img",{src:"img/paper.svg",className:s()("hero__logo")}),a.createElement("h2",null,"Store"),a.createElement("p",null,"Persist mutations and control stateful data with a"," ",a.createElement("a",{href:"/docs/paper/introducing-paper"},a.createElement("code",null,"graphql-paper"))," ","in-memory store")),a.createElement("section",{className:"hero__slice hero__slice-resolve"},a.createElement("img",{src:"img/graphql-handler.png",className:s()("hero__logo")}),a.createElement("h2",{className:"__pull"},"Resolve"),a.createElement("p",null,"Resolve GraphQL queries in Node and the Browser with the provided"," ",a.createElement("a",{href:"/docs/handler/introducing-handler"},a.createElement("code",null,"GraphQLHandler")))),a.createElement("section",{className:"hero__slice"},a.createElement("img",{src:"img/network-handlers.png",className:s()("hero__logo")}),a.createElement("h2",null,"Network"),a.createElement("p",null,"Write once, use everywhere. ",a.createElement("a",{href:"/docs/network/introducing-network-handlers"},"Network Handlers")," ","bring your mocks to node, the browser, and more.")),a.createElement("section",{className:"hero__slice"},a.createElement("img",{src:"img/gqlmocks-cli.png",className:s()("hero__logo")}),a.createElement("h2",null,"CLI"),a.createElement("p",null,"Use the"," ",a.createElement("a",{href:"/docs/cli/introducing-gqlmocks"},a.createElement("code",null,"gqlmocks"))," ","CLI to fetch remote schemas, generate boilerplate and"," ",a.createElement("a",{href:"/docs/cli/quick-mocking"},"run mock servers on ",a.createElement("code",null,"localhost")),".")))),a.createElement("main",null,a.createElement("div",{className:"demo"},a.createElement("h2",{className:"feature__heading"},"Demo"),a.createElement("div",{className:"feature__dot-grid"}),a.createElement("p",null,"\u26a0\ufe0f Warning: ",a.createElement("strong",null,"No servers")," are used, or harmed, in the resolving of these GraphQL queries"),a.createElement("p",null,"To quickly show a few of the features in action here we have:"),a.createElement("ul",null,a.createElement("li",null,"Setting up a GraphQL query handler and making a query"),a.createElement("li",null,"Using ",a.createElement("code",null,"graphql-paper")," package, an in-memory graphql store, which allows stateful queries (try a mutation and see the change persist in subsequent queries)"),a.createElement("li",null,"An embedded ",a.createElement("code",null,"logWrapper")," highlighted on ",a.createElement("em",null,"all root-level Query resolvers")," for logging. Check the developer console for helpful logging after each query run.")),a.createElement("p",null,"Go ahead and do a few queries and mutations (see changes persist)"),a.createElement("div",{className:d["yellow-outline"],style:{height:"400px"}},a.createElement(g.ZP,{storage:{removeItem:function(){},getItem:function(){},setItem:function(){}},query:'{\n  movies(name:"Mo") {\n    name\n    year\n    characters {\n      name\n    }\n  }\n}',docExplorerOpen:!1,fetcher:function(){var e=(0,l.Z)((0,r.Z)().mark((function e(n){var t;return(0,r.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,p;case 2:return t=e.sent.createHandler(),e.abrupt("return",t.query(n.query).then((function(e){return e})));case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()})),a.createElement("h2",null,"The Code"),a.createElement(o.Z,{className:" "+d["banner-code"]+" "+d["yellow-outline"]+" ",language:"javascript"},"\n// 1. Setup your handler\n\nconst handler = new GraphQLHandler({\n  // optionally, provide a base resolver map\n  resolverMap,\n\n  // use middlewares from packages, make your own,\n  // and embed resolver wrappers\n  middlewares: [\n    embed({\n      // Highlight makes it easy to declaratively select\n      // what resolvers should be wrapped with the `logWrapper`\n      highlight: (h) => h.include(field(['Query', '*']))\n      wrappers: [logWrapper],\n    }),\n  ]\n\n  // add dependencies needed by middlewares or resolvers\n  dependencies: {\n    graphqlSchema,\n    paper: new Paper(graphqlSchema)\n  },\n});\n\n\n// 2. Run queries (or mutations)!\n\nhandler.query(`\n  query {\n    ...\n  }\n`);\n          ")))))}}}]);