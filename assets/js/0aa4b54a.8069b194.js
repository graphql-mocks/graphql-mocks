"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[3056],{4493:function(e,r,a){a.r(r),a.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var n=a(28427),t=a(84397),l=(a(2784),a(30876)),p=["components"],o={id:"available-wrappers",title:"Available Wrappers"},s=void 0,i={unversionedId:"resolver/available-wrappers",id:"resolver/available-wrappers",title:"Available Wrappers",description:"The following is a list of Resolver Wrappers. If you create one that could be useful for the community please open an",source:"@site/docs/resolver/available-wrappers.md",sourceDirName:"resolver",slug:"/resolver/available-wrappers",permalink:"/docs/resolver/available-wrappers",draft:!1,tags:[],version:"current",frontMatter:{id:"available-wrappers",title:"Available Wrappers"},sidebar:"docs",previous:{title:"Applying Wrappers",permalink:"/docs/resolver/applying-wrappers"},next:{title:"Creating Custom Wrappers",permalink:"/docs/resolver/creating-wrappers"}},d={},c=[{value:"Debugger Wrapper",id:"debugger-wrapper",level:2},{value:"Latency Wrapper",id:"latency-wrapper",level:2},{value:"Log Wrapper",id:"log-wrapper",level:2},{value:"Relay Wrapper",id:"relay-wrapper",level:2},{value:"Spy Wrapper",id:"spy-wrapper",level:2}],u={toc:c};function h(e){var r=e.components,a=(0,t.Z)(e,p);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The following is a list of Resolver Wrappers. If you create one that could be useful for the community please open an\nIssue or Pull Request so that it can be added. Also, learn how to ",(0,l.kt)("a",{parentName:"p",href:"/docs/resolver/creating-wrappers"},"create your own")," and\n",(0,l.kt)("a",{parentName:"p",href:"/docs/resolver/applying-wrappers"},"apply Resolver Wrappers")," to a Resolver Map."),(0,l.kt)("h2",{id:"debugger-wrapper"},"Debugger Wrapper"),(0,l.kt)("p",null,"Package: ",(0,l.kt)("inlineCode",{parentName:"p"},"graphql-mocks")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { debuggerWrapper } from 'graphql-mocks/wrapper';\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"debuggerWrapper")," allows you to insert ",(0,l.kt)("inlineCode",{parentName:"p"},"debugger")," statements before and/or after the wrapped resolver has ran. This would allow to step into the wrapped resolver also, or anything else you could do while in a paused state of execution."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// by default will add a debugger before and after the resolver\ndebuggerWrapper();\n\n// otherwise specify before and/or after as booleans\ndebuggerWrapper({ before: true, after: true });\n")),(0,l.kt)("p",null,"This is a full example creating a middleware that applies the debugger wrapper\nwith the ",(0,l.kt)("inlineCode",{parentName:"p"},"before")," case, to all top-level Query resolvers."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// create a Resolver Map Middleware that applies the\n// debugger wrapper to all top-level Query resolvers\n// before the resolvers execute\nconst debuggerMiddleware = embed({\n  wrappers: [debuggerWrapper({ before: true })],\n  h: (h) => h.include(field(['Query', '*']))\n});\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [debuggerMiddleware],\n  dependencies: { graphqlSchema },\n});\n\n// with dev tools opened a debugger would trigger just before\n// the execution of the Query.hello resolver\nawait handler.query(`{ hello }`);\n")),(0,l.kt)("h2",{id:"latency-wrapper"},"Latency Wrapper"),(0,l.kt)("p",null,"Package: ",(0,l.kt)("inlineCode",{parentName:"p"},"graphql-mocks")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { latencyWrapper } from 'graphql-mocks/wrapper';\n")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"latencyWrapper")," to provide more realistic latency to resolvers. This can be useful to simulate resolvers that might take a bit longer."),(0,l.kt)("p",null,"This wrapper can take either a number (in milliseconds), or an array of a lower bound and upper bound and a number will be chosen at random between these."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// will wait 200 milliseconds\nlatencyWrapper(200);\n\n// will wait between 200 and 800 milliseconds\nlatencyWrapper([200, 800]);\n")),(0,l.kt)("p",null,"This is what the latency wrapper would like applied to resolvers using the ",(0,l.kt)("inlineCode",{parentName:"p"},"embed")," middleware, applying a delay of 200 milliseconds to all top-level Query resolvers."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// specified in milliseconds\nconst latencyDelay = 200;\n\n// create a Resolver Map Middleware that applies the\n// latency wrapper to all top-level Query resolvers\nconst latencyMiddleware = embed({\n  wrappers: [latencyWrapper(latencyDelay)],\n  h: (h) => h.include(field(['Query', '*']))\n});\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [latencyMiddleware],\n  dependencies: { graphqlSchema },\n});\n\n// this will take at least 200 milliseconds\nawait handler.query(`{ hello }`);\n")),(0,l.kt)("h2",{id:"log-wrapper"},"Log Wrapper"),(0,l.kt)("p",null,"Package: ",(0,l.kt)("inlineCode",{parentName:"p"},"graphql-mocks")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { logWrapper } from 'graphql-mocks/wrapper';\n")),(0,l.kt)("p",null,"This Resolver Wrapper applies logging around the resolver. It logs the arguments the Resolver function is called with,\nas well as the result. It is useful for troubleshooting and understanding the flow of data in and out of a Resolver.\nSelectively apply it using the ",(0,l.kt)("inlineCode",{parentName:"p"},"highlight")," option with ",(0,l.kt)("inlineCode",{parentName:"p"},"embed")," to pinpoint which Resolvers receive logging. When used\nwith other wrappers it is recommended that the position be considered as outer wrappers won't include logging."),(0,l.kt)("h2",{id:"relay-wrapper"},"Relay Wrapper"),(0,l.kt)("p",null,"This wrapper is handy for being able a resolver's result and applying ",(0,l.kt)("a",{parentName:"p",href:"https://relay.dev/graphql/connections.htm"},"relay pagination")," to it."),(0,l.kt)("p",null,"The documentation for the Relay Wrapper is covered in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/relay-pagination"},"Relay Pagination Guide"),"."),(0,l.kt)("h2",{id:"spy-wrapper"},"Spy Wrapper"),(0,l.kt)("p",null,"Package: ",(0,l.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/sinon")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { spyWrapper } from '@graphql-mocks/sinon';\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note: Sinon must be installed as a ",(0,l.kt)("inlineCode",{parentName:"strong"},"devDependency")," to be used with this wrapper")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"spyWrapper")," adds spies to the Resolver and makes them available on the ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," property on the ",(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLHandler"),"\ninstance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const spyMiddleware = embed({ wrappers: [spyWrapper] });\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [spyMiddleware],\n  dependencies: { graphqlSchema },\n});\n\nawait handler.query(`{ hello }`);\nexpect(handler.state?.spies?.Query?.hello.callCount).to.equal(1);\n")),(0,l.kt)("p",null,"This is especially handy testing strict scenarios where assertions need to be made around how many times a Resolver was\ncalled, what it was called with and what was returned. When used with other Resolver Wrappers it should be considered which order the Spy is applied."))}h.isMDXComponent=!0},30876:function(e,r,a){a.d(r,{Zo:function(){return d},kt:function(){return h}});var n=a(2784);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function l(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?l(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=n.createContext({}),i=function(e){var r=n.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):p(p({},r),e)),a},d=function(e){var r=i(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=i(a),h=t,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||l;return a?n.createElement(m,p(p({ref:r},d),{},{components:a})):n.createElement(m,p({ref:r},d))}));function h(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=a.length,p=new Array(l);p[0]=u;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,p[1]=o;for(var i=2;i<l;i++)p[i]=a[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);