"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[5138],{1136:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var r=n(28427),a=n(84397),o=(n(2784),n(30876)),s=["components"],i={id:"msw",title:"Mock Service Worker"},p=void 0,l={unversionedId:"network/msw",id:"network/msw",title:"Mock Service Worker",description:"The msw (mock service worker) package is useful in intercepting and mocking requests in the browser. Its use of service workers means requests still appear in the network tab, creating a realistic mocking environment. With @graphql-mocks/network-msw the requests and responses can be handled by msw with a GraphQL handler for full GraphQL mocking in the browser.",source:"@site/docs/network/msw.md",sourceDirName:"network",slug:"/network/msw",permalink:"/docs/network/msw",draft:!1,tags:[],version:"current",frontMatter:{id:"msw",title:"Mock Service Worker"},sidebar:"docs",previous:{title:"Introducing Network Handlers",permalink:"/docs/network/introducing-network-handlers"},next:{title:"Pretender",permalink:"/docs/network/pretender"}},c={},m=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Resolver Context",id:"resolver-context",level:2}],d={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://mswjs.io/"},(0,o.kt)("inlineCode",{parentName:"a"},"msw"))," (mock service worker) package is useful in intercepting and mocking requests in the browser. Its use of service workers means requests still appear in the network tab, creating a realistic mocking environment. With ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/network-msw")," the requests and responses can be handled by ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," with a GraphQL handler for full GraphQL mocking in the browser."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," also provides its own method of GraphQL mocking where a named query is responded to with hardcoded fixture data. ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," provides a more universal mocking experience using resolvers and the GraphQL schema to reflect how real GraphQL APIs recursively resolve data."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install the ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," and  ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/network-msw")," npm packages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install --save-dev msw @graphql-mocks/network-msw\n\n# yarn\nyarn add --dev msw @graphql-mocks/network-msw\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Setup ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," using the ",(0,o.kt)("a",{parentName:"p",href:"https://mswjs.io/docs/getting-started/mocks/rest-api"},"REST API Documentation"),"."),(0,o.kt)("p",null,"Then integreate with the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," by creating or importing a ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLHandler")," instance and passing it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"mswResolver")," handler."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// src/mocks/handlers.js\n\nimport { GraphQLHandler } from 'graphql-mocks';\nimport { mswResolver } from '@graphql-mocks/network-msw';\nimport { rest } from 'msw'\nimport graphqlSchema from './graphql-schema';\n\nconst graphqlHandler = new GraphQLHandler({ dependencies: { graphqlSchema }});\n\nexport const handlers = [\n  rest.post('/graphql', mswResolver(graphqlHandler))\n]\n")),(0,o.kt)("p",null,"Alternatively, instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"/graphql"),", a full path url can be used also. See the ",(0,o.kt)("a",{parentName:"p",href:"https://mswjs.io/docs/basics/request-matching#request-url"},(0,o.kt)("inlineCode",{parentName:"a"},"msw")," documentation")," for options on specifying the path of the request handler."),(0,o.kt)("p",null,"Next, follow the ",(0,o.kt)("a",{parentName:"p",href:"https://mswjs.io/docs/getting-started/integrate/browser"},(0,o.kt)("inlineCode",{parentName:"a"},"msw")," browser integration documentation")," to integrate msw properly with your front-end build."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," The handler ",(0,o.kt)("inlineCode",{parentName:"p"},"src/mocks/handlers.js")," file created above should be imported and used with the ",(0,o.kt)("inlineCode",{parentName:"p"},"setupWorkers")," function as described in the ",(0,o.kt)("a",{parentName:"p",href:"https://mswjs.io/docs/getting-started/integrate/browser"},"browser integration documentation"),"."),(0,o.kt)("p",null,"With everything integrated, requests in the browser should be intercepted by ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," and use the rest handler with the ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLHandler")," for resolving GraphQL queries."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// fetch using the url specified in src/mocks/handlers.js\n// `/graphql` becomes `http://localhost/graphql`\nfetch('http://localhost/graphql, {\n  method: 'POST',\n  body: JSON.stringify({\n    // required\n    query: `\n      query {\n        # graphql query\n      }\n    `,\n\n    // optional\n    variables: {},\n\n    // optional\n    operationName: 'OperationName'\n  }),\n}).then(async (response) => {\n  // get the final json payload\n  const result = await response.json();\n  return result;\n})\n")),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.org/learn/serving-over-http/#post-request"},"GraphQL docs")," for details on these body parameters, and making http requests."),(0,o.kt)("h2",{id:"resolver-context"},"Resolver Context"),(0,o.kt)("p",null,"When using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/network-msw")," network handler each resolver context has an ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," property which contains the ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," (request), ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," (response), and ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx")," (",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"msw")," context"),"), from the ",(0,o.kt)("inlineCode",{parentName:"p"},"msw")," rest request handler."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function resolver(parent, args, context, info) {\n  const { msw } = context;\n  // request, response and context from the `msw` request handler\n  const { req, res, ctx } = msw;\n}\n")))}u.isMDXComponent=!0},30876:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);