"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[3960],{5719:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var a=n(28427),r=n(84397),o=(n(2784),n(30876)),i=["components"],c={id:"querying-data",title:"Querying Data"},l=void 0,p={unversionedId:"paper/querying-data",id:"paper/querying-data",title:"Querying Data",description:"There are a few different ways to retrieve data from a Paper instance.",source:"@site/docs/paper/querying-data.md",sourceDirName:"paper",slug:"/paper/querying-data",permalink:"/docs/paper/querying-data",draft:!1,tags:[],version:"current",frontMatter:{id:"querying-data",title:"Querying Data"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/paper/installation"},next:{title:"Mutating Data",permalink:"/docs/paper/mutating-data"}},s={},u=[{value:"Querying Documents via the <code>data</code> Property",id:"querying-documents-via-the-data-property",level:2},{value:"Exchange Documents for a Newer Copy",id:"exchange-documents-for-a-newer-copy",level:2},{value:"Returning Documents from Mutation Transactions",id:"returning-documents-from-mutation-transactions",level:2},{value:"Traversing Connections Between Documents",id:"traversing-connections-between-documents",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are a few different ways to retrieve data from a ",(0,o.kt)("inlineCode",{parentName:"p"},"Paper")," instance."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#querying-documents-via-the-data-property"},"Access the current ",(0,o.kt)("inlineCode",{parentName:"a"},"DocumentStore")," via the ",(0,o.kt)("inlineCode",{parentName:"a"},"data")," property")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#exchange-documents-for-a-newer-copy"},"Exchange a previous document for a newer copy")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#exchange-documents-for-a-newer-copy"},"Return documents from within a ",(0,o.kt)("inlineCode",{parentName:"a"},"mutate")," transaction"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:"),"\nIt is important to remember that a document retrieved from the store is considered stale-on-arrival and cannot be modified. It does not represent an instance but instead a stale copy, or snapshot, of the document at the time of retrieval. For an updated version of the document it needs to be exchanged for an updated copy (",(0,o.kt)("a",{parentName:"p",href:"#exchange-documents-for-a-newer-copy"},"see below"),")"),(0,o.kt)("h2",{id:"querying-documents-via-the-data-property"},"Querying Documents via the ",(0,o.kt)("inlineCode",{parentName:"h2"},"data")," Property"),(0,o.kt)("p",null,"A frozen read-only copy of the store is available via the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Paper")," instance."),(0,o.kt)("p",null,"The shape of a store is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  [typeName]: Document[]\n}\n")),(0,o.kt)("p",null,"A GraphQL Schema with these two types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Actor {\n  name: String!\n}\n\ntype Film {\n  title: String!\n}\n")),(0,o.kt)("p",null,"Could have a store like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  Film: [\n    { title: 'Jurassic Park' },\n    { title: 'Godzilla' }\n  ],\n  Actor: [\n    { name: 'Jeff Goldblum' },\n    { name: 'Elizabeth Olsen' }\n  ]\n}\n")),(0,o.kt)("p",null,"Since the data is accessed by type as a regular array the usual array methods can be used for accessing the data, and Documents in the array can be treated as POJOs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// returns the document { title: 'Jurassic Park' }\npaper.data.Film[0];\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// returns the document { title: 'Godzilla' }\npaper.data.Film.find(({title}) => title === 'Godzilla');\n")),(0,o.kt)("h2",{id:"exchange-documents-for-a-newer-copy"},"Exchange Documents for a Newer Copy"),(0,o.kt)("p",null,"Since documents are immutable snapshots they need to be exchanged for updated copies. This can be done by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," method on a ",(0,o.kt)("inlineCode",{parentName:"p"},"Paper")," instance which will take the existing document to be exchanged for the latest copy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// with a reference to an existing document exists from previously being fetched\nfilm;\n\n// return the latest copy of that document\nconst latestFilm = paper.find(film);\n")),(0,o.kt)("h2",{id:"returning-documents-from-mutation-transactions"},"Returning Documents from Mutation Transactions"),(0,o.kt)("p",null,"It's often useful to be able to have immediate access to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Document")," that has just been created/updated in a mutation transaction. This can be done by returning the Document, an array of Documents or an object of documents."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const macAndMe = await paper.mutate(({ create }) => {\n  const film = create('Film', { title: 'Mac and Me' });\n  return film;\n});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"film")," variable representing the newly created document is returned and available outside via the ",(0,o.kt)("inlineCode",{parentName:"p"},"macAndMe"),"."),(0,o.kt)("p",null,"Similar with returning an object that can be destructured:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { macAndme, spaceJam } = await paper.mutate(({ create }) => {\n  const macAndMe = create('Film', { title: 'Mac and Me' });\n  const spaceJam = create('Film', { title: 'Space Jam' });\n\n  return { macAndMe, spaceJam };\n});\n")),(0,o.kt)("p",null,"Or from an Array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [macAndme, spaceJam] = await paper.mutate(({ create }) => {\n  const filmOne = create('Film', { title: 'Mac and Me' });\n  const filmTwo = create('Film', { title: 'Space Jam' });\n\n  return [filmOne, filmTwo];\n});\n")),(0,o.kt)("h2",{id:"traversing-connections-between-documents"},"Traversing Connections Between Documents"),(0,o.kt)("p",null,"GraphQL Paper has support for connections between types as defined by the GraphQL Schema. If it's a list of types or a singular type it can be handled by GraphQL Paper. Accessing connections on a document do not have any special API and are accessible like any other field, as a property on the document."),(0,o.kt)("p",null,"With a schema where a ",(0,o.kt)("inlineCode",{parentName:"p"},"Film")," can have multiple actors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Actor {\n  name: String!\n}\n\ntype Film {\n  title: String!\n  actors: [Actor!]!\n}\n")),(0,o.kt)("p",null,"A film's actors could be accessed directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const film = paper.data.Film[0];\n\n// returns any actors connected to the Film document\nfilm.actors;\n")),(0,o.kt)("p",null,"Connections between documents are created during a mutation and are covered in ",(0,o.kt)("a",{parentName:"p",href:"/docs/paper/mutating-data"},(0,o.kt)("em",{parentName:"a"},"Mutating Data")),"."))}d.isMDXComponent=!0},30876:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);