"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[4322],{13919:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=t(28427),o=t(84397),a=(t(2784),t(30876)),l=["components"],i={id:"nock",title:"Nock"},c=void 0,p={unversionedId:"network/nock",id:"network/nock",title:"Nock",description:"Nock is used for testing and mocking http requests in Node. Integrating graphql-mocks with Nock is easy with @graphql-mocks/network-nock.",source:"@site/docs/network/nock.md",sourceDirName:"network",slug:"/network/nock",permalink:"/docs/network/nock",draft:!1,tags:[],version:"current",frontMatter:{id:"nock",title:"Nock"},sidebar:"docs",previous:{title:"Cypress",permalink:"/docs/network/cypress"},next:{title:"Introducing Highlight",permalink:"/docs/highlight/introducing-highlight"}},s={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Resolver Context",id:"resolver-context",level:3},{value:"API Documentation",id:"api-documentation",level:2}],k={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nock/nock"},"Nock")," is used for testing and mocking http requests in Node. Integrating ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," with Nock is easy with ",(0,a.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/network-nock"),"."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"nock")," and  ",(0,a.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/network-nock")," npm packages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install --save-dev nock @graphql-mocks/network-nock\n\n# yarn\nyarn add --dev nock @graphql-mocks/network-nock\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In any Nock POST ",(0,a.kt)("inlineCode",{parentName:"p"},".reply()"),", use the ",(0,a.kt)("inlineCode",{parentName:"p"},"nockHandler")," with a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLHandler")," instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { GraphQLHandler } from 'graphql-mocks';\nimport graphqlSchema from './graphqlSchema';\nimport { nockHandler } from '@graphql-mocks/network-nock';\nimport nock from 'nock';\n\nconst graphqlHandler = new GraphQLHandler({\n  dependencies: { graphqlSchema }\n};\n\nnock('http://graphql-api.com')\n  .post('/graphql')\n  .reply(nockHandler(graphqlHandler));\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"nockHandler")," function also accepts an ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," argument, an object with ",(0,a.kt)("inlineCode",{parentName:"p"},"checkGraphQLResult")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"checkRequest")," callbacks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"nockHandler(graphqlHandler, {\n  checkRequest(request, requestBody) => void,\n  checkGraphQLResult: (result) => void\n})\n")),(0,a.kt)("p",null,"These callbacks are useful for doing checks or additional assertions during testing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"checkRequest")," callback is passed the incoming ",(0,a.kt)("inlineCode",{parentName:"li"},"request")," and the ",(0,a.kt)("inlineCode",{parentName:"li"},"requestBody")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"checkGraphQLResult")," callback is passed the result from the GraphQLHandler")),(0,a.kt)("p",null,"With the above nock handler setup, a ",(0,a.kt)("inlineCode",{parentName:"p"},"node-fetch")," call will be intercepted by and responded to from nock and graphql-mocks."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import fetch from 'node-fetch';\n\nfetch('http://localhost:8080/graphql, {\n  method: 'POST',\n  body: JSON.stringify({\n    // required\n    query: `\n      query {\n        # graphql query\n      }\n    `,\n\n    // optional\n    variables: {},\n\n    // optional\n    operationName: 'OperationName'\n  }),\n}).then(async (response) => {\n  // get the final json payload\n  const result = await response.json();\n  return result;\n})\n")),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/learn/serving-over-http/#post-request"},"GraphQL docs")," for details on these body parameters, and making http requests."),(0,a.kt)("h3",{id:"resolver-context"},"Resolver Context"),(0,a.kt)("p",null,"The Nock request object is made available within the resolver ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," under the ",(0,a.kt)("inlineCode",{parentName:"p"},"nock")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function resolver(parent, args, context, info) {\n  const { nock } = context;\n\n  // reference to the Nock request object\n  nock.request;\n}\n")),(0,a.kt)("h2",{id:"api-documentation"},"API Documentation"),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"/api/network-nock/"},"API Documentation")," for types and more details."))}d.isMDXComponent=!0},30876:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),k=p(t),d=o,m=k["".concat(c,".").concat(d)]||k[d]||u[d]||a;return t?r.createElement(m,l(l({ref:n},s),{},{components:t})):r.createElement(m,l({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=k;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"}}]);