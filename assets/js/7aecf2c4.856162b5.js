"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[490],{5141:function(e,n,t){t.d(n,{u:function(){return a}});var r=t(2784);function a(e){return r.createElement(r.Fragment,null,r.createElement("strong",null,"Result: "),r.createElement("pre",{className:"graphql-result"},JSON.stringify(e.result,null,2)))}},61228:function(e,n,t){t.r(n),t.d(n,{assets:function(){return B},contentTitle:function(){return E},default:function(){return X},frontMatter:function(){return O},metadata:function(){return F},toc:function(){return W}});var r=t(28427),a=t(84397),i=(t(2784),t(30876)),o=t(5141),s=["components"],l={toc:[]};function p(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { createServer } from "miragejs";\nimport { createRouteHandler, mirageMiddleware } from "@graphql-mocks/mirage";\n\ncreateServer({\n  routes() {\n    // capture mirageServer dependency\n    const mirageServer = this;\n\n    // create a route handler for POSTs to `/graphql`\n    // using `createRouteHandler`\n    this.post(\n      "graphql",\n      createRouteHandler({\n        middlewares: [mirageMiddleware()],\n        dependencies: {\n          mirageServer,\n          graphqlSchema,\n        },\n      })\n    );\n  },\n});\n')))}p.isMDXComponent=!0;var m=["components"],d={toc:[]};function c(e){var n=e.components,t=(0,a.Z)(e,m);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { mirageMiddleware } from "@graphql-mocks/mirage";\nimport { createServer, Model, hasMany } from "miragejs";\n\n// Define GraphQL Schema\nconst graphqlSchema = `\n  schema {\n    query: Query\n  }\n\n  type Query {\n    movies: [Movie!]!\n  }\n\n  type Movie {\n    title: String!\n    actors: [Actor!]!\n  }\n\n  type Actor {\n    name: String!\n  }\n`;\n\n// Create the mirage server and schema\nconst mirageServer = createServer({\n  models: {\n    Actor: Model,\n    Movie: Model.extend({\n      actors: hasMany(),\n    }),\n  },\n});\n\n// Create model instances\nconst meryl = mirageServer.schema.create("actor", { name: "Meryl Streep" });\nconst bill = mirageServer.schema.create("actor", { name: "Bill Murray" });\nconst anjelica = mirageServer.schema.create("actor", {\n  name: "Anjelica Huston",\n});\n\nmirageServer.schema.create("movie", {\n  title: "Fantastic Mr. Fox",\n  actors: [meryl, bill],\n});\nmirageServer.schema.create("movie", {\n  title: "The Life Aquatic with Steve Zissou",\n  actors: [bill, anjelica],\n});\n\nconst graphqlHandler = new GraphQLHandler({\n  middlewares: [mirageMiddleware()],\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst query = graphqlHandler.query(`\n  {\n    movies {\n      title\n      actors {\n        name\n      }\n    }\n  }\n`);\nquery.then((result) => console.log(result));\n')))}c.isMDXComponent=!0;var u={data:{movies:[{title:"Fantastic Mr. Fox",actors:[{name:"Meryl Streep"},{name:"Bill Murray"}]},{title:"The Life Aquatic with Steve Zissou",actors:[{name:"Bill Murray"},{name:"Anjelica Huston"}]}]}},h=["components"],g={toc:[]};function v(e){var n=e.components,t=(0,a.Z)(e,h);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { createServer, Model } from "miragejs";\nimport { extractDependencies } from "graphql-mocks/resolver";\n\nconst mirageServer = createServer({\n  models: {\n    Movie: Model,\n  },\n});\n\nconst graphqlSchema = `\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n\n  type Query {\n    Movie: [Movie!]!\n  }\n\n  type Mutation {\n    # Create mutation\n    addMovie(input: AddMovieInput): Movie!\n  }\n\n  type Movie {\n    id: ID!\n    title: String!\n    style: MovieStyle!\n  }\n\n  input AddMovieInput {\n    title: String!\n    style: MovieStyle!\n  }\n\n  enum MovieStyle {\n    LiveAction\n    StopMotion\n    Animated\n  }\n`;\n\n// Represents the resolverMap with our static Resolver Function\n// using `extractDependencies` to handle the input args and\n// return the added Movie\nconst resolverMap = {\n  Mutation: {\n    addMovie(_root, args, context, _info) {\n      const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n\n      const addedMovie = mirageServer.schema.movies.create({\n        title: args.input.title,\n        style: args.input.style,\n      });\n\n      return addedMovie;\n    },\n  },\n};\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst mutation = handler.query(\n  `\n    mutation($movie: AddMovieInput) {\n      addMovie(input: $movie) {\n        id\n        title\n        style\n      }\n    }\n  `,\n\n  // Pass external variables for the mutation\n  {\n    movie: {\n      title: "Isle of Dogs",\n      style: "StopMotion",\n    },\n  }\n);\nmutation.then((result) => console.log(result));\n')))}v.isMDXComponent=!0;var y={data:{addMovie:{id:"1",title:"Isle of Dogs",style:"StopMotion"}}},k=["components"],M={toc:[]};function f(e){var n=e.components,t=(0,a.Z)(e,k);return(0,i.kt)("wrapper",(0,r.Z)({},M,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { createServer, Model } from "miragejs";\nimport { extractDependencies } from "graphql-mocks/resolver";\n\nconst mirageServer = createServer({\n  models: {\n    movie: Model,\n  },\n});\n\n// Create the movie "The Royal Tenenbaums" in Mirage JS\n// Whoops! It\'s been assigned the wrong year but we can\n// fix this via a GraphQL Mutation\nconst royalTenenbaums = mirageServer.schema.create("movie", {\n  name: "The Royal Tenenbaums",\n  year: "2020",\n});\n\nconst graphqlSchema = `\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n\n  type Query {\n    movies: [Movie!]!\n  }\n\n  type Mutation {\n    # Update\n    updateYear(movieId: ID!, year: String!): Movie!\n  }\n\n  type Movie {\n    id: ID!\n    name: String!\n    year: String!\n  }\n`;\n\nconst resolverMap = {\n  Mutation: {\n    updateYear(_root, args, context, _info) {\n      const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n\n      // lookup and update the year on the movie with args\n      const movie = mirageServer.schema.movies.find(args.movieId);\n      movie.year = args.year;\n      movie.save();\n\n      return movie;\n    },\n  },\n};\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst mutation = handler.query(\n  `\n    mutation($movieId: ID!, $year: String!) {\n      updateYear(movieId: $movieId, year: $year) {\n        id\n        name\n        year\n      }\n    }\n  `,\n\n  // Pass external variables for the mutation\n  {\n    movieId: royalTenenbaums.id, // corresponds with the model we created above\n    year: "2001",\n  }\n);\nmutation.then((result) => console.log(result));\n')))}f.isMDXComponent=!0;var S={data:{updateYear:{id:"1",name:"The Royal Tenenbaums",year:"2001"}}},w=["components"],b={toc:[]};function N(e){var n=e.components,t=(0,a.Z)(e,w);return(0,i.kt)("wrapper",(0,r.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { createServer, Model } from "miragejs";\nimport { extractDependencies } from "graphql-mocks/resolver";\n\nconst mirageServer = createServer({\n  models: {\n    movie: Model,\n  },\n});\n\nconst grandBudapestHotel = mirageServer.schema.create("movie", {\n  title: "The Grand Budapest Hotel",\n});\n\nconst hamilton = mirageServer.schema.create("movie", {\n  title: "Hamilton",\n});\n\nconst graphqlSchema = `\n  schema {\n    query: Query\n    mutation: Mutation\n  }\n\n  type Query {\n    movies: [Movie!]!\n  }\n\n  type Mutation {\n    # Remove\n    removeMovie(movieId: ID!): Movie!\n  }\n\n  type Movie {\n    id: ID!\n    title: String!\n  }\n`;\n\nconst resolverMap = {\n  Mutation: {\n    removeMovie(_root, args, context, _info) {\n      const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n\n      const movie = mirageServer.schema.movies.find(args.movieId);\n      movie.destroy();\n\n      return movie;\n    },\n  },\n};\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst mutation = handler.query(\n  `\n    mutation($movieId: ID!) {\n      removeMovie(movieId: $movieId) {\n        id\n        title\n      }\n    }\n  `,\n\n  // Pass external variables for the mutation\n  {\n    movieId: hamilton.id,\n  }\n);\nmutation.then((result) => console.log(result));\n')))}N.isMDXComponent=!0;var x={data:{removeMovie:{id:"2",title:"Hamilton"}}},T=["components"],q={toc:[]};function C(e){var n=e.components,t=(0,a.Z)(e,T);return(0,i.kt)("wrapper",(0,r.Z)({},q,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { extractDependencies } from "graphql-mocks/resolver";\nimport { mirageMiddleware } from "@graphql-mocks/mirage";\nimport { createServer, Model } from "miragejs";\n\nconst graphqlSchema = `\n  schema {\n    query: Query\n  }\n\n  type Query {\n    movies: [Movie!]!\n  }\n\n  type Movie {\n    name: String!\n  }\n`;\n\nconst mirageServer = createServer({\n  models: {\n    Movie: Model,\n  },\n});\n\nmirageServer.schema.create("movie", {\n  name: "Moonrise Kingdom",\n});\n\nmirageServer.schema.create("movie", {\n  name: "The Darjeeling Limited",\n});\n\nmirageServer.schema.create("movie", {\n  name: "Bottle Rocket",\n});\n\nconst resolverMap = {\n  Query: {\n    movies: (_parent, _args, context, _info) => {\n      const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n      return mirageServer.schema.movies.all().models;\n    },\n  },\n};\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n\n  // Note: the `mirageMiddleware` is only required for handling downstream\n  // mirage relationships from the returned models. Non-relationship\n  // attributes on the model will "just work"\n  middlewares: [mirageMiddleware()],\n\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst query = handler.query(`\n  {\n    movies {\n      name\n    }\n  }\n`);\nquery.then((result) => console.log(result));\n')))}C.isMDXComponent=!0;var L={data:{movies:[{name:"Moonrise Kingdom"},{name:"The Darjeeling Limited"},{name:"Bottle Rocket"}]}},Q=["components"],j={toc:[]};function R(e){var n=e.components,t=(0,a.Z)(e,Q);return(0,i.kt)("wrapper",(0,r.Z)({},j,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"export default `\n  schema {\n    query: Query\n  }\n\n  type Query {\n    person: Person!\n  }\n\n  type Person {\n    favoriteMedium: [Media]!\n  }\n\n  union Media = Movie | TV | Book | Magazine\n\n  interface MovingPicture {\n    title: String!\n    durationInMinutes: Int!\n  }\n\n  interface WrittenMedia {\n    title: String!\n    pageCount: String!\n  }\n\n  type Movie implements MovingPicture {\n    title: String!\n    durationInMinutes: Int!\n    director: String!\n  }\n\n  type TV implements MovingPicture {\n    title: String!\n    episode: String!\n    durationInMinutes: Int!\n    network: String!\n  }\n\n  type Book implements WrittenMedia {\n    title: String!\n    author: String!\n    pageCount: String!\n  }\n\n  type Magazine implements WrittenMedia {\n    title: String!\n    issue: String!\n    pageCount: String!\n  }\n`;\n")))}R.isMDXComponent=!0;var D=["components"],G={toc:[]};function I(e){var n=e.components,t=(0,a.Z)(e,D);return(0,i.kt)("wrapper",(0,r.Z)({},G,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { mirageMiddleware } from "@graphql-mocks/mirage";\nimport { createServer, Model, hasMany } from "miragejs";\nimport { extractDependencies } from "graphql-mocks/resolver";\nimport graphqlSchema from "./abstract-type-schema.source";\n\nconst mirageServer = createServer({\n  models: {\n    Person: Model.extend({\n      // represent the abstract type with a polymorphic relationship\n      favoriteMedium: hasMany({ polymorphic: true }),\n    }),\n\n    // model definition exists for each discrete type\n    Movie: Model.extend(),\n    TV: Model.extend(),\n    Book: Model.extend(),\n    Magazine: Model.extend(),\n  },\n});\n\nconst movie = mirageServer.schema.create("movie", {\n  title: "The Darjeeling Limited",\n  durationInMinutes: 104,\n  director: "Wes Anderson",\n});\n\nconst tv = mirageServer.schema.create("tv", {\n  title: "Malcolm in the Middle",\n  episode: "Rollerskates",\n  network: "Fox",\n  durationInMinutes: 24,\n});\n\nconst book = mirageServer.schema.create("book", {\n  title: "The Hobbit, or There and Back Again",\n  author: "J.R.R. Tolkien",\n  pageCount: 310,\n});\n\nconst magazine = mirageServer.schema.create("magazine", {\n  title: "Lighthouse Digest",\n  issue: "May/June 2020",\n  pageCount: 42,\n});\n\nmirageServer.schema.create("person", {\n  favoriteMedium: [movie, tv, book, magazine],\n});\n\nconst graphqlHandler = new GraphQLHandler({\n  resolverMap: {\n    Query: {\n      person(_parent, _args, context) {\n        const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n        return mirageServer.schema.people.first();\n      },\n    },\n  },\n\n  middlewares: [mirageMiddleware()],\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst query = graphqlHandler.query(`\n  {\n    person {\n      favoriteMedium {\n        __typename\n\n        ... on MovingPicture {\n          title\n          durationInMinutes\n        }\n\n        ... on Movie {\n          director\n        }\n\n        ... on TV {\n          episode\n          network\n        }\n\n        ... on WrittenMedia {\n          title\n          pageCount\n        }\n\n        ... on Book {\n          author\n        }\n\n        ... on Magazine {\n          issue\n        }\n      }\n    }\n  }\n`);\nquery.then((result) => console.log(result));\n')))}I.isMDXComponent=!0;var H={data:{person:{favoriteMedium:[{title:"The Darjeeling Limited",director:"Wes Anderson",durationInMinutes:104,__typename:"Movie"},{title:"Malcolm in the Middle",durationInMinutes:24,episode:"Rollerskates",network:"Fox",__typename:"TV"},{title:"The Hobbit, or There and Back Again",author:"J.R.R. Tolkien",pageCount:"310",__typename:"Book"},{title:"Lighthouse Digest",issue:"May/June 2020",pageCount:"42",__typename:"Magazine"}]}}},A=["components"],_={toc:[]};function P(e){var n=e.components,t=(0,a.Z)(e,A);return(0,i.kt)("wrapper",(0,r.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLHandler } from "graphql-mocks";\nimport { mirageMiddleware } from "@graphql-mocks/mirage";\nimport { createServer, Model, hasMany } from "miragejs";\nimport { extractDependencies } from "graphql-mocks/resolver";\nimport graphqlSchema from "./abstract-type-schema.source";\n\nconst mirageServer = createServer({\n  models: {\n    Person: Model.extend({\n      favoriteMedium: hasMany("media"),\n    }),\n\n    // using a single model to represent _all_ the concrete types\n    Media: Model.extend(),\n  },\n});\n\n// All models created are for "media", but have their\n// concrete type specified via __typename\n\nconst movie = mirageServer.schema.create("media", {\n  title: "The Darjeeling Limited",\n  durationInMinutes: 104,\n  director: "Wes Anderson",\n  __typename: "Movie",\n});\n\nconst tvShow = mirageServer.schema.create("media", {\n  title: "Malcolm in the Middle",\n  episode: "Rollerskates",\n  network: "Fox",\n  durationInMinutes: 24,\n  __typename: "TV",\n});\n\nconst book = mirageServer.schema.create("media", {\n  title: "The Hobbit, or There and Back Again",\n  author: "J.R.R. Tolkien",\n  pageCount: 310,\n  __typename: "Book",\n});\n\nconst magazine = mirageServer.schema.create("media", {\n  title: "Lighthouse Digest",\n  issue: "May/June 2020",\n  pageCount: 42,\n  __typename: "Magazine",\n});\n\nmirageServer.schema.create("person", {\n  favoriteMedium: [movie, tvShow, book, magazine],\n});\n\nconst graphqlHandler = new GraphQLHandler({\n  resolverMap: {\n    Query: {\n      person(_parent, _args, context) {\n        const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n        return mirageServer.schema.people.first();\n      },\n    },\n  },\n\n  middlewares: [mirageMiddleware()],\n  dependencies: {\n    graphqlSchema,\n    mirageServer,\n  },\n});\n\nconst query = graphqlHandler.query(`\n  {\n    person {\n      favoriteMedium {\n        __typename\n\n        ... on MovingPicture {\n          title\n          durationInMinutes\n        }\n\n        ... on Movie {\n          director\n        }\n\n        ... on TV {\n          episode\n          network\n        }\n\n        ... on WrittenMedia {\n          title\n          pageCount\n        }\n\n        ... on Book {\n          author\n        }\n\n        ... on Magazine {\n          issue\n        }\n      }\n    }\n  }\n`);\nquery.then((result) => console.log(result));\n')))}P.isMDXComponent=!0;var J=["components"],O={id:"mirage-js",title:"Mirage JS"},E=void 0,F={unversionedId:"guides/mirage-js",id:"guides/mirage-js",title:"Mirage JS",description:"Mirage JS is a great tool that makes mocking resources backed by RESTful APIs easier. One of the main benefits",source:"@site/docs/guides/mirage-js.mdx",sourceDirName:"guides",slug:"/guides/mirage-js",permalink:"/docs/guides/mirage-js",draft:!1,tags:[],version:"current",frontMatter:{id:"mirage-js",title:"Mirage JS"},sidebar:"docs",previous:{title:"Automatic Mocking with Fake Data using Falso",permalink:"/docs/guides/fake-data"}},B={},W=[{value:"Installation",id:"installation",level:2},{value:"Mirage JS Auto Resolvers Middleware",id:"mirage-js-auto-resolvers-middleware",level:2},{value:"How Mirage JS &amp; Auto Resolving works",id:"how-mirage-js--auto-resolving-works",level:2},{value:"Interface and Union Types",id:"interface-and-union-types",level:2},{value:"One Model per Abstract Type",id:"one-model-per-abstract-type",level:3},{value:"One Model per Concrete Type",id:"one-model-per-concrete-type",level:3},{value:"Mock the GraphQL Endpoint using Mirage JS Route Handlers",id:"mock-the-graphql-endpoint-using-mirage-js-route-handlers",level:2},{value:"Relay Pagination",id:"relay-pagination",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Query",id:"basic-query",level:3},{value:"Mutations (Create, Update, Delete)",id:"mutations-create-update-delete",level:3},{value:"Create Example with Input Variables",id:"create-example-with-input-variables",level:4},{value:"Update Example",id:"update-example",level:4},{value:"Delete Example",id:"delete-example",level:4},{value:"Static Resolver Functions",id:"static-resolver-functions",level:3},{value:"Comparison with <code>miragejs/graphql</code>",id:"comparison-with-miragejsgraphql",level:2}],Z={toc:W};function X(e){var n=e.components,t=(0,a.Z)(e,J);return(0,i.kt)("wrapper",(0,r.Z)({},Z,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://miragejs.com/"},"Mirage JS")," is a great tool that makes mocking ",(0,i.kt)("em",{parentName:"p"},"resources")," backed by RESTful APIs easier. One of the main benefits\nof Mirage JS is that it provides a full in-memory database and ORM. This allows for mocked queries to be backed by\nstateful data, much like GraphQL Paper."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," If starting a new project it's recommended to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/paper/introducing-paper"},"GraphQL Paper"),"\nsince it is based on the GraphQL Schema and is GraphQL-first in mocking data, along with ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-mocks"),". If a project is already using Mirage JS\nthen this guide will help adopt it for use with GraphQL using ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," and its tools."),(0,i.kt)("p",null,'This library provides a few ways that to extend GraphQL with Mirage JS including "Auto Resolvers" or by using Mirage JS\nwithin resolver functions, or a combination of both.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"pathname:///api/mirage"},"API documentation for ",(0,i.kt)("inlineCode",{parentName:"a"},"@graphql-mocks/mirage")))),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Install Mirage JS and the complementary ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/mirage")," package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install --save-dev miragejs @graphql-mocks/mirage\n\n# yarn\nyarn add --dev miragejs @graphql-mocks/mirage\n")),(0,i.kt)("h2",{id:"mirage-js-auto-resolvers-middleware"},"Mirage JS Auto Resolvers Middleware"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageMiddleware")," will fill the Resolver Map with Auto Resolvers where resolvers do not already exist, unless\n",(0,i.kt)("inlineCode",{parentName:"p"},"replace")," option is provided. To control where resolvers are applied, specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," option. The Middleware\nsimply applies two types of resolvers to the Resolver Map: A Type Resolver for Abstract Types (Unions and Interfaces)\nand a Field Resolver for fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { GraphQLHandler } from 'graphql-mocks';\nimport { mirageMiddleware } from '@graphql-mocks/mirage';\n\nconst handler = new GraphQLHandler({\n  middlewares: [mirageMiddleware()],\n  dependencies: {\n    mirageServer,\n    graphqlSchema,\n  },\n});\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mirageServer")," is a required dependency for this middleware.")),(0,i.kt)("p",null,"Additional options on the ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageMiddleware")," include:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mirageMiddleware({\n  highlight: HighlightableOption,\n  replace: boolean,\n});\n")),(0,i.kt)("h2",{id:"how-mirage-js--auto-resolving-works"},"How Mirage JS & Auto Resolving works"),(0,i.kt)("p",null,"Mirage JS can be setup where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Models and Relationships map to GraphQL types"),(0,i.kt)("li",{parentName:"ul"},"Model attributes map to fields on GraphQL types")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Person {\n  name: String\n  family: [Person!]!\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { Model, hasMany } from 'miragejs';\n\nModel.create({\n  family: hasMany('person'),\n});\n")),(0,i.kt)("p",null,"Associations between models reflect the relationships between GraphQL types. Relationships will be automatically\nresolved based on the matching naming between Mirage JS models and GraphQL types. This provides the basis for the auto\nresolving a GraphQL query. Auto Resolvers are applied to a Resolver map via the ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageMiddlware")," or can be imported\nindividually if required."),(0,i.kt)("h2",{id:"interface-and-union-types"},"Interface and Union Types"),(0,i.kt)("p",null,"GraphQL Union and Interface are ",(0,i.kt)("em",{parentName:"p"},"Abstract Types")," that represent concrete types. The ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageMiddleware")," Type Resolver\nprovides two different strategies for resolving and modeling Abstract Types in Mirage. Both have their pros/cons and the\nbest fit will depend on the use case. The accompanying examples are a bit verbose but demonstrate the extent of setting\nup these use cases. Both are setup with the same GraphQL Schema, query and return the same result. The ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename")," has\nbeen queried also to show the resolved discrete type."),(0,i.kt)("p",null,"The GraphQL Schema for these examples is:"),(0,i.kt)(R,{mdxType:"AbstractTypeSchema"}),(0,i.kt)("p",null,"This GraphQL schema has the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Four GraphQL Concrete Types: ",(0,i.kt)("inlineCode",{parentName:"li"},"Movie"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"TV"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Book"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"Magazine")),(0,i.kt)("li",{parentName:"ul"},"All four Concrete types are in a GraphQL Union called ",(0,i.kt)("inlineCode",{parentName:"li"},"Media")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Movie")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"TV")," implement a ",(0,i.kt)("inlineCode",{parentName:"li"},"MovingPicture")," interface"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Book")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Magazine")," implement a ",(0,i.kt)("inlineCode",{parentName:"li"},"WrittenMedia")," interface")),(0,i.kt)("h3",{id:"one-model-per-abstract-type"},"One Model per Abstract Type"),(0,i.kt)("p",null,"In this case a Mirage model (",(0,i.kt)("inlineCode",{parentName:"p"},"Media"),") is setup for the Abstract type itself, and instances specify their concrete type\nby the ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename")," attribute on the model, like ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename: 'Movie'"),". This option is easier and faster to setup but\ncan become harder to manage and requires remembering to specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename")," model attribute on each instance\ncreated."),(0,i.kt)(P,{mdxType:"AbstractTypeWithTypenameExample"}),(0,i.kt)(o.u,{result:H,mdxType:"GraphQLResult"}),(0,i.kt)("h3",{id:"one-model-per-concrete-type"},"One Model per Concrete Type"),(0,i.kt)("p",null,"This option allows for each discrete type to be represented by its own Mirage Model definition. A relationship attribute\nthat can hold an Abstract type should specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"{ polymorphic: true }")," option on the\n",(0,i.kt)("a",{parentName:"p",href:"https://miragejs.com/docs/main-concepts/relationships/#polymorphic"},"relationship definition"),". This option sets up for\ndistinct definitions but can also be more verbose."),(0,i.kt)(I,{mdxType:"AbstractTypeWithDiscreteModelsExample"}),(0,i.kt)(o.u,{result:H,mdxType:"GraphQLResult"}),(0,i.kt)("h2",{id:"mock-the-graphql-endpoint-using-mirage-js-route-handlers"},"Mock the GraphQL Endpoint using Mirage JS Route Handlers"),(0,i.kt)("p",null,"A GraphQL handler handles the mocked responses for GraphQL queries and mutations. However, GraphQL is agnostic to the\nnetwork transport layer. Typically, GraphQL clients do use HTTP and luckily Mirage JS comes with out-of-the-box XHR\ninterception and route handlers to mock this as well. GraphQL API Servers operate on a single endpoint for a query so\nonly one route handler is needed. Migrating to other mocked networking methods later is easy as well."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"createRouteHandler")," to get setup with a mocked GraphQL endpoint. Specify the same options as the ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLHandler"),"\nconstructor or specify a ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLHandler")," instance. This example sets up a GraphQLHandler on the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql")," route."),(0,i.kt)(p,{mdxType:"RouteHandlerExample"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MirageServer")," instance can be referenced by ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," within the ",(0,i.kt)("inlineCode",{parentName:"p"},"routes()")," function and must be passed in as the\n",(0,i.kt)("inlineCode",{parentName:"p"},"mirageServer")," dependency. See the\n",(0,i.kt)("a",{parentName:"p",href:"https://miragejs.com/docs/main-concepts/route-handlers/"},"Mirage JS route handlers documentation")," for more information\nabout mocking HTTP endpoints with route handlers."),(0,i.kt)("p",null,"Note: The rest of the examples skip this part and focus on ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," and Mirage JS configuration and examples."),(0,i.kt)("h2",{id:"relay-pagination"},"Relay Pagination"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"relayWrapper")," for quick relay pagination. It must be ",(0,i.kt)("em",{parentName:"p"},"after")," the Mirage JS Middleware. The ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/mirage")," package\nprovides a ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageCursorForNode")," function to be used for the required ",(0,i.kt)("inlineCode",{parentName:"p"},"cursorForNode")," argument."),(0,i.kt)("p",null,"Check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/relay-pagination"},"Relay Wrapper documentation")," for more details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { GraphQLHandler } from 'graphql-mocks';\nimport { mirageCursorForNode } from '@graphql-mocks/mirage';\n\nconst handler = new GraphQLHandler({\n  middlewares: [\n    mirageMiddleware(),\n    embed({\n      wrappers: [\n        relayWrapper({ cursorForNode: mirageCursorForNode })\n      ]\n    })\n  ],\n  dependencies: {\n    mirageServer,\n    graphqlSchema,\n  },\n});\n")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"basic-query"},"Basic Query"),(0,i.kt)("p",null,"This example shows the result of querying with Auto Resolvers against Mirage Models with relationships (between a Wizard\nand their spells). It uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageMiddlware")," middlware, sets up dependencies and runs a query. The mutations will\npersist as part of Mirage JS's in-memory database for future mutations and queries."),(0,i.kt)(c,{mdxType:"BasicExample"})," ",(0,i.kt)(o.u,{result:u,mdxType:"GraphQLResult"}),(0,i.kt)("h3",{id:"mutations-create-update-delete"},"Mutations (Create, Update, Delete)"),(0,i.kt)("p",null,"GraphQL Mutations can be done with static resolvers and a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"mirageServer")," dependency using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"extractDependencies")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'resolverFunction: function(root, args, context, info) {\n  const { mirageServer } = extractDependencies(context, ["mirageServer"]);\n}\n')),(0,i.kt)("h4",{id:"create-example-with-input-variables"},"Create Example with Input Variables"),(0,i.kt)("p",null,"This example creates a new instance of a Wizard model on the Mirage JS using a GraphQL Input Type."),(0,i.kt)(v,{mdxType:"MutationCreateExample"})," ",(0,i.kt)(o.u,{result:y,mdxType:"GraphQLResult"}),(0,i.kt)("h4",{id:"update-example"},"Update Example"),(0,i.kt)("p",null,"In this example Voldemort, Tom Riddle, has mistakenly been put into the wrong Hogwarts house. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateHouse"),"\nmutation will take his Model ID, the correct House, and return the updated data. The ",(0,i.kt)("inlineCode",{parentName:"p"},"resolverMap")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"updateHouse"),"\nResolver Function that will handle this mutation and update the within Mirage JS."),(0,i.kt)(f,{mdxType:"MutationUpdateExample"})," ",(0,i.kt)(o.u,{result:S,mdxType:"GraphQLResult"}),(0,i.kt)("h4",{id:"delete-example"},"Delete Example"),(0,i.kt)("p",null,"Removing Voldemort's entry in the Mirage JS database can be done through a ",(0,i.kt)("inlineCode",{parentName:"p"},"removeWizard")," mutation. The ",(0,i.kt)("inlineCode",{parentName:"p"},"resolverMap"),"\nhas a ",(0,i.kt)("inlineCode",{parentName:"p"},"removeWizard")," Resolver Function that will handle this mutation and update the within Mirage JS."),(0,i.kt)(N,{mdxType:"MutationDeleteExample"})," ",(0,i.kt)(o.u,{result:x,mdxType:"GraphQLResult"}),(0,i.kt)("h3",{id:"static-resolver-functions"},"Static Resolver Functions"),(0,i.kt)("p",null,"Mirage JS can be used directly in static Resolver Functions in a Resolver Map by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"extractDependencies"),"\nutility. This technique can be with ",(0,i.kt)("a",{parentName:"p",href:"#mutations-create-update-delete"},"Mutations"),", and Query Resolver Functions to bypass\nAuto Resolving while still having access to Mirage. This is usually done when fine-grained control is needed."),(0,i.kt)(C,{mdxType:"StaticResolverExample"})," ",(0,i.kt)(o.u,{result:L,mdxType:"GraphQLResult"}),(0,i.kt)("h2",{id:"comparison-with-miragejsgraphql"},"Comparison with ",(0,i.kt)("inlineCode",{parentName:"h2"},"miragejs/graphql")),(0,i.kt)("p",null,"Mirage JS has a GraphQL solution, ",(0,i.kt)("inlineCode",{parentName:"p"},"miragejs/graphql"),", that leverages mirage & graphql automatic mocking and sets up\nmodels on the mirage schema automatically. ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-mocks")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphql-mocks/mirage ")," do a few things differently\nthan ",(0,i.kt)("inlineCode",{parentName:"p"},"miragejs/graphql"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This library focuses on providing a flexible GraphQL-first mocking experience using Middlewares and Wrappers, and\nmainly uses Mirage JS as a stateful store. While Mirage JS focuses on mocking REST and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"@miragejs/graphql")," as an\nextension to provide GraphQL resolving."),(0,i.kt)("li",{parentName:"ul"},"This library also does not apply automatic filtering like ",(0,i.kt)("inlineCode",{parentName:"li"},"@miragejs/graphql")," as this tends to be highly specific to\nthe individual GraphQL API. The same result, however, can be achieved by using a Resolver Wrapper, see\n",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/automatic-filtering"},"Automatic Filtering with Wrappers")," for examples."),(0,i.kt)("li",{parentName:"ul"},"This library currently does not setup the Mirage JS Schema with Models and relationships based on the GraphQL Schema\nbut aims at adding this as a configuration option in the future (PRs are welcome).")))}X.isMDXComponent=!0},30876:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(t),u=a,h=c["".concat(l,".").concat(u)]||c[u]||d[u]||i;return t?r.createElement(h,o(o({ref:n},m),{},{components:t})):r.createElement(h,o({ref:n},m))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);