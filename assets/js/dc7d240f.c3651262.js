"use strict";(self.webpackChunk_graphql_mocks_docs=self.webpackChunk_graphql_mocks_docs||[]).push([[5405],{58629:function(e,r,n){n.r(r),n.d(r,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=n(28427),t=n(84397),l=(n(2784),n(30876)),i=["components"],o={title:"Managing Resolvers with Middlewares"},s=void 0,p={unversionedId:"resolver-map/managing-resolvers",id:"resolver-map/managing-resolvers",title:"Managing Resolvers with Middlewares",description:"Adding and Managing Resolvers on a Resolver Map is a common task when setting up different scenarios. This library provides two Resolver Map Middleware functions to make this easy, embed and layer, both which can apply Resolver Wrappers.",source:"@site/docs/resolver-map/managing-resolvers.md",sourceDirName:"resolver-map",slug:"/resolver-map/managing-resolvers",permalink:"/docs/resolver-map/managing-resolvers",draft:!1,tags:[],version:"current",frontMatter:{title:"Managing Resolvers with Middlewares"},sidebar:"docs",previous:{title:"Introducing Resolver Map Middlewares",permalink:"/docs/resolver-map/introducing-middlewares"},next:{title:"Available Middlewares",permalink:"/docs/resolver-map/available-middlewares"}},d={},c=[{value:"Using <code>layer</code> and <code>embed</code> with <code>GraphQLHandler</code>",id:"using-layer-and-embed-with-graphqlhandler",level:2},{value:"Using <code>embed</code>",id:"using-embed",level:2},{value:"Add Resolver",id:"add-resolver",level:3},{value:"Add Resolver with a Resolver Wrapper",id:"add-resolver-with-a-resolver-wrapper",level:3},{value:"Add Resolver Replacing Existing",id:"add-resolver-replacing-existing",level:3},{value:"Wrap Existing Resolvers with Resolver Wrappers",id:"wrap-existing-resolvers-with-resolver-wrappers",level:3},{value:"Using <code>layer</code>",id:"using-layer",level:2},{value:"Adding Resolve Map Partials",id:"adding-resolve-map-partials",level:3},{value:"Adding Resolvers with Resolver Wrappers",id:"adding-resolvers-with-resolver-wrappers",level:3},{value:"Replace Existing Resolvers",id:"replace-existing-resolvers",level:3}],u={toc:c};function m(e){var r=e.components,n=(0,t.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Adding and Managing Resolvers on a Resolver Map is a common task when setting up different scenarios. This library provides two Resolver Map Middleware functions to make this easy, ",(0,l.kt)("inlineCode",{parentName:"p"},"embed")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"layer"),", both which can apply ",(0,l.kt)("a",{parentName:"p",href:"/docs/resolver/introducing-wrappers"},"Resolver Wrappers"),"."),(0,l.kt)("h2",{id:"using-layer-and-embed-with-graphqlhandler"},"Using ",(0,l.kt)("inlineCode",{parentName:"h2"},"layer")," and ",(0,l.kt)("inlineCode",{parentName:"h2"},"embed")," with ",(0,l.kt)("inlineCode",{parentName:"h2"},"GraphQLHandler")),(0,l.kt)("p",null,"The generated Resolver Map Middleware from ",(0,l.kt)("inlineCode",{parentName:"p"},"embed")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"layer")," create Resolver Map Middlewares that most often used with ",(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLHandler")," and its ",(0,l.kt)("inlineCode",{parentName:"p"},"middlewares")," option."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const embeddedMiddleware = embed(/*...*/);\nconst layeredMiddleware = layer(/*...*/);\n\nconst handler = new GraphQLHandler({\n  resolverMap,\n  middlewares: [embeddedMiddleware, layeredMiddleware],\n});\n")),(0,l.kt)("h2",{id:"using-embed"},"Using ",(0,l.kt)("inlineCode",{parentName:"h2"},"embed")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"embed")," is commonly used to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Target specific parts of the Resolver Map with ",(0,l.kt)("a",{parentName:"li",href:"/docs/highlight/introducing-highlight"},"Highlight")),(0,l.kt)("li",{parentName:"ul"},"Add a Resolver with or without Resolver Wrappers"),(0,l.kt)("li",{parentName:"ul"},"Target existing Resolvers already on the Resolver Map with Resolver Wrappers")),(0,l.kt)("h3",{id:"add-resolver"},"Add Resolver"),(0,l.kt)("p",null,"Adds a resolver on the ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," field on the ",(0,l.kt)("inlineCode",{parentName:"p"},"Query")," type, using a highlight callback that provides a highlight instance. See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/highlight/creating-highlighters"},"available highlighters")," for more options on targeting the schema."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = embed({\n  resolver: resolverToEmbed,\n  highlight: (h) => h.include(field(['Query', 'users'])),\n});\n")),(0,l.kt)("h3",{id:"add-resolver-with-a-resolver-wrapper"},"Add Resolver with a Resolver Wrapper"),(0,l.kt)("p",null,"Wrappers can be applied to the resolver being embedded, also. This example passes ",(0,l.kt)("inlineCode",{parentName:"p"},"fooWrapper")," in an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"wrappers")," that are applied in order by the ",(0,l.kt)("inlineCode",{parentName:"p"},"wrappers")," option on `embed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = embed({\n  resolver: resolverToEmbed,\n  highlight: (h) => h.include(field(['Query', 'users'])),\n  wrappers: [fooWrapper]\n});\n")),(0,l.kt)("h3",{id:"add-resolver-replacing-existing"},"Add Resolver Replacing Existing"),(0,l.kt)("p",null,"Pass ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"replace")," option to replace any existing resolvers that might exist on the Resolver Map."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = embed({\n  resolver: resolverToEmbed,\n  replace: true,\n});\n")),(0,l.kt)("h3",{id:"wrap-existing-resolvers-with-resolver-wrappers"},"Wrap Existing Resolvers with Resolver Wrappers"),(0,l.kt)("p",null,"By not specifying a resolver, the ",(0,l.kt)("inlineCode",{parentName:"p"},"highlight")," option will be used to select existing Resolvers and apply the the Resolver Wrappers passed into the ",(0,l.kt)("inlineCode",{parentName:"p"},"wrappers")," option."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = embed({\n  highlight: (h) => h.include(field(['Query', 'users'])),\n  wrappers: [fooWrapper]\n});\n")),(0,l.kt)("h2",{id:"using-layer"},"Using ",(0,l.kt)("inlineCode",{parentName:"h2"},"layer")),(0,l.kt)("p",null,"Take fragments, or Resolver Map partials, and layer one or more lazily into a Resolver Map with the generated Resolver Map Middleware. These Resolver Map Partials can be defined separately and combined as needed with ",(0,l.kt)("inlineCode",{parentName:"p"},"layer"),"."),(0,l.kt)("h3",{id:"adding-resolve-map-partials"},"Adding Resolve Map Partials"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const queryPersonPartial = {\n  Query: {\n    person: queryPersonResolver\n  },\n};\n\nconst mutationAddPersonPartial = {\n  Mutation: {\n    addPerson: mutationAddPersonResolver\n  }\n}\n\nconst middleware = layer([queryPersonPartial, mutationAddPersonPartial]);\n")),(0,l.kt)("p",null,"The resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"middleware")," in this example would lazily apply the ",(0,l.kt)("inlineCode",{parentName:"p"},"queryPersonPartial"),", then the ",(0,l.kt)("inlineCode",{parentName:"p"},"mutationAddPersonPartial")," via the generated Resolver Map Middleware."),(0,l.kt)("h3",{id:"adding-resolvers-with-resolver-wrappers"},"Adding Resolvers with Resolver Wrappers"),(0,l.kt)("p",null,"Additionally, the Resolvers that are being layered in can also be wrapped with Resolver Wrappers by passing a ",(0,l.kt)("inlineCode",{parentName:"p"},"wrappers")," option on the second argument to ",(0,l.kt)("inlineCode",{parentName:"p"},"layer"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = layer(\n  [resolverMapPartial],\n  { wrappers: [fooWrapper, barWrapper] },\n);\n")),(0,l.kt)("h3",{id:"replace-existing-resolvers"},"Replace Existing Resolvers"),(0,l.kt)("p",null,"As a safeguard, by default, resolver being added by ",(0,l.kt)("inlineCode",{parentName:"p"},"layer")," won't replace existing resolvers unless the ",(0,l.kt)("inlineCode",{parentName:"p"},"replace")," true option is provided."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const middleware = layer(\n  [resolverMapPartial],\n  { replace: true },\n);\n")))}m.isMDXComponent=!0},30876:function(e,r,n){n.d(r,{Zo:function(){return d},kt:function(){return m}});var a=n(2784);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,a,t=function(e,r){if(null==e)return{};var n,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=a.createContext({}),p=function(e){var r=a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=p(e.components);return a.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},u=a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=t,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(h,i(i({ref:r},d),{},{components:n})):a.createElement(h,i({ref:r},d))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);