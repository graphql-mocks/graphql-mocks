(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{126:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return d})),t.d(n,"MDXProvider",(function(){return u})),t.d(n,"mdx",(function(){return f})),t.d(n,"useMDXComponents",(function(){return m})),t.d(n,"withMDXComponents",(function(){return p}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),p=function(e){return function(n){var t=m(n.components);return r.a.createElement(e,i({},n,{components:t}))}},m=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=m(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(t),p=a,u=d["".concat(i,".").concat(p)]||d[p]||h[p]||o;return t?r.a.createElement(u,s(s({ref:n},c),{},{components:t})):r.a.createElement(u,s({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},60:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return d}));var a=t(2),r=t(7),o=(t(0),t(126)),i={id:"technical-notes",title:"Technical Notes"},c={unversionedId:"paper/technical-notes",id:"paper/technical-notes",isDocsHomePage:!1,title:"Technical Notes",description:"Storage & Immutability",source:"@site/docs/paper/technical-notes.md",slug:"/paper/technical-notes",permalink:"/docs/paper/technical-notes",version:"current",sidebar:"docs",previous:{title:"Validations",permalink:"/docs/paper/validations"},next:{title:"Generating Data with Factories",permalink:"/docs/paper/guides/factories"}},s=[{value:"Storage &amp; Immutability",id:"storage--immutability",children:[]},{value:"Documents",id:"documents",children:[{value:"Document Key",id:"document-key",children:[]},{value:"Connections",id:"connections",children:[]},{value:"GraphQL Type Name",id:"graphql-type-name",children:[]}]},{value:"Transaction Lifecycle",id:"transaction-lifecycle",children:[]},{value:"Connection Lookup, Expansion and Collapsing",id:"connection-lookup-expansion-and-collapsing",children:[]},{value:"<code>nullDocument</code>",id:"nulldocument",children:[]},{value:"Performance",id:"performance",children:[]}],l={rightToc:s};function d(e){var n=e.components,t=Object(r.default)(e,["components"]);return Object(o.mdx)("wrapper",Object(a.default)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h2",{id:"storage--immutability"},"Storage & Immutability"),Object(o.mdx)("p",null,"GraphQL Paper uses ",Object(o.mdx)("inlineCode",{parentName:"p"},"immer")," under the hood to be able to handle changes and optimize sharing references for unchanged portions in an object tree. ",Object(o.mdx)("inlineCode",{parentName:"p"},"Document"),"s and ",Object(o.mdx)("inlineCode",{parentName:"p"},"DocumentStore"),"s are considered stale-on-arrival which means they should not be directly edited. There are safeguards in place that try and prevent editing a document or store outside of a ",Object(o.mdx)("em",{parentName:"p"},"Mutate Transaction"),". This immutability also allows versioning the ",Object(o.mdx)("inlineCode",{parentName:"p"},"DocumentStore")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"Document"),"s. Comparing different versions of documents is also possible based on their Document Keys."),Object(o.mdx)("h2",{id:"documents"},"Documents"),Object(o.mdx)("p",null,"Documents have a few hidden symboled properties that assist with tracking some internal state:"),Object(o.mdx)("h3",{id:"document-key"},"Document Key"),Object(o.mdx)("p",null,"Document Keys are uniquely generated string at the time a document is created. It is an internal identifier or reference used by the library to be able to track and reference a document across versions. This leaves any ",Object(o.mdx)("inlineCode",{parentName:"p"},"ID"),' fields on a GraphQL type as data in "user land" although GraphQL Paper does provide a validator to check that ',Object(o.mdx)("inlineCode",{parentName:"p"},"ID"),"s on fields are unique within a type."),Object(o.mdx)("h3",{id:"connections"},"Connections"),Object(o.mdx)("p",null,"Connections for a document are stored as an array of document keys (strings) representing the documents they are connected to."),Object(o.mdx)("h3",{id:"graphql-type-name"},"GraphQL Type Name"),Object(o.mdx)("p",null,'Documents are "typed" by a GraphQL type. The type is registered when a document is created and should never change.'),Object(o.mdx)("h2",{id:"transaction-lifecycle"},"Transaction Lifecycle"),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"Call ",Object(o.mdx)("inlineCode",{parentName:"li"},"mutate")," with a ",Object(o.mdx)("em",{parentName:"li"},"Mutate Transaction")," callback"),Object(o.mdx)("li",{parentName:"ol"},"Any previous transactions are waited to finish, in order, before the provided the transaction can run"),Object(o.mdx)("li",{parentName:"ol"},"Expand connections so that properties references the appropriate connected documents"),Object(o.mdx)("li",{parentName:"ol"},"Run ",Object(o.mdx)("inlineCode",{parentName:"li"},"beforeTransaction")," hooks"),Object(o.mdx)("li",{parentName:"ol"},"Call the transaction callback using ",Object(o.mdx)("inlineCode",{parentName:"li"},"immer")),Object(o.mdx)("li",{parentName:"ol"},"Run ",Object(o.mdx)("inlineCode",{parentName:"li"},"afterTransaction")," hooks"),Object(o.mdx)("li",{parentName:"ol"},"Capture any returned documents as represented by their keys"),Object(o.mdx)("li",{parentName:"ol"},"Collapse connections so that references are stashed by their document key"),Object(o.mdx)("li",{parentName:"ol"},"Run validations on new version created by ",Object(o.mdx)("inlineCode",{parentName:"li"},"immer")),Object(o.mdx)("li",{parentName:"ol"},"Determine which events can be created by comparing new and old versions of the store"),Object(o.mdx)("li",{parentName:"ol"},"Dispatch store events and custom events"),Object(o.mdx)("li",{parentName:"ol"},"Set new version as the current"),Object(o.mdx)("li",{parentName:"ol"},"Push the new version on to the history"),Object(o.mdx)("li",{parentName:"ol"},"Return transaction captured keys as frozen Documents for the ",Object(o.mdx)("inlineCode",{parentName:"li"},"mutate")," call")),Object(o.mdx)("h2",{id:"connection-lookup-expansion-and-collapsing"},"Connection Lookup, Expansion and Collapsing"),Object(o.mdx)("p",null,"When accessing Documents outside of a ",Object(o.mdx)("em",{parentName:"p"},"Mutate Transaction")," the documents are wrapped in a proxy to assist with lookups of connections and to prevent document properties from being mutated outside a ",Object(o.mdx)("em",{parentName:"p"},"Mutate Transaction"),". The proxy also has a reference to the copy of the store when the document is retrieved ensuring that any connections looked up will also be ",Object(o.mdx)("em",{parentName:"p"},"frozen")," at the same point in time."),Object(o.mdx)("p",null,"Before a transaction can occur each document has its connections expanded from document properties by the array of document keys to references to the other documents. If the field supports a GraphQL List type then the documents are represented as an array of Documents."),Object(o.mdx)("p",null,"After a transaction any document properties that have references are collapsed into an internal array for connections, being stored as document keys."),Object(o.mdx)("h2",{id:"nulldocument"},Object(o.mdx)("inlineCode",{parentName:"h2"},"nullDocument")),Object(o.mdx)("p",null,"Since GraphQL has a concept of nullable lists, that is lists that contain null, and connections are represented by documents there is a special reserved ",Object(o.mdx)("inlineCode",{parentName:"p"},"nullDocument")," used in storing lists that contain null. This is a special case and not something that normally crops up during average usage and is kept relatively hidden in the library but would be important to consider when writing a custom validator that needs to check connections. During expansion of connections ",Object(o.mdx)("inlineCode",{parentName:"p"},"nullDocuments")," in lists are represented by ",Object(o.mdx)("inlineCode",{parentName:"p"},"null")," values and when collapsed the proxy ensures that any lists containing ",Object(o.mdx)("inlineCode",{parentName:"p"},"nullDocuments")," are represented by ",Object(o.mdx)("inlineCode",{parentName:"p"},"null")," also."),Object(o.mdx)("h2",{id:"performance"},"Performance"),Object(o.mdx)("p",null,'Because GraphQL Paper handles everything "in memory" as javascript data structures it should be relatively quick for most use cases. If there is a case where it is slow please open an issue on github. There are some low-hanging fruit but also a desire to avoid early over optimizations.'))}d.isMDXComponent=!0}}]);