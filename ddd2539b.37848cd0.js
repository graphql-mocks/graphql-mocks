(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{134:function(e,t,r){"use strict";r.r(t),r.d(t,"MDXContext",(function(){return d})),r.d(t,"MDXProvider",(function(){return m})),r.d(t,"mdx",(function(){return b})),r.d(t,"useMDXComponents",(function(){return u})),r.d(t,"withMDXComponents",(function(){return l}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=o.a.createContext({}),l=function(e){return function(t){var r=u(t.components);return o.a.createElement(e,c({},t,{components:r}))}},u=function(e){var t=o.a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=u(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),d=u(r),l=n,m=d["".concat(c,".").concat(l)]||d[l]||h[l]||a;return r?o.a.createElement(m,s(s({ref:t},i),{},{components:r})):o.a.createElement(m,s({ref:t},i))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<a;p++)c[p]=r[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},73:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return d}));var n=r(2),o=r(7),a=(r(0),r(134)),c={id:"pretender",title:"Pretender"},i={unversionedId:"network/pretender",id:"network/pretender",isDocsHomePage:!1,title:"Pretender",description:"Pretender is a javascript library for the browser that intercepts network requests made with fetch or XMLHttpRequest. It has a straight-forward syntax for defining routes. Unlike mock service worker, which relies on service workers, pretender patches globals in order to capture requests made. This makes pretender quicker to setup than msw but sacrifices amongst other benefits; being able to see the intercepted requests in the network tab of browser developer tools. Captured network requests from pretender can be logged however (see below).",source:"@site/docs/network/pretender.md",slug:"/network/pretender",permalink:"/docs/network/pretender",version:"current",sidebar:"docs",previous:{title:"Mock Service Worker",permalink:"/docs/network/msw"},next:{title:"Express",permalink:"/docs/network/express"}},s=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Logging Intercepted Requests",id:"logging-intercepted-requests",children:[]},{value:"Resolver Context",id:"resolver-context",children:[]}]},{value:"API Documentation",id:"api-documentation",children:[]}],p={rightToc:s};function d(e){var t=e.components,r=Object(o.default)(e,["components"]);return Object(a.mdx)("wrapper",Object(n.default)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(n.default)({parentName:"p"},{href:"https://github.com/pretenderjs/pretender"}),"Pretender")," is a javascript library for the browser that intercepts network requests made with fetch or XMLHttpRequest. It has a straight-forward syntax for defining routes. Unlike ",Object(a.mdx)("a",Object(n.default)({parentName:"p"},{href:"/docs/network/msw"}),"mock service worker"),", which relies on service workers, pretender patches globals in order to capture requests made. This makes pretender quicker to setup than ",Object(a.mdx)("inlineCode",{parentName:"p"},"msw")," but sacrifices amongst other benefits; being able to see the intercepted requests in the network tab of browser developer tools. Captured network requests from pretender can be logged however (see below)."),Object(a.mdx)("h2",{id:"installation"},"Installation"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(n.default)({parentName:"pre"},{className:"language-bash"}),"# npm\nnpm install --save-dev nock @graphql-mocks/network-pretender\n\n# yarn\nyarn add --dev nock @graphql-mocks/network-pretender\n")),Object(a.mdx)("h2",{id:"usage"},"Usage"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(n.default)({parentName:"pre"},{className:"language-js"}),"import Pretender from 'pretender';\nimport { pretenderHandler } from '@graphql-mocks/network-pretender';\nimport graphqlSchema from './graphql-schema';\nimport { GraphQLHandler } from 'graphql-mocks';\n\n// create or import GraphQLHandler\nconst graphqlHandler = new GraphQLHandler({\n  dependencies: { graphqlSchema }\n});\n\n// create Pretender instance\nconst server = new Pretender(function () {\n  // specify route or url to intercept with created handler via `pretenderHandler`\n  this.post('http://graphql-api.com/graphql', pretenderHandler(graphqlHandler));\n});\n")),Object(a.mdx)("h3",{id:"logging-intercepted-requests"},"Logging Intercepted Requests"),Object(a.mdx)("p",null,"While there isn't the network tab to check there is logging that can be added to captured requests that can help with debugging."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(n.default)({parentName:"pre"},{className:"language-js"}),"const server = new Pretender(function () {\n  this.post('http://graphql-api.com/graphql', pretenderHandler(graphqlHandler));\n});\n\nserver.handledRequest = function (verb, path, request) {\n  console.log(`[${verb}] @ ${path}`);\n  console.log({ request });\n};\n")),Object(a.mdx)("h3",{id:"resolver-context"},"Resolver Context"),Object(a.mdx)("p",null,"The pretender request object is made available within the resolver ",Object(a.mdx)("inlineCode",{parentName:"p"},"context")," under the ",Object(a.mdx)("inlineCode",{parentName:"p"},"pretender")," property:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(n.default)({parentName:"pre"},{className:"language-js"}),"function resolver(parent, args, context, info) {\n  const { pretender } = context;\n\n  // reference to the Pretender request object\n  pretender.req;\n}\n")),Object(a.mdx)("h2",{id:"api-documentation"},"API Documentation"),Object(a.mdx)("p",null,"See the ",Object(a.mdx)("a",Object(n.default)({parentName:"p"},{href:"/api/network-pretender/"}),"API Documentation")," for types and more details."))}d.isMDXComponent=!0}}]);